{"ast":null,"code":"import React,{useState,useEffect}from'react';import userProfile from'./Images/user-profile.png';import detective from'./Images/detective-profile.png';import{LoginForm}from'./LoginForm';import{Button}from'react-bootstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const HomePage=()=>{const[isFormOpen,setIsFormOpen]=useState(false);const[userInfo,setUserInfo]=useState({username:\"\",password:\"\",remembered:false});const[remember,setRemember]=useState(false);const[isLoggedIn,setIsLoggedIn]=useState(false);const[formTitle,setFormTitle]=useState(\"Create Account\");const[db,setDb]=useState(null);// stores the indexedDB database instance\nconst[accounts,setAccounts]=useState([]);const[selectedUser,setSelect]=useState(\"Select a saved user\");const[passwordPlaceholder,setPlaceholder]=useState(\"\");// a blank input space for the reset form\nconst[newPassword,setNewPassword]=useState(\"\");const[calledUsername,setCalled]=useState(\"\");const[isPasswordReset,setIsPasswordReset]=React.useState(false);const CryptoJS=require(\"crypto-js\");const secretKey=process.env.REACT_APP_SECRET_KEY;// private password for the encryption algorithmn\nconsole.log(process.env.NODE_ENV);useEffect(()=>{if(!secretKey){console.error(\"Missing secret key in environment variables\");}},[secretKey]);useEffect(()=>{const initializeDatabase=async()=>{const indexedDB=window.indexedDB;const request=indexedDB.open(\"UserDatabase\",2);request.onerror=event=>{console.error(\"Error opening user database!\",event);};request.onupgradeneeded=event=>{const dbInstance=event.target.result;dbInstance.createObjectStore(\"users\",{keyPath:\"username\"});// creates or updates database: creates an objectStore if not found\n};request.onsuccess=()=>{const dbInstance=request.result;if(dbInstance){setDb(dbInstance);// save current db instance\nconst transaction=dbInstance.transaction(\"users\",\"readonly\");const store=transaction.objectStore(\"users\");const getAllRequest=store.getAll();getAllRequest.onsuccess=()=>{const allUsers=getAllRequest.result;const defaultAccount={username:\"Select a saved user\",password:\"\",remember:true,iv:\"\"};setAccounts([defaultAccount,...allUsers]);if(!isLoggedIn){clearForm();// clear form for account deletion\n}};}else{if(!localStorage.getItem(\"homeVisit\")){// save user visit to refresh saved accounts for next surf\nlocalStorage.setItem(\"homeVisit\",\"true\");}}};};initializeDatabase();// create/update database\n},[formTitle,isLoggedIn]);/* Encrypt password and store both encrypted password and IV\r\n    Secret Key: A private password for Advanced Encryption Standard (AES)\r\n    Initialized Vector (IV): unique random string used to control encyption output. Prevents hackers from recognizing patterns.\r\n*/const encryptPassword=password=>{const iv=CryptoJS.lib.WordArray.random(16);// Generate a new random IV\nconst encrypted=CryptoJS.AES.encrypt(password,secretKey,{iv:iv}).toString();return{encryptedPassword:encrypted,iv:iv.toString()};};const decryptPassword=(encryptedPassword,iv)=>{// decrypt the user password for log in purposes\nconst bytes=CryptoJS.AES.decrypt(encryptedPassword,secretKey,{iv:CryptoJS.enc.Hex.parse(iv)});// parse IV into readable form\nreturn bytes.toString(CryptoJS.enc.Utf8);};const updatePassword=event=>{// updates the password to be reset in the reset form\nconst placeholder=event.target.value;setPlaceholder(placeholder);const encrypted=encryptPassword(placeholder);const encryptedPassword=encrypted.encryptedPassword;setNewPassword(encryptedPassword);setUserInfo(prevState=>({// updates user info\n...prevState,password:encryptedPassword}));const usernameToUpdate=calledUsername;// reset password for the called user\nif(db){const transaction=db.transaction(\"users\",\"readwrite\");const store=transaction.objectStore(\"users\");const getUserRequest=store.get(usernameToUpdate);getUserRequest.onsuccess=()=>{const existingUser=getUserRequest.result;if(existingUser){existingUser.password=encryptedPassword;const updateRequest=store.put(existingUser);// overwrites old password in database\nupdateRequest.onsuccess=()=>{updateSavedUsers();// Update saved accounts\n};updateRequest.onerror=event=>{console.error(\"Error updating password:\",event);};}else{console.error(\"User not found for updating password.\");}};transaction.onerror=event=>{console.error(\"Error accessing user store:\",event);};}};const updateCalledUser=event=>{setCalled(event.target.value);};const checkInfo=(savedUsername,savedEncryptedPassword,savedIV,userInput,passInput)=>// checks if log in input matches user credentials\n{if(userInput===savedUsername){const decryptedPassword=decryptPassword(savedEncryptedPassword,savedIV);// decrypt password to compare\nreturn decryptedPassword.trim()===passInput.trim();}else{return false;}};const handleSubmit=event=>{event.preventDefault();if(!userInfo.username||!userInfo.password){alert(\"Username and password are required.\");return;}if(db){const transaction=db.transaction(\"users\",\"readwrite\");const store=transaction.objectStore(\"users\");const userQuery=store.get(userInfo.username);userQuery.onsuccess=()=>{const existingUser=userQuery.result;if(existingUser){if(formTitle===\"Log in\"){const{username,password:encryptedPassword,iv,remembered}=existingUser;if(checkInfo(username,encryptedPassword,iv,userInfo.username,userInfo.password)){setIsLoggedIn(true);if(remember!==remembered){existingUser.remembered=remember;const updateRequest=store.put(existingUser);// change remembered field of user if changed\nupdateRequest.onsuccess=()=>updateSavedUsers();// save changes\nupdateRequest.onerror=event=>console.error(\"Error updating remembered status:\",event);}else{updateSavedUsers();// update regardless if updateSavedUsers() finds no remembered accounts\n}if(!remember){removeFromDropdown(userInfo.username);// remove saved account when not remembered\n}}else{alert(\"Incorrect username or password.\");}}else{alert(\"Account already exists. Please log in.\");clearForm();}}else if(formTitle===\"Create Account\"){const{encryptedPassword,iv}=encryptPassword(userInfo.password);const newUser={...userInfo,password:encryptedPassword,iv,remembered:remember};store.put(newUser).onsuccess=()=>{alert(\"Account created successfully!\");setIsLoggedIn(true);updateSavedUsers();};}else{alert(\"Username doesn't exist!\");clearForm();}};}};const removeFromDropdown=username=>{if(db){const transaction=db.transaction(\"users\",\"readwrite\");const store=transaction.objectStore(\"users\");const getUserRequest=store.get(username);getUserRequest.onsuccess=()=>{const user=getUserRequest.result;if(user){user.remembered=false;// set to false to remove from saved accounts\nconst updateRequest=store.put(user);updateRequest.onsuccess=()=>{updateSavedUsers();// Refresh the accounts list after updating\n// Trigger a re-render for the dropdown or selected user change.\n};updateRequest.onerror=event=>{console.error(\"Error updating account:\",event);};}};transaction.onerror=event=>{console.error(\"Error accessing the user store:\",event);};}};const deleteAccount=async username=>{if(db){const transaction=db.transaction(\"users\",\"readwrite\");const store=transaction.objectStore(\"users\");if(window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")){try{const getRequest=store.get(username);getRequest.onsuccess=async()=>{const userAccount=getRequest.result;if(userAccount&&userAccount.remembered){removeFromDropdown(username);// Remove account from saved dropdown if remembered\n}const deleteRequest=store.delete(username);deleteRequest.onsuccess=()=>{handleLogout();// Reset the login state\nupdateSavedUsers();// Update saved accounts\nalert(\"Account deleted!\");};deleteRequest.onerror=()=>{console.error(\"Error deleting account\");};};getRequest.onerror=()=>{console.error(\"Error fetching account\");};}catch(error){console.error(\"An error occurred while deleting the account:\",error);}}}};const updateSavedUsers=()=>{if(db){const transaction=db.transaction(\"users\",\"readonly\");const store=transaction.objectStore(\"users\");const request=store.getAll();request.onsuccess=()=>{const allAccounts=request.result;setAccounts(allAccounts);// Set all users for general access\nconst rememberedAccounts=allAccounts.filter(account=>account.remembered);if(rememberedAccounts.length>1){const account=rememberedAccounts[0];// Select the first remembered account\nconst decryptedPassword=decryptPassword(account.password,account.iv);setUserInfo({username:account.username,password:decryptedPassword,remembered:account.remembered});setSelect(account.username);// Update the dropdown to show the remembered username\n}else{setUserInfo({username:userInfo.username,password:userInfo.password,remembered:false});}};}};const toggleForm=()=>{// controls opening/closing form\nif(formTitle===\"Reset Password\"){setIsPasswordReset(false);}setIsFormOpen(!isFormOpen);};const clearForm=()=>{setTimeout(()=>{setUserInfo({username:\"\",password:\"\",remembered:false});setSelect(\"\");// Clear selected user from dropdown\n},50);};const updateStatus=event=>{const{name,value,type,checked}=event.target;// destructured HTML element\nsetUserInfo(prevInfo=>({...prevInfo,[name]:type===\"checkbox\"?checked:value// takes name as generic key... updates field based on type\n}));};const handleLogout=()=>{setTimeout(()=>{alert(\"Logging out...\");setIsLoggedIn(false);setIsFormOpen(false);},1500);};const handleRemember=()=>{const newRememberState=!remember;// switch remember on check mark click/unclick\nsetRemember(newRememberState);};const showForm=title=>{setFormTitle(title);if(title===\"Create Account\"){clearForm();// clear form fields when switching to \"Create Account\"\n}else if(title===\"Log in\"){setRemember(true);// set true regardless to show saved accounts\n}toggleForm();};return/*#__PURE__*/_jsxs(\"div\",{style:{height:'100px',display:\"flex\",justifyContent:\"flex-start\",alignItems:\"center\",position:'relative'},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",justifyContent:\"flex-start\",alignItems:\"center\"},children:isLoggedIn?/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",justifyContent:\"flex-start\",alignItems:\"center\",gap:\"10px\"},children:[/*#__PURE__*/_jsx(\"img\",{src:detective// default profile picture\n,alt:\"detective profile\",style:{width:'80px',height:'80px',cursor:'pointer'},onClick:()=>showForm(\"Create Account\"),title:userInfo.username}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",flexDirection:\"row\",alignItems:\"center\",gap:\"10px\"},children:[/*#__PURE__*/_jsx(Button,{style:{borderRadius:\"20px\",backgroundColor:\"salmon\"},onClick:handleLogout,children:\"Log out\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>deleteAccount(userInfo.username),style:{borderRadius:\"20px\",backgroundColor:\"darkred\"},children:\"Delete Account\"})]})]}):/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",justifyContent:\"flex-start\",alignItems:\"center\"},children:[/*#__PURE__*/_jsx(\"img\",{src:userProfile,alt:\"User Profile\",style:{width:'50px',height:'55px',cursor:'pointer'},onClick:()=>showForm(\"Create Account\"),title:\"Guest\"// default visitor status\n}),/*#__PURE__*/_jsx(Button,{style:{borderRadius:\"20px\",height:\"40px\",backgroundColor:\"darkblue\"},onClick:()=>showForm(\"Log in\"),children:\"Log in\"})]})}),isFormOpen&&!isLoggedIn&&/*#__PURE__*/_jsx(LoginForm,{userInfo:userInfo,setUserInfo:setUserInfo,remember:remember,setRemember:setRemember,handleRemember:handleRemember,handleSubmit:handleSubmit,updateStatus:updateStatus,selectedUser:selectedUser,setSelect:setSelect,accounts:accounts,closeForm:toggleForm,formTitle:formTitle,setFormTitle:setFormTitle,decryptPassword:decryptPassword,passwordPlaceholder:passwordPlaceholder,setPlaceholder:setPlaceholder,isPasswordReset:isPasswordReset,setIsPasswordReset:setIsPasswordReset,newPassword:newPassword,updatePassword:updatePassword,calledUsername:calledUsername,setCalled:setCalled,updateCalledUser:updateCalledUser}),/*#__PURE__*/_jsx(\"div\",{style:{position:'absolute',left:'595px',top:'50%',transform:'translateY(-50%)'},children:/*#__PURE__*/_jsx(\"a\",{href:\"https://bleaky11.github.io/starter_helpi/\",style:{color:'black',fontSize:'40px',textDecoration:'none'},children:\"The Career Codebreaker\"})})]});};","map":{"version":3,"names":["React","useState","useEffect","userProfile","detective","LoginForm","Button","jsx","_jsx","jsxs","_jsxs","HomePage","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remembered","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","accounts","setAccounts","selectedUser","setSelect","passwordPlaceholder","setPlaceholder","newPassword","setNewPassword","calledUsername","setCalled","isPasswordReset","setIsPasswordReset","CryptoJS","require","secretKey","process","env","REACT_APP_SECRET_KEY","console","log","NODE_ENV","error","initializeDatabase","indexedDB","window","request","open","onerror","event","onupgradeneeded","dbInstance","target","result","createObjectStore","keyPath","onsuccess","transaction","store","objectStore","getAllRequest","getAll","allUsers","defaultAccount","iv","clearForm","localStorage","getItem","setItem","encryptPassword","lib","WordArray","random","encrypted","AES","encrypt","toString","encryptedPassword","decryptPassword","bytes","decrypt","enc","Hex","parse","Utf8","updatePassword","placeholder","value","prevState","usernameToUpdate","getUserRequest","get","existingUser","updateRequest","put","updateSavedUsers","updateCalledUser","checkInfo","savedUsername","savedEncryptedPassword","savedIV","userInput","passInput","decryptedPassword","trim","handleSubmit","preventDefault","alert","userQuery","removeFromDropdown","newUser","user","deleteAccount","confirm","getRequest","userAccount","deleteRequest","delete","handleLogout","allAccounts","rememberedAccounts","filter","account","length","toggleForm","setTimeout","updateStatus","name","type","checked","prevInfo","handleRemember","newRememberState","showForm","title","style","height","display","justifyContent","alignItems","position","children","gap","src","alt","width","cursor","onClick","flexDirection","borderRadius","backgroundColor","closeForm","left","top","transform","href","color","fontSize","textDecoration"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport detective from './Images/detective-profile.png';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button} from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [userInfo, setUserInfo] = useState({ username: \"\", password: \"\", remembered: false});\r\n  const [remember, setRemember] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null); // stores the indexedDB database instance\r\n  const [accounts, setAccounts] = useState<{ username: string; password: string, remembered: boolean, iv: string }[]>([]);\r\n  const [selectedUser, setSelect] = useState(\"Select a saved user\");\r\n  const [passwordPlaceholder, setPlaceholder] = useState<string>(\"\"); // a blank input space for the reset form\r\n  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n  const [calledUsername, setCalled]= useState<string>(\"\");\r\n  const [isPasswordReset, setIsPasswordReset] = React.useState<boolean>(false);\r\n\r\n  const CryptoJS = require(\"crypto-js\");\r\n\r\n  const secretKey = process.env.REACT_APP_SECRET_KEY; // private password for the encryption algorithmn\r\n  console.log(process.env.NODE_ENV);\r\n\r\n  useEffect(() => {\r\n    if (!secretKey) {\r\n      console.error(\"Missing secret key in environment variables\");\r\n    }\r\n  }, [secretKey]);\r\n\r\n  useEffect(() => {\r\n    const initializeDatabase = async () => {\r\n      const indexedDB = window.indexedDB;\r\n      const request = indexedDB.open(\"UserDatabase\", 2);\r\n  \r\n      request.onerror = (event) => {\r\n        console.error(\"Error opening user database!\", event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        const dbInstance = (event.target as IDBOpenDBRequest).result;\r\n        dbInstance.createObjectStore(\"users\", { keyPath: \"username\" }); // creates or updates database: creates an objectStore if not found\r\n      };\r\n  \r\n      request.onsuccess = () => {\r\n        const dbInstance = request.result;\r\n        if (dbInstance) {\r\n          setDb(dbInstance); // save current db instance\r\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n          const store = transaction.objectStore(\"users\");\r\n          const getAllRequest = store.getAll();\r\n  \r\n          getAllRequest.onsuccess = () => {\r\n            const allUsers = getAllRequest.result;\r\n            const defaultAccount = { username: \"Select a saved user\", password: \"\", remember: true, iv: \"\" };\r\n            setAccounts([defaultAccount, ...allUsers]);\r\n            if(!isLoggedIn)\r\n            {\r\n              clearForm(); // clear form for account deletion\r\n            }\r\n          };\r\n        } else {\r\n          if (!localStorage.getItem(\"homeVisit\")) { // save user visit to refresh saved accounts for next surf\r\n            localStorage.setItem(\"homeVisit\", \"true\");\r\n          }\r\n        }\r\n      };\r\n    };\r\n    initializeDatabase(); // create/update database\r\n  }, [formTitle, isLoggedIn]);\r\n\r\n/* Encrypt password and store both encrypted password and IV\r\n    Secret Key: A private password for Advanced Encryption Standard (AES)\r\n    Initialized Vector (IV): unique random string used to control encyption output. Prevents hackers from recognizing patterns.\r\n*/\r\n\r\nconst encryptPassword = (password: string) => {\r\n  const iv = CryptoJS.lib.WordArray.random(16); // Generate a new random IV\r\n  const encrypted = CryptoJS.AES.encrypt(password, secretKey, { iv: iv }).toString();\r\n  return { encryptedPassword: encrypted, iv: iv.toString() };\r\n};\r\n\r\nconst decryptPassword = (encryptedPassword: string, iv: string) => { // decrypt the user password for log in purposes\r\n  const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey, { iv: CryptoJS.enc.Hex.parse(iv) }); // parse IV into readable form\r\n  return bytes.toString(CryptoJS.enc.Utf8); \r\n};\r\n\r\nconst updatePassword = (event: React.ChangeEvent<HTMLInputElement>) => { // updates the password to be reset in the reset form\r\n  const placeholder = event.target.value; \r\n  setPlaceholder(placeholder); \r\n  \r\n  const encrypted = encryptPassword(placeholder);\r\n  const encryptedPassword = encrypted.encryptedPassword;\r\n  setNewPassword(encryptedPassword);\r\n  \r\n  setUserInfo(prevState => ({ // updates user info\r\n    ...prevState,\r\n    password: encryptedPassword,\r\n  }));\r\n  \r\n  const usernameToUpdate = calledUsername;  // reset password for the called user\r\n  \r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    const getUserRequest = store.get(usernameToUpdate); \r\n    \r\n    getUserRequest.onsuccess = () => {\r\n      const existingUser = getUserRequest.result;\r\n  \r\n      if (existingUser) {\r\n        \r\n        existingUser.password = encryptedPassword;\r\n        \r\n        const updateRequest = store.put(existingUser); // overwrites old password in database\r\n        \r\n        updateRequest.onsuccess = () => {\r\n          updateSavedUsers();  // Update saved accounts\r\n        };\r\n  \r\n        updateRequest.onerror = (event) => {\r\n          console.error(\"Error updating password:\", event);\r\n        };\r\n      } else {\r\n        console.error(\"User not found for updating password.\");\r\n      }\r\n    };\r\n  \r\n    transaction.onerror = (event) => {\r\n      console.error(\"Error accessing user store:\", event);\r\n    };\r\n  }\r\n};\r\n\r\nconst updateCalledUser = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n{\r\n  setCalled(event.target.value);\r\n}\r\n\r\nconst checkInfo = (savedUsername: string, savedEncryptedPassword: string, savedIV: string, userInput: string, passInput: string) => // checks if log in input matches user credentials\r\n{\r\n  if (userInput === savedUsername) {\r\n      const decryptedPassword = decryptPassword(savedEncryptedPassword, savedIV); // decrypt password to compare\r\n      return decryptedPassword.trim() === passInput.trim()\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n  event.preventDefault();\r\n\r\n  if (!userInfo.username || !userInfo.password) {\r\n    alert(\"Username and password are required.\");\r\n    return;\r\n  }\r\n\r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    const userQuery = store.get(userInfo.username);\r\n\r\n    userQuery.onsuccess = () => {\r\n      const existingUser = userQuery.result;\r\n\r\n      if (existingUser) {\r\n        if (formTitle === \"Log in\") {\r\n          const { username, password: encryptedPassword, iv, remembered } = existingUser;\r\n\r\n          if (checkInfo(username, encryptedPassword, iv, userInfo.username, userInfo.password)) {\r\n            setIsLoggedIn(true);\r\n            if (remember !== remembered) {\r\n              existingUser.remembered = remember;\r\n              const updateRequest = store.put(existingUser); // change remembered field of user if changed\r\n              updateRequest.onsuccess = () => updateSavedUsers(); // save changes\r\n              updateRequest.onerror = (event) => console.error(\"Error updating remembered status:\", event);\r\n            } else {\r\n              updateSavedUsers(); // update regardless if updateSavedUsers() finds no remembered accounts\r\n            }\r\n            if (!remember) {\r\n              removeFromDropdown(userInfo.username); // remove saved account when not remembered\r\n            }\r\n          } else {\r\n            alert(\"Incorrect username or password.\");\r\n          }\r\n        } else {\r\n          alert(\"Account already exists. Please log in.\");\r\n          clearForm();\r\n        }\r\n      } else if (formTitle === \"Create Account\") {\r\n        const { encryptedPassword, iv } = encryptPassword(userInfo.password);\r\n        const newUser = { ...userInfo, password: encryptedPassword, iv, remembered: remember };\r\n\r\n        store.put(newUser).onsuccess = () => {\r\n          alert(\"Account created successfully!\");\r\n          setIsLoggedIn(true);\r\n          updateSavedUsers();\r\n        };\r\n      } else {\r\n        alert(\"Username doesn't exist!\");\r\n        clearForm();\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nconst removeFromDropdown = (username: string) => {\r\n  if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const getUserRequest = store.get(username);\r\n\r\n      getUserRequest.onsuccess = () => {\r\n          const user = getUserRequest.result;\r\n\r\n          if (user) {\r\n              user.remembered = false; // set to false to remove from saved accounts\r\n\r\n              const updateRequest = store.put(user);\r\n\r\n              updateRequest.onsuccess = () => {\r\n                  updateSavedUsers(); // Refresh the accounts list after updating\r\n                  // Trigger a re-render for the dropdown or selected user change.\r\n              };\r\n\r\n              updateRequest.onerror = (event) => {\r\n                  console.error(\"Error updating account:\", event);\r\n              };\r\n          }\r\n      };\r\n\r\n      transaction.onerror = (event) => {\r\n          console.error(\"Error accessing the user store:\", event);\r\n      };\r\n  }\r\n};\r\n\r\nconst deleteAccount = async (username: string) => {\r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\r\n      try {\r\n        const getRequest = store.get(username);\r\n\r\n        getRequest.onsuccess = async () => {\r\n          const userAccount = getRequest.result;\r\n\r\n          if (userAccount && userAccount.remembered) {\r\n            removeFromDropdown(username); // Remove account from saved dropdown if remembered\r\n          }\r\n\r\n          const deleteRequest = store.delete(username);\r\n\r\n          deleteRequest.onsuccess = () => {\r\n            handleLogout(); // Reset the login state\r\n            updateSavedUsers(); // Update saved accounts\r\n            alert(\"Account deleted!\");\r\n          };\r\n\r\n          deleteRequest.onerror = () => {\r\n            console.error(\"Error deleting account\");\r\n          };\r\n        };\r\n\r\n        getRequest.onerror = () => {\r\n          console.error(\"Error fetching account\");\r\n        };\r\n      } catch (error) {\r\n        console.error(\"An error occurred while deleting the account:\", error);\r\n      }\r\n    }\r\n  }\r\n};\r\n    \r\nconst updateSavedUsers = () => { \r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readonly\");\r\n    const store = transaction.objectStore(\"users\");\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n      const allAccounts = request.result;\r\n      setAccounts(allAccounts); // Set all users for general access\r\n\r\n      const rememberedAccounts = allAccounts.filter(account => account.remembered);\r\n      if (rememberedAccounts.length > 1) { \r\n        const account = rememberedAccounts[0];  // Select the first remembered account\r\n        const decryptedPassword = decryptPassword(account.password, account.iv); \r\n        setUserInfo({\r\n          username: account.username,\r\n          password: decryptedPassword,  \r\n          remembered: account.remembered,\r\n        });\r\n        setSelect(account.username);  // Update the dropdown to show the remembered username\r\n      } else {\r\n        setUserInfo({\r\n          username: userInfo.username,\r\n          password: userInfo.password,\r\n          remembered: false, \r\n        });\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n  const toggleForm = () => { // controls opening/closing form\r\n    if(formTitle === \"Reset Password\")\r\n    {\r\n      setIsPasswordReset(false);\r\n    }\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setTimeout(() => {\r\n      setUserInfo({ username: \"\", password: \"\", remembered: false });\r\n      setSelect(\"\"); // Clear selected user from dropdown\r\n    }, 50); \r\n  };  \r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = event.target; // destructured HTML element\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: type === \"checkbox\" ? checked : value, // takes name as generic key... updates field based on type\r\n    }));\r\n  };   \r\n\r\n  const handleLogout = () => {\r\n    setTimeout(() =>\r\n    {\r\n      alert(\"Logging out...\");\r\n      setIsLoggedIn(false);\r\n      setIsFormOpen(false);\r\n    }, 1500);\r\n}; \r\n  \r\n  const handleRemember = () => {\r\n    const newRememberState = !remember; // switch remember on check mark click/unclick\r\n    setRemember(newRememberState); \r\n  };  \r\n  \r\n  const showForm = (title: string) => {\r\n    setFormTitle(title);\r\n    if (title === \"Create Account\") {\r\n      clearForm(); // clear form fields when switching to \"Create Account\"\r\n    }\r\n    else if(title === \"Log in\")\r\n    {\r\n      setRemember(true); // set true regardless to show saved accounts\r\n    }\r\n    toggleForm();\r\n  }; \r\n\r\n  return (<div style={{ height: '100px', display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\", position: 'relative'}}>\r\n    <div style={{ display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\" }}>\r\n      {isLoggedIn ? (\r\n        <div style={{ display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\", gap: \"10px\" }}>\r\n          <img\r\n            src={detective} // default profile picture\r\n            alt=\"detective profile\"\r\n            style={{ width: '80px', height: '80px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title={userInfo.username}\r\n          />\r\n          <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", gap: \"10px\" }}>\r\n            <Button\r\n              style={{ borderRadius: \"20px\", backgroundColor: \"salmon\" }}\r\n              onClick={handleLogout}\r\n            >\r\n              Log out\r\n            </Button>\r\n            <Button\r\n              onClick={() => deleteAccount(userInfo.username)}\r\n              style={{\r\n                borderRadius: \"20px\",\r\n                backgroundColor: \"darkred\"\r\n              }}\r\n            >\r\n              Delete Account\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div style={{ display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\" }}>\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title=\"Guest\" // default visitor status\r\n          />\r\n          <Button\r\n            style={{ borderRadius: \"20px\", height: \"40px\", backgroundColor: \"darkblue\" }}\r\n            onClick={() => showForm(\"Log in\")}\r\n          >\r\n            Log in\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  \r\n    {isFormOpen && !isLoggedIn && (\r\n      <LoginForm\r\n        userInfo={userInfo}\r\n        setUserInfo={setUserInfo}\r\n        remember={remember}\r\n        setRemember={setRemember}\r\n        handleRemember={handleRemember}\r\n        handleSubmit={handleSubmit}\r\n        updateStatus={updateStatus}\r\n        selectedUser={selectedUser}\r\n        setSelect={setSelect}\r\n        accounts={accounts}\r\n        closeForm={toggleForm}\r\n        formTitle={formTitle}\r\n        setFormTitle={setFormTitle}\r\n        decryptPassword={decryptPassword}\r\n        passwordPlaceholder={passwordPlaceholder}\r\n        setPlaceholder={setPlaceholder}\r\n        isPasswordReset={isPasswordReset}\r\n        setIsPasswordReset={setIsPasswordReset}\r\n        newPassword={newPassword}\r\n        updatePassword={updatePassword}\r\n        calledUsername={calledUsername}\r\n        setCalled={setCalled}\r\n        updateCalledUser={updateCalledUser}\r\n      />\r\n    )}\r\n  \r\n    {/* Fixed Career Quiz Link */}\r\n    <div style={{ position: 'absolute', left: '595px', top: '50%', transform: 'translateY(-50%)' }}>\r\n      <a\r\n        href=\"https://bleaky11.github.io/starter_helpi/\"\r\n        style={{ color: 'black', fontSize: '40px', textDecoration: 'none' }}\r\n      >\r\n        The Career Codebreaker\r\n      </a>\r\n    </div>\r\n  </div>\r\n)}  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}