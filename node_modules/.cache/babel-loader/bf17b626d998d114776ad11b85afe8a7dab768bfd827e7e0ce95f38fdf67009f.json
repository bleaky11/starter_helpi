{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\LoginForm.tsx\",\n  _s = $RefreshSig$();\nimport { Form } from 'react-bootstrap';\nimport { useEffect } from 'react';\nimport './LoginForm.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const LoginForm = ({\n  userInfo,\n  setUserInfo,\n  remember,\n  setRemember,\n  updateStatus,\n  handleRemember,\n  handleSubmit,\n  closeForm,\n  accounts,\n  selectedUser,\n  setSelect,\n  formTitle,\n  setFormTitle,\n  decryptPassword,\n  passwordPlaceholder,\n  setPlaceholder,\n  isPasswordReset,\n  setIsPasswordReset,\n  newPassword,\n  updatePassword,\n  calledUsername,\n  setCalled,\n  updateCalledUser\n}) => {\n  _s();\n  useEffect(() => {\n    // displays saved credentials for dropdown for selected user\n    if (formTitle === \"Log in\" && selectedUser && accounts.length > 0) {\n      const selectedAccount = accounts.find(account => account.username === selectedUser); // show saved user credentials if found\n      console.log(\"selectedAccount: \", selectedAccount);\n      if (selectedAccount) {\n        const decryptedPassword = decryptPassword(selectedAccount.password, selectedAccount.iv);\n        if (userInfo.username !== selectedAccount.username ||\n        // compares old select to new selected user to update if needed\n        userInfo.password !== decryptedPassword || userInfo.remembered !== selectedAccount.remembered) {\n          var _selectedAccount$reme;\n          setUserInfo({\n            username: selectedAccount.username,\n            password: decryptedPassword,\n            remembered: (_selectedAccount$reme = selectedAccount.remembered) !== null && _selectedAccount$reme !== void 0 ? _selectedAccount$reme : false\n          });\n        }\n      }\n    }\n  }, [formTitle, selectedUser, accounts, decryptPassword, setUserInfo, userInfo, remember]);\n  const handleUserSelect = event => {\n    const selectedUsername = event.target.value;\n    setSelect(selectedUsername);\n    if (selectedUsername === \"\") {\n      // sets blank select to log in to non-saved accounts\n      setUserInfo({\n        username: \"\",\n        password: \"\",\n        remembered: false\n      });\n    } else {\n      // Proceed with selecting a saved user\n      const selectedAccount = accounts.find(account => account.username === selectedUsername);\n      if (selectedAccount) {\n        var _selectedAccount$reme2;\n        const decryptedPassword = decryptPassword(selectedAccount.password, selectedAccount.iv); // display saved user with decrypted password for log in\n        setUserInfo({\n          username: selectedAccount.username,\n          password: decryptedPassword,\n          remembered: (_selectedAccount$reme2 = selectedAccount.remembered) !== null && _selectedAccount$reme2 !== void 0 ? _selectedAccount$reme2 : false\n        });\n      }\n    }\n  };\n  const handleResetClick = () => {\n    // Handle reset password click\n    setIsPasswordReset(false);\n    setFormTitle(\"Log in\"); // go back to log in form to see change\n    setUserInfo(prevState => ({\n      ...prevState,\n      password: \"\"\n    }));\n    alert(\"Password Reset!\");\n  };\n  const handlePasswordReset = () => {\n    // Switch to password reset view\n    setFormTitle(\"Reset Password\");\n    setCalled(\"\"); // reset blank username for input\n    setPlaceholder(\"\"); // reset blank password for input\n    setIsPasswordReset(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-popup\",\n    id: \"myForm\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-container\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: formTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), formTitle === \"Log in\" && !isPasswordReset && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"25px\"\n        },\n        children: accounts.length === 0 ? /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"savedUsers\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"No Saved Usernames\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n            value: selectedUser,\n            onChange: handleUserSelect,\n            disabled: true,\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"No saved users\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"savedUsers\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Saved Usernames\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n            value: selectedUser,\n            onChange: handleUserSelect,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 13\n            }, this), \" \", accounts.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: user.username,\n              children: user.username\n            }, user.username, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), !isPasswordReset && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInfo.username,\n          placeholder: \"Enter Username\",\n          name: \"username\",\n          onChange: updateStatus,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: userInfo.password,\n          placeholder: \"Enter Password\",\n          name: \"password\",\n          onChange: updateStatus,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), formTitle === \"Log in\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: handlePasswordReset // Trigger password reset mode\n          ,\n          style: {\n            fontSize: \"12px\",\n            marginBottom: \"10px\",\n            cursor: \"pointer\",\n            color: \"blue\",\n            textDecoration: \"underline\"\n          },\n          tabIndex: 0,\n          role: \"button\",\n          children: \"Forgot Password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !isPasswordReset ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                marginRight: '8px'\n              },\n              children: \"Remember me?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              id: \"save-user\",\n              name: \"save-user\",\n              checked: remember,\n              onChange: handleRemember\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: '10px'\n            },\n            type: \"button\",\n            className: \"btn cancel\",\n            onClick: closeForm,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"resetUser\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 42\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: calledUsername,\n            placeholder: \"Enter Username\",\n            onChange: updateCalledUser,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"resetPassword\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"New Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 46\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            value: passwordPlaceholder,\n            placeholder: \"Enter New Password\",\n            onChange: updatePassword,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: calledUsername === \"\" || passwordPlaceholder === \"\",\n            style: {\n              marginTop: '10px'\n            },\n            type: \"button\",\n            className: \"btn\",\n            onClick: handleResetClick,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginTop: '10px'\n            },\n            type: \"button\",\n            className: \"btn cancel\",\n            onClick: () => closeForm(),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["Form","useEffect","React","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginForm","userInfo","setUserInfo","remember","setRemember","updateStatus","handleRemember","handleSubmit","closeForm","accounts","selectedUser","setSelect","formTitle","setFormTitle","decryptPassword","passwordPlaceholder","setPlaceholder","isPasswordReset","setIsPasswordReset","newPassword","updatePassword","calledUsername","setCalled","updateCalledUser","_s","length","selectedAccount","find","account","username","console","log","decryptedPassword","password","iv","remembered","_selectedAccount$reme","handleUserSelect","event","selectedUsername","target","value","_selectedAccount$reme2","handleResetClick","prevState","alert","handlePasswordReset","className","id","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","Group","controlId","Label","Select","onChange","disabled","map","user","htmlFor","type","placeholder","name","required","onClick","fontSize","cursor","color","textDecoration","tabIndex","role","display","alignItems","marginRight","Check","checked","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/LoginForm.tsx"],"sourcesContent":["import { Form } from 'react-bootstrap';\r\nimport { useEffect } from 'react';\r\nimport './LoginForm.css';\r\nimport React from 'react';\r\n\r\nexport interface LoginFormProps {\r\n  closeForm: () => void;\r\n  userInfo: { username: string; password: string; remembered: boolean };\r\n  setUserInfo: (value: React.SetStateAction<{ username: string; password: string; remembered: boolean }>) => void;\r\n  remember: boolean;\r\n  setRemember: React.Dispatch<React.SetStateAction<boolean>>;\r\n  updateStatus: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleRemember: () => void;\r\n  handleSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\r\n  accounts: { username: string; password: string; remembered: boolean; iv: string }[];\r\n  selectedUser: string;\r\n  setSelect: (value: React.SetStateAction<string>) => void;\r\n  formTitle: string;\r\n  setFormTitle: React.Dispatch<React.SetStateAction<string>>;\r\n  decryptPassword: (encryptedPassword: string, iv: string) => string;\r\n  passwordPlaceholder: string;\r\n  setPlaceholder: React.Dispatch<React.SetStateAction<string>>;\r\n  isPasswordReset: boolean;\r\n  setIsPasswordReset: React.Dispatch<React.SetStateAction<boolean>>;\r\n  newPassword: string;\r\n  updatePassword: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  calledUsername: string;\r\n  setCalled: React.Dispatch<React.SetStateAction<string>>;\r\n  updateCalledUser: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const LoginForm: React.FC<LoginFormProps> = ({\r\n  userInfo,\r\n  setUserInfo,\r\n  remember,\r\n  setRemember,\r\n  updateStatus,\r\n  handleRemember,\r\n  handleSubmit,\r\n  closeForm,\r\n  accounts,\r\n  selectedUser,\r\n  setSelect,\r\n  formTitle,\r\n  setFormTitle,\r\n  decryptPassword,\r\n  passwordPlaceholder,\r\n  setPlaceholder,\r\n  isPasswordReset,\r\n  setIsPasswordReset,\r\n  newPassword,\r\n  updatePassword,\r\n  calledUsername,\r\n  setCalled,\r\n  updateCalledUser\r\n}) => {\r\n\r\n  useEffect(() => {  \r\n    // displays saved credentials for dropdown for selected user\r\n    if (formTitle === \"Log in\" && selectedUser && accounts.length > 0) {\r\n      const selectedAccount = accounts.find(account => account.username === selectedUser); // show saved user credentials if found\r\n      console.log(\"selectedAccount: \", selectedAccount);\r\n      if (selectedAccount) {\r\n        const decryptedPassword = decryptPassword(selectedAccount.password, selectedAccount.iv);\r\n        if (\r\n          userInfo.username !== selectedAccount.username || // compares old select to new selected user to update if needed\r\n          userInfo.password !== decryptedPassword ||\r\n          userInfo.remembered !== selectedAccount.remembered\r\n        ) {\r\n          setUserInfo({ \r\n            username: selectedAccount.username,\r\n            password: decryptedPassword,\r\n            remembered: selectedAccount.remembered ?? false,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [formTitle, selectedUser, accounts, decryptPassword, setUserInfo, userInfo, remember]);  \r\n\r\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const selectedUsername = event.target.value;\r\n    setSelect(selectedUsername);\r\n    if (selectedUsername === \"\") { // sets blank select to log in to non-saved accounts\r\n      setUserInfo({\r\n        username: \"\",\r\n        password: \"\",\r\n        remembered: false,\r\n      });\r\n    } else {\r\n      // Proceed with selecting a saved user\r\n      const selectedAccount = accounts.find(account => account.username === selectedUsername);\r\n      if (selectedAccount) {\r\n        const decryptedPassword = decryptPassword(selectedAccount.password, selectedAccount.iv); // display saved user with decrypted password for log in\r\n        setUserInfo({\r\n          username: selectedAccount.username,\r\n          password: decryptedPassword,\r\n          remembered: selectedAccount.remembered ?? false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleResetClick = () => { // Handle reset password click\r\n    setIsPasswordReset(false);\r\n    setFormTitle(\"Log in\"); // go back to log in form to see change\r\n    setUserInfo(prevState => ({\r\n      ...prevState,\r\n      password: \"\"\r\n    }));\r\n    alert(\"Password Reset!\");\r\n  };\r\n\r\n  const handlePasswordReset = () => { // Switch to password reset view\r\n    setFormTitle(\"Reset Password\");\r\n    setCalled(\"\"); // reset blank username for input\r\n    setPlaceholder(\"\"); // reset blank password for input\r\n    setIsPasswordReset(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-popup\" id=\"myForm\">\r\n      <form className=\"form-container\" onSubmit={handleSubmit}>\r\n        <h1>{formTitle}</h1>\r\n\r\n        {/* Display saved users dropdown if not in reset mode */}\r\n        {formTitle === \"Log in\" && !isPasswordReset && (\r\n          <div style={{ marginBottom: \"25px\" }}>\r\n            {accounts.length === 0 ? (\r\n              <Form.Group controlId=\"savedUsers\">\r\n                <Form.Label>No Saved Usernames</Form.Label>\r\n                <Form.Select value={selectedUser} onChange={handleUserSelect} disabled>\r\n                  <option>No saved users</option>\r\n                </Form.Select>\r\n              </Form.Group>\r\n            ) : (\r\n              <Form.Group controlId=\"savedUsers\">\r\n            <Form.Label>Saved Usernames</Form.Label>\r\n            <Form.Select value={selectedUser} onChange={handleUserSelect}>\r\n            <option value=\"\"></option> {/* Default placeholder */}\r\n            {accounts.map((user) => (\r\n              <option key={user.username} value={user.username}>\r\n                {user.username}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n          </Form.Group>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Login fields */}\r\n        {!isPasswordReset && (\r\n          <>\r\n            <label htmlFor=\"username\"><b>Username</b></label>\r\n            <input\r\n              type=\"text\"\r\n              value={userInfo.username}\r\n              placeholder=\"Enter Username\"\r\n              name=\"username\"\r\n              onChange={updateStatus}\r\n              required\r\n            />\r\n\r\n            <label htmlFor=\"password\"><b>Password</b></label>\r\n            <input\r\n              type=\"password\"\r\n              value={userInfo.password}\r\n              placeholder=\"Enter Password\"\r\n              name=\"password\"\r\n              onChange={updateStatus}\r\n              required\r\n            />\r\n\r\n            {formTitle === \"Log in\" && (\r\n              <div\r\n                onClick={handlePasswordReset}  // Trigger password reset mode\r\n                style={{\r\n                  fontSize: \"12px\",\r\n                  marginBottom: \"10px\",\r\n                  cursor: \"pointer\",\r\n                  color: \"blue\",\r\n                  textDecoration: \"underline\"\r\n                }}\r\n                tabIndex={0}\r\n                role=\"button\"\r\n              >\r\n                Forgot Password?\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        <div>\r\n          {!isPasswordReset ? (\r\n            <>\r\n              <button type=\"submit\" className=\"btn\">Login</button>\r\n              <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <span style={{ marginRight: '8px' }}>Remember me?</span>\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  id=\"save-user\"\r\n                  name=\"save-user\"\r\n                  checked={remember}\r\n                  onChange={handleRemember}\r\n                />\r\n              </div>\r\n              <button\r\n                style={{ marginTop: '10px' }}\r\n                type=\"button\"\r\n                className=\"btn cancel\"\r\n                onClick={closeForm}\r\n              >\r\n                Close\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <label htmlFor=\"resetUser\"><b>Username</b></label>\r\n              <input\r\n                type=\"text\"\r\n                value={calledUsername}  \r\n                placeholder=\"Enter Username\"\r\n                onChange={updateCalledUser}\r\n                required\r\n              />\r\n              <label htmlFor=\"resetPassword\"><b>New Password</b></label>\r\n              <input\r\n                type=\"password\"\r\n                value={passwordPlaceholder}  \r\n                placeholder=\"Enter New Password\"\r\n                onChange={updatePassword}\r\n                required\r\n              />\r\n              <button\r\n                disabled = {calledUsername === \"\" || passwordPlaceholder === \"\"}\r\n                style={{ marginTop: '10px' }}\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                onClick={handleResetClick}  \r\n              >\r\n                Reset\r\n              </button>\r\n              <button\r\n                style={{ marginTop: '10px' }}\r\n                type=\"button\"\r\n                className=\"btn cancel\"\r\n                onClick={() => closeForm()}  \r\n              >\r\n                Close\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}