{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\nimport { LoginForm } from './LoginForm';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [remember, setRemember] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n\n  // Load saved accounts from IndexedDB\n  useEffect(() => {\n    const indexedDB = window.indexedDB;\n    const request = indexedDB.open(\"UserDatabase\", 2);\n    request.onerror = event => {\n      console.error(\"Error opening user database!\", event);\n    };\n    request.onupgradeneeded = event => {\n      const dbInstance = event.target.result;\n      dbInstance.createObjectStore(\"users\", {\n        keyPath: \"username\"\n      });\n      console.log(\"Object store created.\");\n    };\n    request.onsuccess = () => {\n      const dbInstance = request.result;\n      setDb(dbInstance);\n      if (dbInstance) {\n        const transaction = dbInstance.transaction(\"users\", \"readonly\");\n        const store = transaction.objectStore(\"users\");\n        const getAllRequest = store.getAll();\n        getAllRequest.onsuccess = () => {\n          const allUsers = getAllRequest.result;\n          const rememberedUsers = allUsers.filter(user => user.remembered).map(user => ({\n            username: user.username,\n            password: user.password\n          }));\n          setAccounts(rememberedUsers);\n        };\n        getAllRequest.onerror = event => {\n          console.error(\"Error retrieving users from the users object store:\", event);\n        };\n      } else {\n        console.error(\"Database is not initialized.\");\n      }\n    };\n  }, []);\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!userInfo.username || !userInfo.password) {\n      console.error(\"Username and password must be provided.\");\n      return;\n    }\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const userQuery = store.get(userInfo.username);\n      userQuery.onsuccess = () => {\n        if (userQuery.result) {\n          const savedUsername = userQuery.result.username;\n          const savedPassword = userQuery.result.password;\n          if (checkInfo(savedUsername, savedPassword, userInfo.username, userInfo.password)) {\n            setIsLoggedIn(true);\n            clearForm(); // Clear form after successful login\n          }\n        } else if (formTitle === \"Create Account\") {\n          const newUser = {\n            username: userInfo.username,\n            password: userInfo.password,\n            remembered: remember\n          };\n          store.put(newUser).onsuccess = () => {\n            if (remember) {\n              setAccounts(prevAccounts => [...prevAccounts, {\n                username: userInfo.username,\n                password: userInfo.password\n              }]);\n            }\n            setIsLoggedIn(true);\n            clearForm(); // Clear form after successful account creation\n          };\n        } else {\n          alert(\"User does not exist. Please create an account first.\");\n          clearForm();\n        }\n      };\n      userQuery.onerror = () => {\n        console.error(\"Error querying user data\");\n      };\n      transaction.onerror = event => {\n        console.error(\"Transaction failed:\", event);\n      };\n    } else {\n      console.error(\"Database not initialized\");\n    }\n  };\n  const clearForm = () => {\n    setUserInfo({\n      username: \"\",\n      password: \"\"\n    });\n  };\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: value\n    }));\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n  };\n  const handleRemember = () => {\n    setRemember(prev => !prev);\n  };\n  const showForm = title => {\n    setFormTitle(title);\n    toggleForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: jerboa,\n        alt: \"Four-Toed Jerboa\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: userInfo.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleLogout,\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkred\"\n        },\n        children: \"Log out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: \"Guest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => showForm(\"Log In\"),\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"green\"\n        },\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => showForm(\"Create Account\"),\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          marginLeft: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"blue\"\n        },\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), isFormOpen && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      accounts: accounts // Pass accounts to the LoginForm\n      ,\n      closeForm: toggleForm,\n      formTitle: formTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"t/E2bVzbBeWyUFCwAGES1XJglvo=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","jerboa","LoginForm","Button","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","accounts","setAccounts","indexedDB","window","request","open","onerror","event","console","error","onupgradeneeded","dbInstance","target","result","createObjectStore","keyPath","log","onsuccess","transaction","store","objectStore","getAllRequest","getAll","allUsers","rememberedUsers","filter","user","remembered","map","handleSubmit","preventDefault","userQuery","get","savedUsername","savedPassword","checkInfo","clearForm","newUser","put","prevAccounts","alert","toggleForm","updateStatus","name","value","prevInfo","handleLogout","handleRemember","prev","showForm","title","children","src","alt","style","float","width","height","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","borderRadius","backgroundColor","marginLeft","closeForm","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);\r\n  const [userInfo, setUserInfo] = useState<{ username: string; password: string }>({ username: \"\", password: \"\" });\r\n  const [remember, setRemember] = useState<boolean>(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\r\n  const [formTitle, setFormTitle] = useState<string>(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null);\r\n  const [accounts, setAccounts] = useState<{ username: string; password: string }[]>([]);\r\n\r\n  // Load saved accounts from IndexedDB\r\n  useEffect(() => {\r\n    const indexedDB = window.indexedDB;\r\n    const request = indexedDB.open(\"UserDatabase\", 2);\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"Error opening user database!\", event);\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const dbInstance = (event.target as IDBOpenDBRequest).result;\r\n      dbInstance.createObjectStore(\"users\", { keyPath: \"username\" });\r\n      console.log(\"Object store created.\");\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      const dbInstance = request.result;\r\n      setDb(dbInstance);\r\n\r\n      if (dbInstance) {\r\n        const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n        const store = transaction.objectStore(\"users\");\r\n        const getAllRequest = store.getAll();\r\n\r\n        getAllRequest.onsuccess = () => {\r\n          const allUsers = getAllRequest.result as { username: string; password: string; remembered: boolean }[];\r\n          const rememberedUsers = allUsers\r\n            .filter(user => user.remembered)\r\n            .map(user => ({ username: user.username, password: user.password }));\r\n          setAccounts(rememberedUsers);\r\n        };\r\n\r\n        getAllRequest.onerror = (event) => {\r\n          console.error(\"Error retrieving users from the users object store:\", event);\r\n        };\r\n      } else {\r\n        console.error(\"Database is not initialized.\");\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (!userInfo.username || !userInfo.password) {\r\n      console.error(\"Username and password must be provided.\");\r\n      return;\r\n    }\r\n\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n\r\n      const userQuery = store.get(userInfo.username);\r\n\r\n      userQuery.onsuccess = () => {\r\n        if (userQuery.result) {\r\n          const savedUsername = userQuery.result.username;\r\n          const savedPassword = userQuery.result.password;\r\n\r\n          if (checkInfo(savedUsername, savedPassword, userInfo.username, userInfo.password)) {\r\n            setIsLoggedIn(true);\r\n            clearForm(); // Clear form after successful login\r\n          }\r\n        } else if (formTitle === \"Create Account\") {\r\n          const newUser = { username: userInfo.username, password: userInfo.password, remembered: remember };\r\n          store.put(newUser).onsuccess = () => {\r\n            if (remember) {\r\n              setAccounts(prevAccounts => [...prevAccounts, { username: userInfo.username, password: userInfo.password }]);\r\n            }\r\n            setIsLoggedIn(true);\r\n            clearForm(); // Clear form after successful account creation\r\n          };\r\n        } else {\r\n          alert(\"User does not exist. Please create an account first.\");\r\n          clearForm();\r\n        }\r\n      };\r\n\r\n      userQuery.onerror = () => {\r\n        console.error(\"Error querying user data\");\r\n      };\r\n\r\n      transaction.onerror = (event) => {\r\n        console.error(\"Transaction failed:\", event);\r\n      };\r\n    } else {\r\n      console.error(\"Database not initialized\");\r\n    }\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setUserInfo({ username: \"\", password: \"\" });\r\n  };\r\n\r\n  const toggleForm = () => {\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  const handleRemember = () => {\r\n    setRemember((prev) => !prev);\r\n  };\r\n\r\n  const showForm = (title: string) => {\r\n    setFormTitle(title);\r\n    toggleForm();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <div>\r\n          <img\r\n            src={jerboa}\r\n            alt=\"Four-Toed Jerboa\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title={userInfo.username}\r\n          />\r\n          <Button\r\n            onClick={handleLogout}\r\n            style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkred\" }}\r\n          >\r\n            Log out\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title=\"Guest\"\r\n          />\r\n          <Button\r\n            onClick={() => showForm(\"Log In\")}\r\n            style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"green\" }}\r\n          >\r\n            Log In\r\n          </Button>\r\n          <Button\r\n            onClick={() => showForm(\"Create Account\")}\r\n            style={{ float: \"left\", marginTop: \"10px\", marginLeft: \"10px\", borderRadius: \"20px\", backgroundColor: \"blue\" }}\r\n          >\r\n            Create Account\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {isFormOpen && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          accounts={accounts} // Pass accounts to the LoginForm\r\n          closeForm={toggleForm}\r\n          formTitle={formTitle}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}