{"ast":null,"code":"// Taken from chatgpt and edited to allow for custom questions and apikey inputs\nimport axios from \"axios\";\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nexport const getChatGptResponse = async (message, apiKey) => {\n  try {\n    const response = await axios.post(API_URL, {\n      model: 'gpt-4o',\n      // or 'gpt-4o' depending on your access\n      messages: [{\n        role: 'user',\n        content: message\n      }],\n      max_tokens: 300\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiKey}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error('Error message:', error.message);\n      if (error.response) {\n        console.error('Response data:', error.response.data);\n        console.error('Response status:', error.response.status);\n        console.error('Response headers:', error.response.headers);\n      }\n    } else {\n      console.error('Unexpected error:', error);\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getChatGptResponse","message","apiKey","response","post","model","messages","role","content","max_tokens","headers","Authorization","data","error","isAxiosError","console","status"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/chatGpt.ts"],"sourcesContent":["// Taken from chatgpt and edited to allow for custom questions and apikey inputs\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\r\n\r\nexport const getChatGptResponse = async (message: string, apiKey: string) => {\r\n  try {\r\n    const response = await axios.post(\r\n      API_URL,\r\n      {\r\n        model: 'gpt-4o', // or 'gpt-4o' depending on your access\r\n        messages: [{ role: 'user', content: message }],\r\n        max_tokens: 300\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      console.error('Error message:', error.message);\r\n      if (error.response) {\r\n        console.error('Response data:', error.response.data);\r\n        console.error('Response status:', error.response.status);\r\n        console.error('Response headers:', error.response.headers);\r\n      }\r\n    } else {\r\n      console.error('Unexpected error:', error);\r\n    }\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4CAA4C;AAE5D,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,OAAe,EAAEC,MAAc,KAAK;EAC3E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAC/BL,OAAO,EACP;MACEM,KAAK,EAAE,QAAQ;MAAE;MACjBC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEP;MAAQ,CAAC,CAAC;MAC9CQ,UAAU,EAAE;IACd,CAAC,EACD;MACEC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAAST,MAAO;MAClC;IACF,CACF,CAAC;IACD,OAAOC,QAAQ,CAACS,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIf,KAAK,CAACgB,YAAY,CAACD,KAAK,CAAC,EAAE;MAC7BE,OAAO,CAACF,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACZ,OAAO,CAAC;MAC9C,IAAIY,KAAK,CAACV,QAAQ,EAAE;QAClBY,OAAO,CAACF,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACV,QAAQ,CAACS,IAAI,CAAC;QACpDG,OAAO,CAACF,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACV,QAAQ,CAACa,MAAM,CAAC;QACxDD,OAAO,CAACF,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACV,QAAQ,CAACO,OAAO,CAAC;MAC5D;IACF,CAAC,MAAM;MACLK,OAAO,CAACF,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C;IACA,MAAMA,KAAK;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}