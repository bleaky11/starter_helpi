{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\basicCareer.tsx\",\n  _s = $RefreshSig$();\nimport { backgroundStyle } from \"./CSS/Background\";\nimport { useState } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BasicCareerComponent() {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [questions, setQuestions] = useState([{\n    text: \"How much noise do you mind in your work environment?\",\n    type: \"radio\",\n    choices: [{\n      id: 1,\n      label: \"No noise\"\n    }, {\n      id: 2,\n      label: \"A little noise\"\n    }, {\n      id: 3,\n      label: \"A lot of noise\"\n    }, {\n      id: 4,\n      label: \"I don't mind any\"\n    }],\n    selected: [false, false, false, false]\n  }, {\n    text: \"What type of environment would you prefer to work in?\",\n    type: \"radio\",\n    choices: [{\n      id: 1,\n      label: \"Office\"\n    }, {\n      id: 2,\n      label: \"Outdoors\"\n    }, {\n      id: 3,\n      label: \"Remote\"\n    }, {\n      id: 4,\n      label: \"Hybrid\"\n    }],\n    selected: [false, false, false, false]\n  }, {\n    text: \"Are you interested in any STEM fields?\",\n    type: \"checkbox\",\n    choices: [{\n      id: 1,\n      label: \"Science\"\n    }, {\n      id: 2,\n      label: \"Technology\"\n    }, {\n      id: 3,\n      label: \"Engineering\"\n    }, {\n      id: 4,\n      label: \"Math\"\n    }, {\n      id: 5,\n      label: \"None\"\n    }],\n    selected: [false, false, false, false, false]\n  }\n  // More questions...\n  ]);\n  function updateAnswer(event, index, selectIndex) {\n    const updatedQuestions = [...questions];\n    const isRadio = updatedQuestions[index].type === \"radio\";\n\n    // If it's radio, we want to reset all selected to false, and only set the clicked one to true\n    if (isRadio) {\n      updatedQuestions[index].selected = updatedQuestions[index].selected.map((_, i) => i === selectIndex);\n      setQuestions(updatedQuestions);\n      updateProgress(updatedQuestions); // Update progress for radios\n    } else {\n      // Checkbox logic\n      updatedQuestions[index].selected[selectIndex] = event.target.checked;\n      setQuestions(updatedQuestions);\n      updateProgress(updatedQuestions); // Update progress for checkboxes\n    }\n  }\n  function updateProgress(updatedQuestions) {\n    const totalQuestions = updatedQuestions.length;\n\n    // Calculate how many questions have at least one selected answer\n    const answeredQuestions = updatedQuestions.filter(question => question.selected.some(isSelected => isSelected === true)).length;\n    const progressPercentage = answeredQuestions / totalQuestions * 100;\n    setProgress(progressPercentage);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: backgroundStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          marginBottom: \"10px\",\n          marginRight: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"question\",\n          style: {\n            marginRight: \"10px\"\n          },\n          children: [\"Percent Complete: \", progress.toFixed(0), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"question\",\n          value: progress,\n          max: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Here is the Basic Career Page!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          style: {\n            border: \"2px solid red\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This assessment is designed to determine an appropriate career path going forward. You will be asked a series of multiple choice questions. If you're looking for more in-depth questions, go to the Detailed Career Page. Before you begin, make sure you're in a comfortable environment and answer each question to the best of your ability.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"100px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: question.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            children: question.choices.map((choice, selectIndex) => /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: question.type,\n              label: choice.label,\n              name: `basic-question-${index}` // Unique name for each question\n              ,\n              value: choice.id,\n              checked: question.selected[selectIndex] // Keep track of selected state\n              ,\n              onChange: event => updateAnswer(event, index, selectIndex)\n            }, choice.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(BasicCareerComponent, \"JE5N/karA+xkwiZgcIKc2Napc10=\");\n_c = BasicCareerComponent;\nvar _c;\n$RefreshReg$(_c, \"BasicCareerComponent\");","map":{"version":3,"names":["backgroundStyle","useState","Container","Form","jsxDEV","_jsxDEV","BasicCareerComponent","_s","progress","setProgress","questions","setQuestions","text","type","choices","id","label","selected","updateAnswer","event","index","selectIndex","updatedQuestions","isRadio","map","_","i","updateProgress","target","checked","totalQuestions","length","answeredQuestions","filter","question","some","isSelected","progressPercentage","style","children","display","alignItems","justifyContent","marginBottom","marginRight","htmlFor","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","value","max","textAlign","border","marginLeft","choice","Check","name","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/basicCareer.tsx"],"sourcesContent":["import { backgroundStyle } from \"./CSS/Background\";\r\nimport { useState } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\nimport { FormCheckType } from \"react-bootstrap/esm/FormCheck\";\r\n\r\nexport function BasicCareerComponent(): JSX.Element {\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const [questions, setQuestions] = useState([\r\n    { text: \"How much noise do you mind in your work environment?\", type: \"radio\", choices: [{ id: 1, label: \"No noise\" }, { id: 2, label: \"A little noise\" }, { id: 3, label: \"A lot of noise\" }, {id: 4, label: \"I don't mind any\"}], selected: [false, false, false, false] },\r\n    { text: \"What type of environment would you prefer to work in?\", type: \"radio\", choices: [{ id: 1, label: \"Office\" }, { id: 2, label: \"Outdoors\" }, { id: 3, label: \"Remote\" }, {id: 4, label: \"Hybrid\" }], selected: [false, false, false, false] },\r\n    { text: \"Are you interested in any STEM fields?\", type: \"checkbox\", choices: [{ id: 1, label: \"Science\" }, { id: 2, label: \"Technology\" }, { id: 3, label: \"Engineering\" }, { id: 4, label: \"Math\" }, { id: 5, label: \"None\" } ], selected: [false, false, false, false, false]},\r\n    // More questions...\r\n  ]);\r\n\r\n  function updateAnswer(event: React.ChangeEvent<HTMLInputElement>, index: number, selectIndex: number) \r\n  {\r\n    const updatedQuestions = [...questions];\r\n    const isRadio = updatedQuestions[index].type === \"radio\";\r\n\r\n    // If it's radio, we want to reset all selected to false, and only set the clicked one to true\r\n    if (isRadio) {\r\n      updatedQuestions[index].selected = updatedQuestions[index].selected.map((_, i) => i === selectIndex);\r\n      setQuestions(updatedQuestions);\r\n      updateProgress(updatedQuestions); // Update progress for radios\r\n    } \r\n    else {\r\n      // Checkbox logic\r\n      updatedQuestions[index].selected[selectIndex] = event.target.checked;\r\n      setQuestions(updatedQuestions);\r\n      updateProgress(updatedQuestions); // Update progress for checkboxes\r\n    }\r\n  }\r\n\r\n  function updateProgress(updatedQuestions: typeof questions): void {\r\n    const totalQuestions = updatedQuestions.length;\r\n\r\n    // Calculate how many questions have at least one selected answer\r\n    const answeredQuestions = updatedQuestions.filter((question) =>\r\n      question.selected.some((isSelected) => isSelected === true)\r\n    ).length;\r\n\r\n    const progressPercentage = (answeredQuestions / totalQuestions) * 100;\r\n    setProgress(progressPercentage);\r\n  }\r\n\r\n  return (\r\n    <div style={backgroundStyle}>\r\n      <div>\r\n        <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\", marginBottom: \"10px\", marginRight: \"30px\" }}>\r\n          <label htmlFor=\"question\" style={{ marginRight: \"10px\" }}>\r\n            Percent Complete: {progress.toFixed(0)}%\r\n          </label>\r\n          <progress id=\"question\" value={progress} max=\"100\" />\r\n        </div>\r\n        <h1 style={{ textAlign: \"center\" }}>Here is the Basic Career Page!</h1>\r\n        <br />\r\n        <div>\r\n          <Container style={{ border: \"2px solid red\" }}>\r\n            <p>\r\n              This assessment is designed to determine an appropriate career path going forward.\r\n              You will be asked a series of multiple choice questions. If you're looking for more\r\n              in-depth questions, go to the Detailed Career Page. Before you begin, make sure you're\r\n              in a comfortable environment and answer each question to the best of your ability.\r\n            </p>\r\n          </Container>\r\n        </div>\r\n        <div style={{ marginLeft: \"100px\"}}>\r\n          <br />\r\n          {questions.map((question, index) => (\r\n            <div key={index}>\r\n              <b>{question.text}</b>\r\n              <Form>\r\n                {question.choices.map((choice, selectIndex) => (\r\n                  <Form.Check\r\n                    key={choice.id}\r\n                    type={question.type as FormCheckType}\r\n                    label={choice.label}\r\n                    name={`basic-question-${index}`} // Unique name for each question\r\n                    value={choice.id}\r\n                    checked={question.selected[selectIndex]} // Keep track of selected state\r\n                    onChange={(event) => updateAnswer(event, index, selectIndex)}\r\n                  />\r\n                ))}\r\n              </Form>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}