{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport { LoginForm } from './LoginForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [remember, setRemember] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null); // State to store the database instance\n\n  useEffect(() => {\n    const request = indexedDB.open(\"UserDatabase\", 1);\n    request.onerror = event => {\n      console.error(\"Error accessing user database!\", event);\n    };\n    request.onupgradeneeded = () => {\n      const db = request.result;\n      const store = db.createObjectStore(\"users\", {\n        autoIncrement: true\n      });\n      store.createIndex(\"makeUser\", [\"username\", \"password\"], {\n        unique: false\n      });\n    };\n    request.onsuccess = () => {\n      const db = request.result;\n      setDb(db); // Save db instance for later use\n\n      // Check if the user already exists\n      const transaction = db.transaction(\"users\", \"readonly\");\n      const store = transaction.objectStore(\"users\");\n      const makeUserIndex = store.index(\"makeUser\");\n      const userQuery = makeUserIndex.get([userInfo.username, userInfo.password]);\n      userQuery.onsuccess = () => {\n        if (userQuery.result) {\n          setFormTitle(\"Log In\");\n        } else {\n          setFormTitle(\"Create Account\");\n        }\n      };\n      transaction.oncomplete = () => {\n        db.close(); // Close the database connection after the transaction\n      };\n    };\n  }, [userInfo.password, userInfo.username]); // Watch only username for useEffect\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!db) return; // Ensure db is available\n\n    const transaction = db.transaction(\"users\", \"readwrite\");\n    const store = transaction.objectStore(\"users\");\n    const userRecord = {\n      username: userInfo.username,\n      password: userInfo.password\n    };\n    const putRequest = store.put(userRecord);\n    putRequest.onsuccess = () => {\n      console.log(\"User data added/updated successfully\");\n      setIsLoggedIn(true); // Set logged in status on successful update\n    };\n    putRequest.onerror = () => {\n      console.error(\"Error adding/updating user data\");\n    };\n    transaction.oncomplete = () => {\n      console.log(\"Transaction completed\");\n      // No need to close the database here as it will be reused\n    };\n  };\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: value\n    }));\n  };\n  const handleRemember = () => {\n    setRemember(!remember);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        float: \"left\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Signed in as: \", userInfo.username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: toggleForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://bleaky11.github.io/starter_helpi/\",\n      style: {\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      closeForm: () => setIsFormOpen(false),\n      formTitle: formTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"kCslfHky5ZqNN6JxAPDhIHwsGN8=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","LoginForm","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","request","indexedDB","open","onerror","event","console","error","onupgradeneeded","result","store","createObjectStore","autoIncrement","createIndex","unique","onsuccess","transaction","objectStore","makeUserIndex","index","userQuery","get","oncomplete","close","handleSubmit","preventDefault","userRecord","putRequest","put","log","toggleForm","updateStatus","name","value","target","prevInfo","handleRemember","children","style","position","float","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","width","height","cursor","onClick","href","color","closeForm","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'; \r\nimport userProfile from './Images/user-profile.png';\r\nimport { LoginForm } from './LoginForm';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);\r\n  const [userInfo, setUserInfo] = useState<{ username: string; password: string }>({ username: \"\", password: \"\" });\r\n  const [remember, setRemember] = useState<boolean>(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\r\n  const [formTitle, setFormTitle] = useState<string>(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null); // State to store the database instance\r\n\r\n  useEffect(() => {\r\n    const request = indexedDB.open(\"UserDatabase\", 1);\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"Error accessing user database!\", event);\r\n    };\r\n\r\n    request.onupgradeneeded = () => {\r\n      const db = request.result;\r\n      const store = db.createObjectStore(\"users\", { autoIncrement: true });\r\n      store.createIndex(\"makeUser\", [\"username\", \"password\"], { unique: false });\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      const db = request.result;\r\n      setDb(db); // Save db instance for later use\r\n\r\n      // Check if the user already exists\r\n      const transaction = db.transaction(\"users\", \"readonly\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const makeUserIndex = store.index(\"makeUser\");\r\n      const userQuery = makeUserIndex.get([userInfo.username, userInfo.password]);\r\n\r\n      userQuery.onsuccess = () => {\r\n        if (userQuery.result) {\r\n          setFormTitle(\"Log In\");\r\n        } else {\r\n          setFormTitle(\"Create Account\");\r\n        }\r\n      };\r\n\r\n      transaction.oncomplete = () => {\r\n        db.close(); // Close the database connection after the transaction\r\n      };\r\n    };\r\n  }, [userInfo.password, userInfo.username]); // Watch only username for useEffect\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (!db) return; // Ensure db is available\r\n\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    const userRecord = {\r\n      username: userInfo.username,\r\n      password: userInfo.password,\r\n    };\r\n\r\n    const putRequest = store.put(userRecord);\r\n    putRequest.onsuccess = () => {\r\n      console.log(\"User data added/updated successfully\");\r\n      setIsLoggedIn(true); // Set logged in status on successful update\r\n    };\r\n\r\n    putRequest.onerror = () => {\r\n      console.error(\"Error adding/updating user data\");\r\n    };\r\n\r\n    transaction.oncomplete = () => {\r\n      console.log(\"Transaction completed\");\r\n      // No need to close the database here as it will be reused\r\n    };\r\n  };\r\n\r\n  const toggleForm = () => {\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleRemember = () => {\r\n    setRemember(!remember);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <div style={{ position: \"absolute\", float: \"left\" }}>\r\n          <h3>Signed in as: {userInfo.username}!</h3>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {/* Show the user image only when not logged in */}\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={toggleForm}\r\n          />\r\n        </div>\r\n      )}\r\n      <a href=\"https://bleaky11.github.io/starter_helpi/\" style={{ color: 'black' }}>\r\n        <h1>The Career Quiz</h1>\r\n      </a>\r\n\r\n      {/* Conditionally render the LoginForm */}\r\n      {isFormOpen && !isLoggedIn && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          closeForm={() => setIsFormOpen(false)}\r\n          formTitle={formTitle}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}