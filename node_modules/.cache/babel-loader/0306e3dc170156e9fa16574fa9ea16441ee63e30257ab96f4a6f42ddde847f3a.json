{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport { LoginForm } from './LoginForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [remember, setRemember] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userID, setID] = useState(1);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  useEffect(() => {\n    const indexedDB = window.indexedDB;\n    const request = indexedDB.open(\"UserDatabase\", 1);\n    request.onerror = event => {\n      console.error(\"Error accessing user database!\", event);\n    };\n    request.onupgradeneeded = () => {\n      const db = request.result;\n      const store = db.createObjectStore(\"users\", {\n        autoIncrement: true\n      });\n      store.createIndex(\"username_and_password\", [\"username\", \"password\"], {\n        unique: false\n      });\n      console.log(\"Object store 'users' created with autoIncrement.\");\n    };\n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(\"users\", \"readonly\");\n      const store = transaction.objectStore(\"users\");\n      const currentUserId = userID; // Store current user ID in a local variable\n      console.log(`Checking for user with ID: ${currentUserId}`);\n      const userQuery = store.get(currentUserId);\n      userQuery.onsuccess = () => {\n        console.log(`User query result for ID ${currentUserId}:`, userQuery.result);\n        if (userQuery.result) {\n          setFormTitle(\"Log In\");\n        } else {\n          setFormTitle(\"Create Account\");\n        }\n      };\n      transaction.oncomplete = () => {\n        console.log(\"Transaction completed.\");\n        db.close();\n      };\n    };\n  }, [userID]); // Only change the ID after form submission or necessary action\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"Form submitted with user info:\", userInfo);\n    const indexedDB = window.indexedDB;\n    const request = indexedDB.open(\"UserDatabase\", 1);\n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n\n      // Check if user already exists (optional logic)\n      const userQuery = store.index(\"username_and_password\").get([userInfo.username, userInfo.password]);\n      userQuery.onsuccess = () => {\n        if (userQuery.result) {\n          console.log(\"User already exists.\");\n          setIsLoggedIn(true); // Log in the user if they already exist\n        } else {\n          // User doesn't exist, add them to the database\n          const userToAdd = {\n            username: userInfo.username,\n            password: userInfo.password\n          };\n          const addRequest = store.add(userToAdd);\n          addRequest.onsuccess = () => {\n            console.log(\"User added successfully!\");\n            setIsLoggedIn(true); // Set logged in state\n          };\n          addRequest.onerror = event => {\n            console.error(\"Error adding user:\", event);\n          };\n        }\n      };\n      transaction.oncomplete = () => {\n        db.close();\n      };\n    };\n    request.onerror = event => {\n      console.error(\"Error opening user database:\", event);\n    };\n  };\n  const toggleForm = () => {\n    console.log(\"Toggling form state. Current state:\", isFormOpen);\n    setIsFormOpen(!isFormOpen);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(`Updating user info: ${name} = ${value}`);\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: value\n    }));\n  };\n  const handleRemember = () => {\n    console.log(\"Toggle remember me state. Current state:\", remember);\n    setRemember(!remember);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        float: \"left\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Signed in as: \", userInfo.username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: toggleForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://bleaky11.github.io/starter_helpi/\",\n      style: {\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      closeForm: () => setIsFormOpen(false),\n      formTitle: formTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"bPag0w5/DEMBjId0Xom+Jn8qPbQ=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","LoginForm","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remember","setRemember","isLoggedIn","setIsLoggedIn","userID","setID","formTitle","setFormTitle","indexedDB","window","request","open","onerror","event","console","error","onupgradeneeded","db","result","store","createObjectStore","autoIncrement","createIndex","unique","log","onsuccess","transaction","objectStore","currentUserId","userQuery","get","oncomplete","close","handleSubmit","preventDefault","index","userToAdd","addRequest","add","toggleForm","updateStatus","name","value","target","prevInfo","handleRemember","children","style","position","float","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","width","height","cursor","onClick","href","color","closeForm","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'; \r\nimport userProfile from './Images/user-profile.png';\r\nimport { LoginForm } from './LoginForm';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);\r\n  const [userInfo, setUserInfo] = useState<{ username: string; password: string }>({ username: \"\", password: \"\" });\r\n  const [remember, setRemember] = useState<boolean>(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\r\n  const [userID, setID] = useState<number>(1);\r\n  const [formTitle, setFormTitle] = useState<string>(\"Create Account\");\r\n\r\n  useEffect(() => {\r\n    const indexedDB = window.indexedDB;\r\n    const request = indexedDB.open(\"UserDatabase\", 1);\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"Error accessing user database!\", event);\r\n    };\r\n\r\n    request.onupgradeneeded = () => {\r\n      const db = request.result;\r\n      const store = db.createObjectStore(\"users\", {autoIncrement: true});\r\n      store.createIndex(\"username_and_password\", [\"username\", \"password\"], { unique: false });\r\n      console.log(\"Object store 'users' created with autoIncrement.\");\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      const db = request.result;\r\n      const transaction = db.transaction(\"users\", \"readonly\");\r\n      const store = transaction.objectStore(\"users\");\r\n\r\n      const currentUserId = userID; // Store current user ID in a local variable\r\n      console.log(`Checking for user with ID: ${currentUserId}`);\r\n      const userQuery = store.get(currentUserId);\r\n\r\n      userQuery.onsuccess = () => {\r\n        console.log(`User query result for ID ${currentUserId}:`, userQuery.result);\r\n        if (userQuery.result) {\r\n          setFormTitle(\"Log In\");\r\n        } else {\r\n          setFormTitle(\"Create Account\");\r\n        }\r\n      };\r\n      transaction.oncomplete = () => {\r\n        console.log(\"Transaction completed.\");\r\n        db.close();\r\n      };\r\n    };\r\n  }, [userID]); // Only change the ID after form submission or necessary action\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    console.log(\"Form submitted with user info:\", userInfo);\r\n    \r\n    const indexedDB = window.indexedDB;\r\n    const request = indexedDB.open(\"UserDatabase\", 1);\r\n  \r\n    request.onsuccess = () => {\r\n      const db = request.result;\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n      \r\n      // Check if user already exists (optional logic)\r\n      const userQuery = store.index(\"username_and_password\").get([userInfo.username, userInfo.password]);\r\n      userQuery.onsuccess = () => {\r\n        if (userQuery.result) {\r\n          console.log(\"User already exists.\");\r\n          setIsLoggedIn(true); // Log in the user if they already exist\r\n        } else {\r\n          // User doesn't exist, add them to the database\r\n          const userToAdd = {\r\n            username: userInfo.username,\r\n            password: userInfo.password\r\n          };\r\n  \r\n          const addRequest = store.add(userToAdd);\r\n          addRequest.onsuccess = () => {\r\n            console.log(\"User added successfully!\");\r\n            setIsLoggedIn(true); // Set logged in state\r\n          };\r\n          \r\n          addRequest.onerror = (event) => {\r\n            console.error(\"Error adding user:\", event);\r\n          };\r\n        }\r\n      };\r\n  \r\n      transaction.oncomplete = () => {\r\n        db.close();\r\n      };\r\n    };\r\n  \r\n    request.onerror = (event) => {\r\n      console.error(\"Error opening user database:\", event);\r\n    };\r\n  };\r\n  \r\n\r\n  const toggleForm = () => {\r\n    console.log(\"Toggling form state. Current state:\", isFormOpen);\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    console.log(`Updating user info: ${name} = ${value}`);\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleRemember = () => {\r\n    console.log(\"Toggle remember me state. Current state:\", remember);\r\n    setRemember(!remember);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <div style={{ position: \"absolute\", float: \"left\" }}>\r\n          <h3>Signed in as: {userInfo.username}!</h3>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {/* Show the user image only when not logged in */}\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={toggleForm}\r\n          />\r\n        </div>\r\n      )}\r\n      <a href=\"https://bleaky11.github.io/starter_helpi/\" style={{ color: 'black' }}>\r\n        <h1>The Career Quiz</h1>\r\n      </a>\r\n\r\n      {/* Conditionally render the LoginForm */}\r\n      {isFormOpen && !isLoggedIn && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          closeForm={() => setIsFormOpen(false)}\r\n          formTitle={formTitle}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}