{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\basicCareer.tsx\",\n  _s = $RefreshSig$();\nimport { backgroundStyle } from \"./CSS/Background\";\nimport { useState } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BasicCareerComponent() {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [questions, setQuestions] = useState([{\n    text: \"Mock Question #1\",\n    type: \"radio\",\n    choices: [{\n      id: 1,\n      label: \"choice-1\"\n    }, {\n      id: 2,\n      label: \"choice-2\"\n    }, {\n      id: 3,\n      label: \"choice-3\"\n    }],\n    selected: \"\" // For radio\n  }, {\n    text: \"Mock Question #2\",\n    type: \"checkbox\",\n    choices: [{\n      id: 1,\n      label: \"choice-1\"\n    }, {\n      id: 2,\n      label: \"choice-2\"\n    }, {\n      id: 3,\n      label: \"choice-3\"\n    }],\n    selected: [false, false, false] // For checkbox\n  }, {\n    text: \"Mock Question #3\",\n    type: \"radio\",\n    choices: [{\n      id: 1,\n      label: \"choice-1\"\n    }, {\n      id: 2,\n      label: \"choice-2\"\n    }, {\n      id: 3,\n      label: \"choice-3\"\n    }],\n    selected: \"\" // For radio\n  }]);\n  function updateAnswer(event, questionIndex) {\n    const updatedQuestions = [...questions];\n    const question = updatedQuestions[questionIndex];\n    if (question.type === \"radio\") {\n      // Handle radio button selection\n      question.selected = event.target.value; // Store the selected value as a string\n      updatedQuestions[questionIndex] = question;\n    } else if (question.type === \"checkbox\") {\n      // Handle checkbox selection\n      const choiceIndex = question.choices.findIndex(choice => choice.label === event.target.value);\n      const selectedArray = question.selected; // Cast to boolean array\n      selectedArray[choiceIndex] = event.target.checked; // Toggle the selection\n      question.selected = selectedArray; // Update the selected state\n      updatedQuestions[questionIndex] = question;\n    }\n    setQuestions(updatedQuestions);\n    updateProgress();\n  }\n  function updateProgress() {\n    let totalAnswered = 0;\n    questions.forEach(question => {\n      if (question.type === \"radio\") {\n        // Count answered radio questions\n        if (question.selected !== \"\") totalAnswered++;\n      } else if (question.type === \"checkbox\") {\n        // Count answered checkbox questions\n        if (question.selected.some(isSelected => isSelected)) totalAnswered++;\n      }\n    });\n    setProgress(totalAnswered / questions.length * 100); // Update progress\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: backgroundStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          marginBottom: \"10px\",\n          marginRight: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"question\",\n          style: {\n            marginRight: \"10px\"\n          },\n          children: [\"Percent Complete: \", progress.toFixed(0), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"question\",\n          value: progress,\n          max: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Here is the Basic Career Page!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          style: {\n            border: \"2px solid red\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This assessment is designed to determine an appropriate career path going forward. You will be asked a series of multiple-choice questions. If you're looking for more in-depth questions, go to the Detailed Career Page. Before you begin, make sure you're in a comfortable environment and answer each question to the best of your ability.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: question.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            children: question.choices.map(choice => /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: question.type,\n              label: choice.label,\n              name: `question-${questionIndex}` // Unique name for grouping radio buttons\n              ,\n              value: choice.label,\n              checked: question.type === \"checkbox\" ? question.selected[choice.id - 1] : question.selected === choice.label // Conditional checking\n              ,\n              onChange: event => updateAnswer(event, questionIndex)\n            }, choice.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this)]\n        }, questionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n_s(BasicCareerComponent, \"wIUAhK+sHS+9yoB8XFwhN9aK+3U=\");\n_c = BasicCareerComponent;\nvar _c;\n$RefreshReg$(_c, \"BasicCareerComponent\");","map":{"version":3,"names":["backgroundStyle","useState","Container","Form","jsxDEV","_jsxDEV","BasicCareerComponent","_s","progress","setProgress","questions","setQuestions","text","type","choices","id","label","selected","updateAnswer","event","questionIndex","updatedQuestions","question","target","value","choiceIndex","findIndex","choice","selectedArray","checked","updateProgress","totalAnswered","forEach","some","isSelected","length","style","children","display","alignItems","justifyContent","marginBottom","marginRight","htmlFor","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","max","textAlign","border","marginLeft","map","Check","name","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/basicCareer.tsx"],"sourcesContent":["import { backgroundStyle } from \"./CSS/Background\";\r\nimport { useState } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\ninterface Choice {\r\n    id: number;\r\n    label: string;\r\n}\r\n\r\ninterface Question {\r\n    text: string;\r\n    type: \"radio\" | \"checkbox\"; // Specify the type\r\n    choices: Choice[];\r\n    selected: string | boolean[]; // Either a string for radio or a boolean array for checkboxes\r\n}\r\n\r\nexport function BasicCareerComponent(): JSX.Element {\r\n    const [progress, setProgress] = useState<number>(0);\r\n    const [questions, setQuestions] = useState<Question[]>([\r\n        {\r\n            text: \"Mock Question #1\",\r\n            type: \"radio\",\r\n            choices: [\r\n                { id: 1, label: \"choice-1\" },\r\n                { id: 2, label: \"choice-2\" },\r\n                { id: 3, label: \"choice-3\" },\r\n            ],\r\n            selected: \"\", // For radio\r\n        },\r\n        {\r\n            text: \"Mock Question #2\",\r\n            type: \"checkbox\",\r\n            choices: [\r\n                { id: 1, label: \"choice-1\" },\r\n                { id: 2, label: \"choice-2\" },\r\n                { id: 3, label: \"choice-3\" },\r\n            ],\r\n            selected: [false, false, false], // For checkbox\r\n        },\r\n        {\r\n            text: \"Mock Question #3\",\r\n            type: \"radio\",\r\n            choices: [\r\n                { id: 1, label: \"choice-1\" },\r\n                { id: 2, label: \"choice-2\" },\r\n                { id: 3, label: \"choice-3\" },\r\n            ],\r\n            selected: \"\", // For radio\r\n        },\r\n    ]);\r\n\r\n    function updateAnswer(event: React.ChangeEvent<HTMLInputElement>, questionIndex: number) {\r\n        const updatedQuestions = [...questions];\r\n        const question = updatedQuestions[questionIndex];\r\n\r\n        if (question.type === \"radio\") {\r\n            // Handle radio button selection\r\n            question.selected = event.target.value; // Store the selected value as a string\r\n            updatedQuestions[questionIndex] = question;\r\n        } else if (question.type === \"checkbox\") {\r\n            // Handle checkbox selection\r\n            const choiceIndex = question.choices.findIndex(choice => choice.label === event.target.value);\r\n            const selectedArray = question.selected as boolean[]; // Cast to boolean array\r\n            selectedArray[choiceIndex] = event.target.checked; // Toggle the selection\r\n            question.selected = selectedArray; // Update the selected state\r\n            updatedQuestions[questionIndex] = question;\r\n        }\r\n\r\n        setQuestions(updatedQuestions);\r\n        updateProgress();\r\n    }\r\n\r\n    function updateProgress(): void {\r\n        let totalAnswered = 0;\r\n\r\n        questions.forEach(question => {\r\n            if (question.type === \"radio\") {\r\n                // Count answered radio questions\r\n                if (question.selected !== \"\") totalAnswered++;\r\n            } else if (question.type === \"checkbox\") {\r\n                // Count answered checkbox questions\r\n                if ((question.selected as boolean[]).some(isSelected => isSelected)) totalAnswered++;\r\n            }\r\n        });\r\n\r\n        setProgress((totalAnswered / questions.length) * 100); // Update progress\r\n    }\r\n\r\n    return (\r\n        <div style={backgroundStyle}>\r\n            <div>\r\n                <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\", marginBottom: \"10px\", marginRight: \"30px\" }}>\r\n                    <label htmlFor=\"question\" style={{ marginRight: \"10px\" }}>\r\n                        Percent Complete: {progress.toFixed(0)}%\r\n                    </label>\r\n                    <progress id=\"question\" value={progress} max=\"100\" />\r\n                </div>\r\n                <h1 style={{ textAlign: \"center\" }}>Here is the Basic Career Page!</h1>\r\n                <br />\r\n                <div>\r\n                    <Container style={{ border: \"2px solid red\" }}>\r\n                        <p>\r\n                            This assessment is designed to determine an appropriate career path going forward.\r\n                            You will be asked a series of multiple-choice questions. If you're looking for more\r\n                            in-depth questions, go to the Detailed Career Page. Before you begin, make sure you're\r\n                            in a comfortable environment and answer each question to the best of your ability.\r\n                        </p>\r\n                    </Container>\r\n                </div>\r\n                <div style={{ marginLeft: \"30px\" }}>\r\n                    <br />\r\n                    {questions.map((question, questionIndex) => (\r\n                        <div key={questionIndex}>\r\n                            <h4>{question.text}</h4>\r\n                            <Form>\r\n                                {question.choices.map((choice) => (\r\n                                    <Form.Check\r\n                                        key={choice.id}\r\n                                        type={question.type}\r\n                                        label={choice.label}\r\n                                        name={`question-${questionIndex}`} // Unique name for grouping radio buttons\r\n                                        value={choice.label}\r\n                                        checked={question.type === \"checkbox\" ? (question.selected as boolean[])[choice.id - 1] : question.selected === choice.label} // Conditional checking\r\n                                        onChange={(event) => updateAnswer(event, questionIndex)}\r\n                                    />\r\n                                ))}\r\n                            </Form>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}