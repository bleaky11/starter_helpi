{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\nimport { LoginForm } from './LoginForm';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"Guest\",\n    password: \"\"\n  });\n  const [remember, setRemember] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null); // Store db instance\n\n  const checkInfo = (savedUsername, savedPassword, userInput, passInput) => {\n    let userAccess = false;\n    if (userInput === savedUsername && passInput === savedPassword) {\n      userAccess = true;\n    } else if (userInput !== savedUsername) {\n      alert(\"Wrong username entered!\");\n    } else if (passInput !== savedPassword) {\n      alert(\"Wrong password entered!\");\n    }\n    return userAccess;\n  };\n  useEffect(() => {\n    const indexedDB = window.indexedDB;\n    const request = indexedDB.open(\"UserDatabase\", 2); // Increment version for schema changes\n\n    request.onerror = event => {\n      console.error(\"Error accessing user database!\", event);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      db.createObjectStore(\"users\", {\n        keyPath: \"username\"\n      });\n      console.log(\"Object store created.\");\n    };\n    request.onsuccess = () => {\n      const dbInstance = request.result;\n      setDb(dbInstance);\n      console.log(\"Database opened successfully.\");\n\n      // Check if there's saved user data for \"Remember Me\"\n      const rememberMe = localStorage.getItem(\"rememberMe\") === \"true\";\n      setRemember(rememberMe);\n      if (rememberMe) {\n        // Attempt to load saved user data\n        const savedUsername = localStorage.getItem(\"savedUsername\");\n        if (savedUsername) {\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\n          const store = transaction.objectStore(\"users\");\n          const userQuery = store.get(savedUsername);\n          userQuery.onsuccess = () => {\n            if (userQuery.result) {\n              // Load saved user data\n              setUserInfo({\n                username: userQuery.result.username,\n                password: userQuery.result.password\n              });\n              setIsLoggedIn(true);\n              console.log(\"Loaded saved user data:\", userQuery.result);\n            } else {\n              console.log(\"No saved user data found for username:\", savedUsername);\n            }\n          };\n          userQuery.onerror = event => {\n            console.error(\"Error querying user data:\", event);\n          };\n        }\n      }\n    };\n  }, []); // Run on component mount\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const userQuery = store.get(userInfo.username);\n      userQuery.onsuccess = () => {\n        var _userQuery$result, _userQuery$result2;\n        const savedUsername = (_userQuery$result = userQuery.result) === null || _userQuery$result === void 0 ? void 0 : _userQuery$result.username;\n        const savedPassword = (_userQuery$result2 = userQuery.result) === null || _userQuery$result2 === void 0 ? void 0 : _userQuery$result2.password;\n        if (userQuery.result) {\n          // User exists, check credentials\n          if (checkInfo(savedUsername, savedPassword, userInfo.username, userInfo.password)) {\n            if (remember) {\n              // Update existing user's password if Remember Me is checked\n              console.log('User exists and Remember Me is checked, updating password:', userInfo.username);\n              const updatedUser = {\n                username: userInfo.username,\n                password: userInfo.password\n              };\n              store.put(updatedUser);\n            }\n            setIsLoggedIn(true);\n            console.log('User logged in successfully:', userInfo.username);\n          }\n        } else {\n          // User does not exist, create new user only if form title indicates \"Create Account\"\n          if (formTitle === \"Create Account\") {\n            const newUser = {\n              username: userInfo.username,\n              password: userInfo.password\n            };\n            console.log('User does not exist, adding new user:', newUser);\n            const addUserRequest = store.put(newUser);\n            addUserRequest.onsuccess = () => {\n              console.log(\"User added successfully!\");\n              setFormTitle(\"Create Account\");\n              setIsLoggedIn(true);\n            };\n            addUserRequest.onerror = event => {\n              console.error(\"Error adding user:\", event);\n            };\n          } else {\n            alert(\"User does not exist. Please create an account first.\");\n          }\n        }\n      };\n      userQuery.onerror = event => {\n        console.error(\"Error querying user data\");\n      };\n      transaction.onerror = event => {\n        console.error(\"Transaction failed:\", event);\n      };\n\n      // Save the username for future logins if \"Remember Me\" is checked\n      if (remember) {\n        localStorage.setItem(\"savedUsername\", userInfo.username);\n      } else {\n        localStorage.removeItem(\"savedUsername\");\n      }\n    } else {\n      console.error(\"Database not initialized\");\n    }\n  };\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: value\n    }));\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(!isLoggedIn);\n  };\n  const handleRemember = () => {\n    const newRememberState = !remember;\n    setRemember(newRememberState);\n    localStorage.setItem(\"rememberMe\", newRememberState ? \"true\" : \"false\"); // Save remember me state\n    console.log(\"Remember Me state changed to:\", newRememberState);\n  };\n\n  // Show form with specific title\n  const showForm = title => {\n    setFormTitle(title);\n    toggleForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ?\n    /*#__PURE__*/\n    // If the user is logged in, show the jerboa image and a log out button\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: jerboa,\n        alt: \"Four-Toed Jerboa\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: userInfo.username // Tooltip with the username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleLogout // Define this function to handle logout\n        ,\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkred\"\n        },\n        children: \"Log out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 3\n    }, this) :\n    /*#__PURE__*/\n    // If the user is not logged in, show the guest profile image and the log in button\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: \"Guest\" // Tooltip for guest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => showForm(\"Log in\"),\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkblue\"\n        },\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 3\n    }, this), !isLoggedIn &&\n    /*#__PURE__*/\n    // Log in button only visible if not logged in\n    _jsxDEV(Button, {\n      onClick: () => showForm(\"Log in\"),\n      style: {\n        float: \"left\",\n        marginTop: \"10px\",\n        borderRadius: \"20px\",\n        backgroundColor: \"darkblue\"\n      },\n      children: \"Log in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      closeForm: toggleForm // Use toggleForm to close the form\n      ,\n      formTitle: formTitle // Pass the form title to LoginForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://bleaky11.github.io/starter_helpi/\",\n      style: {\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"o8SdJCV8am0mUwdRhmXvQL+mSeA=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","jerboa","LoginForm","Button","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","checkInfo","savedUsername","savedPassword","userInput","passInput","userAccess","alert","indexedDB","window","request","open","onerror","event","console","error","onupgradeneeded","target","result","createObjectStore","keyPath","log","onsuccess","dbInstance","rememberMe","localStorage","getItem","transaction","store","objectStore","userQuery","get","handleSubmit","preventDefault","_userQuery$result","_userQuery$result2","updatedUser","put","newUser","addUserRequest","setItem","removeItem","toggleForm","updateStatus","name","value","prevInfo","handleLogout","handleRemember","newRememberState","showForm","title","children","src","alt","style","float","width","height","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","borderRadius","backgroundColor","closeForm","href","color","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);\r\n  const [userInfo, setUserInfo] = useState<{ username: string; password: string }>({ username: \"Guest\", password: \"\" });\r\n  const [remember, setRemember] = useState<boolean>(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\r\n  const [formTitle, setFormTitle] = useState<string>(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null); // Store db instance\r\n\r\n  const checkInfo = (savedUsername: string, savedPassword: string, userInput: string, passInput: string) => {\r\n    let userAccess: boolean = false;\r\n    if ((userInput === savedUsername) && (passInput === savedPassword)) {\r\n      userAccess = true;\r\n    } else if (userInput !== savedUsername) {\r\n      alert(\"Wrong username entered!\");\r\n    } else if (passInput !== savedPassword) {\r\n      alert(\"Wrong password entered!\");\r\n    }\r\n    return userAccess;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const indexedDB = window.indexedDB;\r\n    const request = indexedDB.open(\"UserDatabase\", 2); // Increment version for schema changes\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"Error accessing user database!\", event);\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      db.createObjectStore(\"users\", { keyPath: \"username\" });\r\n      console.log(\"Object store created.\");\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      const dbInstance = request.result;\r\n      setDb(dbInstance);\r\n      console.log(\"Database opened successfully.\");\r\n\r\n      // Check if there's saved user data for \"Remember Me\"\r\n      const rememberMe = localStorage.getItem(\"rememberMe\") === \"true\";\r\n      setRemember(rememberMe);\r\n\r\n      if (rememberMe) {\r\n        // Attempt to load saved user data\r\n        const savedUsername = localStorage.getItem(\"savedUsername\");\r\n        if (savedUsername) {\r\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n          const store = transaction.objectStore(\"users\");\r\n          const userQuery = store.get(savedUsername);\r\n\r\n          userQuery.onsuccess = () => {\r\n            if (userQuery.result) {\r\n              // Load saved user data\r\n              setUserInfo({ username: userQuery.result.username, password: userQuery.result.password });\r\n              setIsLoggedIn(true);\r\n              console.log(\"Loaded saved user data:\", userQuery.result);\r\n            } else {\r\n              console.log(\"No saved user data found for username:\", savedUsername);\r\n            }\r\n          };\r\n\r\n          userQuery.onerror = (event) => {\r\n            console.error(\"Error querying user data:\", event);\r\n          };\r\n        }\r\n      }\r\n    };\r\n  }, []); // Run on component mount\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n\r\n      const userQuery = store.get(userInfo.username);\r\n\r\n      userQuery.onsuccess = () => {\r\n        const savedUsername = userQuery.result?.username;\r\n        const savedPassword = userQuery.result?.password;\r\n\r\n        if (userQuery.result) {\r\n          // User exists, check credentials\r\n          if (checkInfo(savedUsername, savedPassword, userInfo.username, userInfo.password)) {\r\n            if (remember) {\r\n              // Update existing user's password if Remember Me is checked\r\n              console.log('User exists and Remember Me is checked, updating password:', userInfo.username);\r\n              const updatedUser = { username: userInfo.username, password: userInfo.password };\r\n              store.put(updatedUser);\r\n            }\r\n            setIsLoggedIn(true);\r\n            console.log('User logged in successfully:', userInfo.username);\r\n          }\r\n        } else {\r\n          // User does not exist, create new user only if form title indicates \"Create Account\"\r\n          if (formTitle === \"Create Account\") {\r\n            const newUser = { username: userInfo.username, password: userInfo.password };\r\n            console.log('User does not exist, adding new user:', newUser);\r\n\r\n            const addUserRequest = store.put(newUser);\r\n\r\n            addUserRequest.onsuccess = () => {\r\n              console.log(\"User added successfully!\");\r\n              setFormTitle(\"Create Account\");\r\n              setIsLoggedIn(true);\r\n            };\r\n\r\n            addUserRequest.onerror = (event) => {\r\n              console.error(\"Error adding user:\", event);\r\n            };\r\n          } else {\r\n            alert(\"User does not exist. Please create an account first.\");\r\n          }\r\n        }\r\n      };\r\n\r\n      userQuery.onerror = (event) => {\r\n        console.error(\"Error querying user data\");\r\n      };\r\n\r\n      transaction.onerror = (event) => {\r\n        console.error(\"Transaction failed:\", event);\r\n      };\r\n\r\n      // Save the username for future logins if \"Remember Me\" is checked\r\n      if (remember) {\r\n        localStorage.setItem(\"savedUsername\", userInfo.username);\r\n      } else {\r\n        localStorage.removeItem(\"savedUsername\");\r\n      }\r\n    } else {\r\n      console.error(\"Database not initialized\");\r\n    }\r\n  };\r\n\r\n  const toggleForm = () => {\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleLogout = () =>\r\n  {\r\n    setIsLoggedIn(!isLoggedIn);\r\n  }\r\n\r\n  const handleRemember = () => {\r\n    const newRememberState = !remember;\r\n    setRemember(newRememberState);\r\n    localStorage.setItem(\"rememberMe\", newRememberState ? \"true\" : \"false\"); // Save remember me state\r\n    console.log(\"Remember Me state changed to:\", newRememberState);\r\n  };\r\n\r\n  // Show form with specific title\r\n  const showForm = (title: string) => {\r\n    setFormTitle(title);\r\n    toggleForm();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n     {isLoggedIn ? (\r\n  // If the user is logged in, show the jerboa image and a log out button\r\n  <div>\r\n    <img\r\n      src={jerboa}\r\n      alt=\"Four-Toed Jerboa\"\r\n      style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n      onClick={() => showForm(\"Create Account\")}\r\n      title={userInfo.username} // Tooltip with the username\r\n    />\r\n    <Button\r\n      onClick={handleLogout} // Define this function to handle logout\r\n      style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkred\" }}\r\n    >\r\n      Log out\r\n    </Button>\r\n  </div>\r\n) : (\r\n  // If the user is not logged in, show the guest profile image and the log in button\r\n  <div>\r\n    <img\r\n      src={userProfile}\r\n      alt=\"User Profile\"\r\n      style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n      onClick={() => showForm(\"Create Account\")}\r\n      title=\"Guest\" // Tooltip for guest\r\n    />\r\n    <Button\r\n      onClick={() => showForm(\"Log in\")}\r\n      style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkblue\" }}\r\n    >\r\n      Log in\r\n    </Button>\r\n  </div>\r\n)}  \r\n      {!isLoggedIn && ( // Log in button only visible if not logged in\r\n        <Button\r\n          onClick={() => showForm(\"Log in\")}\r\n          style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkblue\" }}\r\n        >\r\n          Log in\r\n        </Button>\r\n      )}\r\n  \r\n      {isFormOpen && !isLoggedIn && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          closeForm={toggleForm} // Use toggleForm to close the form\r\n          formTitle={formTitle} // Pass the form title to LoginForm\r\n        />\r\n      )}\r\n  \r\n      <a href=\"https://bleaky11.github.io/starter_helpi/\" style={{ color: 'black' }}>\r\n        <h1>The Career Quiz</h1>\r\n      </a>\r\n    </div>\r\n  );\r\n  \r\n  \r\n};\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}