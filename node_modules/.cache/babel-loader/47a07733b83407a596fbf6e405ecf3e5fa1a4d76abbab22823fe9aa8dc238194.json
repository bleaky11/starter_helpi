{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\basicCareer.tsx\",\n  _s = $RefreshSig$();\nimport { backgroundStyle } from \"./CSS/Background\";\nimport { useState } from \"react\";\nimport { Container, Form, Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BasicCareerComponent() {\n  _s();\n  const questions = [{\n    question: \"Mock Question 1\",\n    answers: [\"Answer A1\", \"Answer A2\"]\n  }, {\n    question: \"Mock Question 2\",\n    answers: [\"Answer B1\", \"Answer B2\"]\n  }, {\n    question: \"Mock Question 3\",\n    answers: [\"Answer C1\", \"Answer C2\"]\n  }];\n  const [progress, setProgress] = useState(0);\n  const [answers, setAnswers] = useState(Array(questions.length).fill(\"\")); // Store answers for each question\n  const [isAnswered, setIsAnswered] = useState(Array(questions.length).fill(false));\n  const [feedback, setFeedback] = useState(\"\");\n  function updateAnswer(event, index) {\n    const selectedAnswer = event.target.value;\n\n    // Update the answer state only if it hasn't been answered before\n    if (!isAnswered[index]) {\n      // Update the answers array with the selected answer\n      setAnswers(prevAnswers => {\n        const newAnswers = [...prevAnswers];\n        newAnswers[index] = selectedAnswer; // Save the answer\n        return newAnswers;\n      });\n\n      // Update progress only if this is the first time answering this question\n      setProgress(prevProgress => Math.min(prevProgress + 100 / questions.length, 100));\n      setIsAnswered(prev => {\n        const newCopy = [...prev];\n        newCopy[index] = true; // Mark the question as answered\n        return newCopy;\n      });\n      setFeedback(`You answered Question ${index + 1}!`);\n    }\n  }\n  const handleSubmit = () => {\n    alert(\"Thanks for completing the quiz!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: backgroundStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          marginBottom: \"10px\",\n          marginRight: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"question\",\n          style: {\n            marginRight: \"10px\"\n          },\n          children: [\"Percent Complete: \", progress.toFixed(0), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"question\",\n          value: progress,\n          max: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Here is the Basic Career Page!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          style: {\n            border: \"2px solid red\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This assessment is designed to determine an appropriate career path going forward. You will be asked a series of multiple-choice questions. If you're looking for more in-depth questions, go to the Detailed Career Page. Before you begin, make sure you're in a comfortable environment and answer each question to the best of your ability.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: q.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            children: q.answers.map((answer, answerIndex) => /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"radio\",\n              label: answer // Use dynamic answer options\n              ,\n              name: `quizAnswer${index}` // Unique name for each question\n              ,\n              value: answer // Unique value for each answer\n              ,\n              onChange: event => updateAnswer(event, index) // Pass question index\n            }, answerIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), feedback && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        style: {\n          margin: \"10px\"\n        },\n        disabled: progress < 100,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(BasicCareerComponent, \"5JbBy0u8MOvUbHlsggevwnmF5CM=\");\n_c = BasicCareerComponent;\nvar _c;\n$RefreshReg$(_c, \"BasicCareerComponent\");","map":{"version":3,"names":["backgroundStyle","useState","Container","Form","Button","jsxDEV","_jsxDEV","BasicCareerComponent","_s","questions","question","answers","progress","setProgress","setAnswers","Array","length","fill","isAnswered","setIsAnswered","feedback","setFeedback","updateAnswer","event","index","selectedAnswer","target","value","prevAnswers","newAnswers","prevProgress","Math","min","prev","newCopy","handleSubmit","alert","style","children","display","alignItems","justifyContent","marginBottom","marginRight","htmlFor","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","id","max","textAlign","border","marginLeft","map","q","answer","answerIndex","Check","type","label","name","onChange","onClick","margin","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/basicCareer.tsx"],"sourcesContent":["import { backgroundStyle } from \"./CSS/Background\";\r\nimport { useState } from \"react\";\r\nimport { Container, Form, Button } from \"react-bootstrap\";\r\n\r\nexport function BasicCareerComponent(): JSX.Element {\r\n  const questions = [\r\n    { question: \"Mock Question 1\", answers: [\"Answer A1\", \"Answer A2\"] },\r\n    { question: \"Mock Question 2\", answers: [\"Answer B1\", \"Answer B2\"] },\r\n    { question: \"Mock Question 3\", answers: [\"Answer C1\", \"Answer C2\"] },\r\n  ];\r\n\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const [answers, setAnswers] = useState<string[]>(Array(questions.length).fill(\"\")); // Store answers for each question\r\n  const [isAnswered, setIsAnswered] = useState<boolean[]>(Array(questions.length).fill(false));\r\n  const [feedback, setFeedback] = useState<string>(\"\");\r\n\r\n  function updateAnswer(event: React.ChangeEvent<HTMLInputElement>, index: number) {\r\n    const selectedAnswer = event.target.value;\r\n\r\n    // Update the answer state only if it hasn't been answered before\r\n    if (!isAnswered[index]) {\r\n      // Update the answers array with the selected answer\r\n      setAnswers((prevAnswers) => {\r\n        const newAnswers = [...prevAnswers];\r\n        newAnswers[index] = selectedAnswer; // Save the answer\r\n        return newAnswers;\r\n      });\r\n\r\n      // Update progress only if this is the first time answering this question\r\n      setProgress((prevProgress) => Math.min(prevProgress + (100 / questions.length), 100));\r\n      setIsAnswered((prev) => {\r\n        const newCopy = [...prev];\r\n        newCopy[index] = true; // Mark the question as answered\r\n        return newCopy;\r\n      });\r\n      setFeedback(`You answered Question ${index + 1}!`);\r\n    }\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    alert(\"Thanks for completing the quiz!\");\r\n  };\r\n\r\n  return (\r\n    <div style={backgroundStyle}>\r\n      <div>\r\n        <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\", marginBottom: \"10px\", marginRight: \"30px\" }}>\r\n          <label htmlFor=\"question\" style={{ marginRight: \"10px\" }}>\r\n            Percent Complete: {progress.toFixed(0)}%\r\n          </label>\r\n          <progress id=\"question\" value={progress} max=\"100\" />\r\n        </div>\r\n        <h1 style={{ textAlign: \"center\" }}>Here is the Basic Career Page!</h1>\r\n        <br />\r\n        <div>\r\n          <Container style={{ border: \"2px solid red\" }}>\r\n            <p>\r\n              This assessment is designed to determine an appropriate career path going forward. You will be asked a series of multiple-choice questions. If you're looking for more in-depth questions, go to the Detailed Career Page. Before you begin, make sure you're in a comfortable environment and answer each question to the best of your ability.\r\n            </p>\r\n          </Container>\r\n        </div>\r\n        <div style={{ marginLeft: \"30px\" }}>\r\n          <br />\r\n          {questions.map((q, index) => (\r\n            <div key={index}>\r\n              <p>{q.question}</p>\r\n              <Form>\r\n                {q.answers.map((answer, answerIndex) => (\r\n                  <Form.Check\r\n                    key={answerIndex}\r\n                    type=\"radio\"\r\n                    label={answer} // Use dynamic answer options\r\n                    name={`quizAnswer${index}`} // Unique name for each question\r\n                    value={answer} // Unique value for each answer\r\n                    onChange={(event) => updateAnswer(event, index)} // Pass question index\r\n                  />\r\n                ))}\r\n              </Form>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {feedback && <p>{feedback}</p>}\r\n        <Button onClick={handleSubmit} style={{ margin: \"10px\" }} disabled={progress < 100}>\r\n          Submit Quiz\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}