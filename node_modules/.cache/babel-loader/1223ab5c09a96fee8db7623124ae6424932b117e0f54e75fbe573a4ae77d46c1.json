{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\nimport { LoginForm } from './LoginForm';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\",\n    remembered: true\n  });\n  const [remember, setRemember] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [selectedUser, setSelect] = useState(\"\");\n  const CryptoJS = require(\"crypto-js\");\n  const secretKey = crypto.randomBytes(32).toString('hex');\n  const encryptPassword = password => {\n    return CryptoJS.AES.encrypt(password, secretKey).toString();\n  };\n  const decryptPassword = encryptedPassword => {\n    const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  };\n  const checkInfo = (savedUsername, savedEncryptedPassword, userInput, passInput) => {\n    if (userInput === savedUsername) {\n      const decryptedPassword = decryptPassword(savedEncryptedPassword);\n      if (decryptedPassword === passInput) {\n        return true;\n      } else {\n        alert(\"Wrong password entered!\");\n        return false;\n      }\n    } else {\n      alert(\"Wrong username entered!\");\n      return false;\n    }\n  };\n  useEffect(() => {\n    const initializeDatabase = async () => {\n      const indexedDB = window.indexedDB;\n      const request = indexedDB.open(\"UserDatabase\", 2);\n      request.onerror = event => {\n        console.error(\"Error opening user database!\", event);\n      };\n      request.onupgradeneeded = event => {\n        const dbInstance = event.target.result;\n        dbInstance.createObjectStore(\"users\", {\n          keyPath: \"username\"\n        });\n      };\n      request.onsuccess = () => {\n        const dbInstance = request.result;\n        if (dbInstance) {\n          setDb(dbInstance);\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\n          const store = transaction.objectStore(\"users\");\n          const getAllRequest = store.getAll();\n          getAllRequest.onsuccess = () => {\n            const allUsers = getAllRequest.result;\n            const rememberedAccounts = allUsers.filter(user => user.remembered);\n            setAccounts(rememberedAccounts);\n            if (localStorage.getItem(\"homeVisit\") && rememberedAccounts.length > 0) {\n              const firstAccount = rememberedAccounts[0];\n              const getRequest = store.get(firstAccount.username);\n              getRequest.onsuccess = () => {\n                const rememberedUser = getRequest.result;\n                if (rememberedUser) {\n                  setUserInfo({\n                    username: rememberedUser.username,\n                    password: rememberedUser.password,\n                    remembered: true\n                  });\n                  setSelect(rememberedUser.username);\n                } else {\n                  console.error(\"No user found for the remembered account:\", firstAccount.username);\n                }\n              };\n              getRequest.onerror = event => {\n                console.error(\"Error retrieving remembered user:\", event);\n              };\n            } else {\n              if (!localStorage.getItem(\"homeVisit\")) {\n                localStorage.setItem(\"homeVisit\", \"true\");\n              }\n            }\n          };\n          getAllRequest.onerror = event => {\n            console.error(\"Error retrieving users from the users object store:\", event);\n          };\n        } else {\n          console.error(\"Database is not initialized.\");\n        }\n      };\n    };\n    initializeDatabase();\n  }, []);\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!userInfo.username || !userInfo.password) {\n      alert(\"Username and password are required.\");\n      return;\n    }\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const userQuery = store.get(userInfo.username);\n      userQuery.onsuccess = () => {\n        const existingUser = userQuery.result;\n        if (existingUser) {\n          if (formTitle === \"Log in\") {\n            const {\n              username,\n              password,\n              remembered\n            } = existingUser;\n            if (checkInfo(username, password, userInfo.username, userInfo.password)) {\n              setIsLoggedIn(true);\n              if (remember !== remembered) {\n                existingUser.remembered = remember;\n                const updateRequest = store.put(existingUser);\n                updateRequest.onsuccess = () => {\n                  updateSavedUsers();\n                };\n              } else {\n                updateSavedUsers();\n              }\n              if (!remember) {\n                removeFromDropdown(userInfo.username);\n              }\n            }\n          } else {\n            alert(\"Account already exists. Please log in.\");\n            clearForm();\n          }\n        } else if (formTitle === \"Create Account\") {\n          const encryptedPassword = encryptPassword(userInfo.password);\n          const newUser = {\n            ...userInfo,\n            password: encryptedPassword,\n            remembered: remember\n          };\n          store.put(newUser).onsuccess = () => {\n            alert(\"Account created successfully!\");\n            setIsLoggedIn(true);\n            updateSavedUsers();\n          };\n        }\n      };\n      userQuery.onerror = event => {\n        console.error(\"Error retrieving user:\", event);\n      };\n    }\n  };\n  const removeFromDropdown = username => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const getUserRequest = store.get(username);\n      getUserRequest.onsuccess = () => {\n        const user = getUserRequest.result;\n        if (user) {\n          user.remembered = false;\n          const updateRequest = store.put(user);\n          updateRequest.onsuccess = () => {\n            updateSavedUsers(); // Refresh the accounts list after updating\n          };\n          updateRequest.onerror = event => {\n            console.error(\"Error updating account:\", event);\n          };\n        }\n      };\n      transaction.onerror = event => {\n        console.error(\"Error accessing the user store:\", event);\n      };\n    }\n  };\n  const deleteAccount = username => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\n        const deleteRequest = store.delete(username);\n        deleteRequest.onsuccess = () => {\n          console.log(`Account ${username} deleted successfully.`);\n          setUserInfo({\n            username: \"\",\n            password: \"\",\n            remembered: false\n          });\n          clearForm();\n          handleLogout(); // Ensure the user is logged out after deletion\n        };\n        deleteRequest.onerror = event => {\n          console.error(\"Error deleting account:\", event);\n        };\n      }\n      transaction.oncomplete = () => {\n        console.log(\"Delete transaction completed.\");\n      };\n      transaction.onerror = event => {\n        console.error(\"Error in transaction while deleting account:\", event);\n      };\n    }\n  };\n  const updateSavedUsers = () => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readonly\");\n      const store = transaction.objectStore(\"users\");\n      const request = store.getAll();\n      request.onsuccess = () => {\n        const rememberedAccounts = request.result.filter(account => account.remembered);\n        console.log(\"Remembered accounts:\", rememberedAccounts);\n        setAccounts(rememberedAccounts); // Update dropdown with remembered users only\n\n        if (rememberedAccounts.length > 0) {\n          setUserInfo({\n            username: rememberedAccounts[0].username,\n            password: rememberedAccounts[0].password,\n            remembered: rememberedAccounts[0].remembered\n          });\n          setSelect(rememberedAccounts[0].username);\n        }\n      };\n      request.onerror = () => {\n        console.error(\"Error fetching users.\");\n      };\n    }\n  };\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const clearForm = () => {\n    setUserInfo({\n      username: \"\",\n      password: \"\",\n      remembered: false\n    });\n    setRemember(false);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: type === \"checkbox\" ? checked : value\n    }));\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setIsFormOpen(true); // Ensure the form opens after logout\n    updateSavedUsers();\n  };\n  const handleRemember = () => {\n    const newRememberState = !remember;\n    setRemember(newRememberState); // Toggle remember state\n  };\n  const showForm = title => {\n    setFormTitle(title);\n    clearForm();\n    if (title === \"Log in\") {\n      setRemember(true);\n    }\n    toggleForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: jerboa,\n        alt: \"Four-Toed Jerboa\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: userInfo.username || \"Logged-in User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            float: \"left\",\n            marginTop: \"10px\",\n            borderRadius: \"20px\",\n            backgroundColor: \"salmon\"\n          },\n          onClick: handleLogout,\n          children: \"Log out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => deleteAccount(userInfo.username) // Ensure the username is passed correctly here\n          ,\n          style: {\n            float: \"left\",\n            marginTop: \"10px\",\n            borderRadius: \"20px\",\n            backgroundColor: \"darkred\"\n          },\n          children: \"Delete Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: \"Guest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkblue\"\n        },\n        onClick: () => showForm(\"Log in\"),\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      selectedUser: selectedUser,\n      setSelect: setSelect,\n      accounts: accounts,\n      closeForm: toggleForm,\n      formTitle: formTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://bleaky11.github.io/starter_helpi/\",\n      style: {\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"5Ih285QwFtwhgbadJo/cRCSlcf8=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","jerboa","LoginForm","Button","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remembered","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","accounts","setAccounts","selectedUser","setSelect","CryptoJS","require","secretKey","crypto","randomBytes","toString","encryptPassword","AES","encrypt","decryptPassword","encryptedPassword","bytes","decrypt","enc","Utf8","checkInfo","savedUsername","savedEncryptedPassword","userInput","passInput","decryptedPassword","alert","initializeDatabase","indexedDB","window","request","open","onerror","event","console","error","onupgradeneeded","dbInstance","target","result","createObjectStore","keyPath","onsuccess","transaction","store","objectStore","getAllRequest","getAll","allUsers","rememberedAccounts","filter","user","localStorage","getItem","length","firstAccount","getRequest","get","rememberedUser","setItem","handleSubmit","preventDefault","userQuery","existingUser","updateRequest","put","updateSavedUsers","removeFromDropdown","clearForm","newUser","getUserRequest","deleteAccount","confirm","deleteRequest","delete","log","handleLogout","oncomplete","account","toggleForm","updateStatus","name","value","type","checked","prevInfo","handleRemember","newRememberState","showForm","title","children","src","alt","style","float","width","height","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","borderRadius","backgroundColor","closeForm","href","color","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [userInfo, setUserInfo] = useState({ username: \"\", password: \"\", remembered: true});\r\n  const [remember, setRemember] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null);\r\n  const [accounts, setAccounts] = useState<{ username: string; password: string, remembered: boolean }[]>([]);\r\n  const [selectedUser, setSelect] = useState(\"\");\r\n\r\n  const CryptoJS = require(\"crypto-js\");\r\n\r\n  const secretKey = crypto.randomBytes(32).toString('hex');\r\n\r\n  const encryptPassword = (password: string) => {\r\n    return CryptoJS.AES.encrypt(password, secretKey).toString();\r\n  };\r\n\r\n  const decryptPassword = (encryptedPassword: string) => {\r\n    const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey);\r\n    return bytes.toString(CryptoJS.enc.Utf8);\r\n  };\r\n\r\n  const checkInfo = (savedUsername: string, savedEncryptedPassword: string, userInput: string, passInput: string) => {\r\n    if (userInput === savedUsername) {\r\n      const decryptedPassword = decryptPassword(savedEncryptedPassword);\r\n      if (decryptedPassword === passInput) {\r\n        return true;\r\n      } else {\r\n        alert(\"Wrong password entered!\");\r\n        return false;\r\n      }\r\n    } else {\r\n      alert(\"Wrong username entered!\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializeDatabase = async () => {\r\n      const indexedDB = window.indexedDB;\r\n      const request = indexedDB.open(\"UserDatabase\", 2);\r\n\r\n      request.onerror = (event) => {\r\n        console.error(\"Error opening user database!\", event);\r\n      };\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        const dbInstance = (event.target as IDBOpenDBRequest).result;\r\n        dbInstance.createObjectStore(\"users\", { keyPath: \"username\" });\r\n      };\r\n\r\n      request.onsuccess = () => {\r\n        const dbInstance = request.result;\r\n        if (dbInstance) {\r\n          setDb(dbInstance);\r\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n          const store = transaction.objectStore(\"users\");\r\n          const getAllRequest = store.getAll();\r\n\r\n          getAllRequest.onsuccess = () => {\r\n            const allUsers = getAllRequest.result as { username: string; password: string; remembered: boolean }[];\r\n            const rememberedAccounts = allUsers.filter(user => user.remembered);\r\n            setAccounts(rememberedAccounts);\r\n\r\n            if (localStorage.getItem(\"homeVisit\") && rememberedAccounts.length > 0) {\r\n              const firstAccount = rememberedAccounts[0];\r\n              const getRequest = store.get(firstAccount.username);\r\n              getRequest.onsuccess = () => {\r\n                const rememberedUser = getRequest.result;\r\n                if (rememberedUser) {\r\n                  setUserInfo({\r\n                    username: rememberedUser.username,\r\n                    password: rememberedUser.password,\r\n                    remembered: true,\r\n                  });\r\n                  setSelect(rememberedUser.username);\r\n                } else {\r\n                  console.error(\"No user found for the remembered account:\", firstAccount.username);\r\n                }\r\n              };\r\n              getRequest.onerror = (event) => {\r\n                console.error(\"Error retrieving remembered user:\", event);\r\n              };\r\n            } else {\r\n              if (!localStorage.getItem(\"homeVisit\")) {\r\n                localStorage.setItem(\"homeVisit\", \"true\");\r\n              }\r\n            }\r\n          };\r\n\r\n          getAllRequest.onerror = (event) => {\r\n            console.error(\"Error retrieving users from the users object store:\", event);\r\n          };\r\n        } else {\r\n          console.error(\"Database is not initialized.\");\r\n        }\r\n      };\r\n    };\r\n\r\n    initializeDatabase();\r\n  }, []);\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (!userInfo.username || !userInfo.password) {\r\n      alert(\"Username and password are required.\");\r\n      return;\r\n    }\r\n\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n\r\n      const userQuery = store.get(userInfo.username);\r\n\r\n      userQuery.onsuccess = () => {\r\n        const existingUser = userQuery.result;\r\n\r\n        if (existingUser) {\r\n          if (formTitle === \"Log in\") {\r\n            const { username, password, remembered } = existingUser;\r\n\r\n            if (checkInfo(username, password, userInfo.username, userInfo.password)) {\r\n              setIsLoggedIn(true);\r\n\r\n              if (remember !== remembered) {\r\n                existingUser.remembered = remember;\r\n                const updateRequest = store.put(existingUser);\r\n                updateRequest.onsuccess = () => {\r\n                  updateSavedUsers();\r\n                };\r\n              } else {\r\n                updateSavedUsers();\r\n              }\r\n\r\n              if (!remember) {\r\n                removeFromDropdown(userInfo.username);\r\n              }\r\n            }\r\n          } else {\r\n            alert(\"Account already exists. Please log in.\");\r\n            clearForm();\r\n          }\r\n        } else if (formTitle === \"Create Account\") {\r\n          const encryptedPassword = encryptPassword(userInfo.password);\r\n          const newUser = { ...userInfo, password: encryptedPassword, remembered: remember };\r\n          store.put(newUser).onsuccess = () => {\r\n            alert(\"Account created successfully!\");\r\n            setIsLoggedIn(true);\r\n            updateSavedUsers();\r\n          };\r\n        }\r\n      };\r\n\r\n      userQuery.onerror = (event) => {\r\n        console.error(\"Error retrieving user:\", event);\r\n      };\r\n    }\r\n  };\r\n  \r\n  const removeFromDropdown = (username: string) => {\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const getUserRequest = store.get(username);\r\n  \r\n      getUserRequest.onsuccess = () => {\r\n        const user = getUserRequest.result;\r\n        \r\n        if (user) {\r\n          user.remembered = false;\r\n  \r\n          const updateRequest = store.put(user);\r\n  \r\n          updateRequest.onsuccess = () => {\r\n            updateSavedUsers(); // Refresh the accounts list after updating\r\n          };\r\n  \r\n          updateRequest.onerror = (event) => {\r\n            console.error(\"Error updating account:\", event);\r\n          };\r\n        }\r\n      };\r\n  \r\n      transaction.onerror = (event) => {\r\n        console.error(\"Error accessing the user store:\", event);\r\n      };\r\n    }\r\n  };\r\n  \r\n  const deleteAccount = (username: string) => {\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n  \r\n      if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\r\n        const deleteRequest = store.delete(username);\r\n  \r\n        deleteRequest.onsuccess = () => {\r\n          console.log(`Account ${username} deleted successfully.`);\r\n          setUserInfo({username: \"\", password: \"\", remembered: false});\r\n          clearForm(); \r\n          handleLogout(); // Ensure the user is logged out after deletion\r\n        };\r\n  \r\n        deleteRequest.onerror = (event) => {\r\n          console.error(\"Error deleting account:\", event);\r\n        };\r\n      }\r\n  \r\n      transaction.oncomplete = () => {\r\n        console.log(\"Delete transaction completed.\");\r\n      };\r\n  \r\n      transaction.onerror = (event) => {\r\n        console.error(\"Error in transaction while deleting account:\", event);\r\n      };\r\n    }\r\n  };  \r\n    \r\n  const updateSavedUsers = () => {\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readonly\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const request = store.getAll();\r\n  \r\n      request.onsuccess = () => {\r\n        const rememberedAccounts = request.result.filter((account: { remembered: boolean }) => account.remembered);\r\n        console.log(\"Remembered accounts:\", rememberedAccounts);\r\n  \r\n        setAccounts(rememberedAccounts); // Update dropdown with remembered users only\r\n  \r\n        if (rememberedAccounts.length > 0) {\r\n          setUserInfo({\r\n            username: rememberedAccounts[0].username,\r\n            password: rememberedAccounts[0].password,\r\n            remembered: rememberedAccounts[0].remembered,\r\n          });\r\n          setSelect(rememberedAccounts[0].username);\r\n        } \r\n      };\r\n  \r\n      request.onerror = () => {\r\n        console.error(\"Error fetching users.\");\r\n      };\r\n    }\r\n  };  \r\n  \r\n  const toggleForm = () => {\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setUserInfo({ username: \"\", password: \"\", remembered: false });\r\n    setRemember(false);\r\n  };  \r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = event.target;\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    }));\r\n  };   \r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n    setIsFormOpen(true);  // Ensure the form opens after logout\r\n    updateSavedUsers(); \r\n  };   \r\n  \r\n  const handleRemember = () => {\r\n    const newRememberState = !remember;\r\n    setRemember(newRememberState); // Toggle remember state\r\n  };  \r\n  \r\n  const showForm = (title: string) => {\r\n    setFormTitle(title);\r\n    clearForm();\r\n    if (title === \"Log in\") \r\n    {\r\n      setRemember(true); \r\n    }\r\n    toggleForm();\r\n  };  \r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <div>\r\n          <img\r\n            src={jerboa}\r\n            alt=\"Four-Toed Jerboa\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title={userInfo.username || \"Logged-in User\"} \r\n          />\r\n          <div>\r\n            <Button \r\n              style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"salmon\" }}\r\n              onClick={handleLogout}\r\n            >\r\n              Log out\r\n            </Button>\r\n  \r\n            <Button \r\n              onClick={() => deleteAccount(userInfo.username)} // Ensure the username is passed correctly here\r\n              style={{\r\n                float: \"left\", \r\n                marginTop: \"10px\", \r\n                borderRadius: \"20px\", \r\n                backgroundColor: \"darkred\"\r\n              }}\r\n            >\r\n              Delete Account\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title=\"Guest\"\r\n          />\r\n          <Button \r\n            style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkblue\" }}\r\n            onClick={() => showForm(\"Log in\")}\r\n          >\r\n            Log in\r\n          </Button>\r\n        </div>\r\n      )}\r\n  \r\n      {isFormOpen && !isLoggedIn && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          selectedUser={selectedUser}\r\n          setSelect={setSelect}\r\n          accounts={accounts}\r\n          closeForm={toggleForm}\r\n          formTitle={formTitle}\r\n        />\r\n      )}\r\n  \r\n      <a href=\"https://bleaky11.github.io/starter_helpi/\" style={{ color: 'black' }}>\r\n        <h1>The Career Quiz</h1>\r\n      </a>\r\n    </div>\r\n  )};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}