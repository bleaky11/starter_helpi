{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\LoginForm.tsx\",\n  _s = $RefreshSig$();\nimport { Form } from 'react-bootstrap';\nimport { useEffect } from 'react';\nimport './LoginForm.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const LoginForm = ({\n  userInfo,\n  setUserInfo,\n  remember,\n  setRemember,\n  updateStatus,\n  handleRemember,\n  handleSubmit,\n  closeForm,\n  accounts,\n  selectedUser,\n  setSelect,\n  formTitle,\n  setFormTitle,\n  decryptPassword,\n  passwordPlaceholder,\n  isPasswordReset,\n  setIsPasswordReset,\n  newPassword,\n  updatePassword\n}) => {\n  _s();\n  const handleUserSelect = event => {\n    const selectedUsername = event.target.value;\n    setSelect(selectedUsername);\n  };\n  useEffect(() => {\n    if (formTitle === \"Log in\" && selectedUser) {\n      const selectedAccount = accounts.find(account => account.username === selectedUser);\n      if (selectedAccount) {\n        const decryptedPassword = decryptPassword(selectedAccount.password, selectedAccount.iv);\n        if (userInfo.username !== selectedAccount.username || userInfo.password !== decryptedPassword || userInfo.remembered !== selectedAccount.remembered) {\n          var _selectedAccount$reme;\n          setUserInfo({\n            username: selectedAccount.username,\n            password: decryptedPassword,\n            remembered: (_selectedAccount$reme = selectedAccount.remembered) !== null && _selectedAccount$reme !== void 0 ? _selectedAccount$reme : false\n          });\n        }\n      }\n    }\n  }, [formTitle, selectedUser, accounts, decryptPassword, setUserInfo, userInfo]);\n  const handlePasswordReset = () => {\n    setIsPasswordReset(false);\n    setFormTitle(\"Log in\"); // set back to log in after reset\n  };\n  const handleResetClick = () => {\n    setFormTitle(\"Reset Password\");\n    setIsPasswordReset(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [formTitle === \"Log in\" && !isPasswordReset && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"25px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleUserSelect,\n        value: selectedUser,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a user\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account.username,\n          children: account.username\n        }, account.username, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !isPasswordReset ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginRight: '8px'\n            },\n            children: \"Remember me?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            id: \"save-user\",\n            name: \"save-user\",\n            checked: remember,\n            onChange: handleRemember\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            marginTop: '10px'\n          },\n          type: \"button\",\n          className: \"btn cancel\",\n          onClick: closeForm,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"resetPassword\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"New Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: passwordPlaceholder // Display the new password here\n          ,\n          placeholder: \"Enter New Password\",\n          onChange: updatePassword // Handles new password input\n          ,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            marginTop: '10px'\n          },\n          type: \"button\",\n          className: \"btn cancel\",\n          onClick: handlePasswordReset // Reset state to login\n          ,\n          children: \"Back to Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), !isPasswordReset && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: '10px'\n      },\n      type: \"button\",\n      className: \"btn\",\n      onClick: handleResetClick // Trigger password reset\n      ,\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["Form","useEffect","React","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginForm","userInfo","setUserInfo","remember","setRemember","updateStatus","handleRemember","handleSubmit","closeForm","accounts","selectedUser","setSelect","formTitle","setFormTitle","decryptPassword","passwordPlaceholder","isPasswordReset","setIsPasswordReset","newPassword","updatePassword","_s","handleUserSelect","event","selectedUsername","target","value","selectedAccount","find","account","username","decryptedPassword","password","iv","remembered","_selectedAccount$reme","handlePasswordReset","handleResetClick","children","style","marginBottom","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","type","className","display","alignItems","marginRight","Check","id","name","checked","marginTop","onClick","htmlFor","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/LoginForm.tsx"],"sourcesContent":["import { Form } from 'react-bootstrap';\r\nimport { useEffect } from 'react';\r\nimport './LoginForm.css';\r\nimport React from 'react';\r\n\r\nexport interface LoginFormProps {\r\n  closeForm: () => void;\r\n  userInfo: { username: string; password: string, remembered: boolean };\r\n  setUserInfo: (value: React.SetStateAction<{ username: string; password: string, remembered: boolean }>) => void;\r\n  remember: boolean;\r\n  setRemember: React.Dispatch<React.SetStateAction<boolean>>;\r\n  updateStatus: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleRemember: () => void;\r\n  handleSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\r\n  accounts: { username: string; password: string, remembered: boolean, iv: string }[];\r\n  selectedUser: string;\r\n  setSelect: (value: React.SetStateAction<string>) => void;\r\n  formTitle: string;\r\n  setFormTitle: React.Dispatch<React.SetStateAction<string>>;\r\n  decryptPassword: (encryptedPassword: string, iv: string) => string;\r\n  passwordPlaceholder: string;\r\n  isPasswordReset: boolean;\r\n  setIsPasswordReset: React.Dispatch<React.SetStateAction<boolean>>;\r\n  newPassword: string;\r\n  updatePassword: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const LoginForm: React.FC<LoginFormProps> = ({\r\n  userInfo,\r\n  setUserInfo,\r\n  remember,\r\n  setRemember,\r\n  updateStatus,\r\n  handleRemember,\r\n  handleSubmit,\r\n  closeForm,\r\n  accounts,\r\n  selectedUser,\r\n  setSelect,\r\n  formTitle,\r\n  setFormTitle,\r\n  decryptPassword,\r\n  passwordPlaceholder,\r\n  isPasswordReset,\r\n  setIsPasswordReset,\r\n  newPassword,\r\n  updatePassword\r\n}) => {\r\n\r\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const selectedUsername = event.target.value;\r\n    setSelect(selectedUsername);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (formTitle === \"Log in\" && selectedUser) {\r\n      const selectedAccount = accounts.find(account => account.username === selectedUser);\r\n      if (selectedAccount) {\r\n        const decryptedPassword = decryptPassword(selectedAccount.password, selectedAccount.iv);\r\n        if (\r\n          userInfo.username !== selectedAccount.username ||\r\n          userInfo.password !== decryptedPassword ||\r\n          userInfo.remembered !== selectedAccount.remembered\r\n        ) {\r\n          setUserInfo({\r\n            username: selectedAccount.username,\r\n            password: decryptedPassword,\r\n            remembered: selectedAccount.remembered ?? false,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [formTitle, selectedUser, accounts, decryptPassword, setUserInfo, userInfo]);  \r\n\r\n  const handlePasswordReset = () => {\r\n    setIsPasswordReset(false);\r\n    setFormTitle(\"Log in\"); // set back to log in after reset\r\n  };\r\n\r\n  const handleResetClick = () => {\r\n    setFormTitle(\"Reset Password\");\r\n    setIsPasswordReset(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Only show saved users dropdown if not in password reset mode */}\r\n      {formTitle === \"Log in\" && !isPasswordReset && (\r\n        <div style={{ marginBottom: \"25px\" }}>\r\n          <select onChange={handleUserSelect} value={selectedUser}>\r\n            <option value=\"\">Select a user</option>\r\n            {accounts.map(account => (\r\n              <option key={account.username} value={account.username}>\r\n                {account.username}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      {/* Buttons for Login or Password Reset */}\r\n      <div>\r\n        {!isPasswordReset ? (\r\n          <>\r\n            <button type=\"submit\" className=\"btn\">Login</button>\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n              <span style={{ marginRight: '8px' }}>Remember me?</span>\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                id=\"save-user\"\r\n                name=\"save-user\"\r\n                checked={remember}\r\n                onChange={handleRemember}\r\n              />\r\n            </div>\r\n            <button\r\n              style={{ marginTop: '10px' }}\r\n              type=\"button\"\r\n              className=\"btn cancel\"\r\n              onClick={closeForm}\r\n            >\r\n              Close\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <label htmlFor=\"resetPassword\"><b>New Password</b></label>\r\n            <input\r\n              type=\"password\"\r\n              value={passwordPlaceholder}  // Display the new password here\r\n              placeholder=\"Enter New Password\"\r\n              onChange={updatePassword}  // Handles new password input\r\n              required\r\n            />\r\n            <button\r\n              style={{ marginTop: '10px' }}\r\n              type=\"button\"\r\n              className=\"btn cancel\"\r\n              onClick={handlePasswordReset}  // Reset state to login\r\n            >\r\n              Back to Login\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {/* Reset Password or Login Action */}\r\n      {!isPasswordReset && (\r\n        <button\r\n          style={{ marginTop: '10px' }}\r\n          type=\"button\"\r\n          className=\"btn\"\r\n          onClick={handleResetClick}  // Trigger password reset\r\n        >\r\n          Reset Password\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,iBAAiB;AACtC,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAO,iBAAiB;AACxB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAwB1B,OAAO,MAAMC,SAAmC,GAAGA,CAAC;EAClDC,QAAQ;EACRC,WAAW;EACXC,QAAQ;EACRC,WAAW;EACXC,YAAY;EACZC,cAAc;EACdC,YAAY;EACZC,SAAS;EACTC,QAAQ;EACRC,YAAY;EACZC,SAAS;EACTC,SAAS;EACTC,YAAY;EACZC,eAAe;EACfC,mBAAmB;EACnBC,eAAe;EACfC,kBAAkB;EAClBC,WAAW;EACXC;AACF,CAAC,KAAK;EAAAC,EAAA;EAEJ,MAAMC,gBAAgB,GAAIC,KAA2C,IAAK;IACxE,MAAMC,gBAAgB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IAC3Cd,SAAS,CAACY,gBAAgB,CAAC;EAC7B,CAAC;EAED7B,SAAS,CAAC,MAAM;IACd,IAAIkB,SAAS,KAAK,QAAQ,IAAIF,YAAY,EAAE;MAC1C,MAAMgB,eAAe,GAAGjB,QAAQ,CAACkB,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,QAAQ,KAAKnB,YAAY,CAAC;MACnF,IAAIgB,eAAe,EAAE;QACnB,MAAMI,iBAAiB,GAAGhB,eAAe,CAACY,eAAe,CAACK,QAAQ,EAAEL,eAAe,CAACM,EAAE,CAAC;QACvF,IACE/B,QAAQ,CAAC4B,QAAQ,KAAKH,eAAe,CAACG,QAAQ,IAC9C5B,QAAQ,CAAC8B,QAAQ,KAAKD,iBAAiB,IACvC7B,QAAQ,CAACgC,UAAU,KAAKP,eAAe,CAACO,UAAU,EAClD;UAAA,IAAAC,qBAAA;UACAhC,WAAW,CAAC;YACV2B,QAAQ,EAAEH,eAAe,CAACG,QAAQ;YAClCE,QAAQ,EAAED,iBAAiB;YAC3BG,UAAU,GAAAC,qBAAA,GAAER,eAAe,CAACO,UAAU,cAAAC,qBAAA,cAAAA,qBAAA,GAAI;UAC5C,CAAC,CAAC;QACJ;MACF;IACF;EACF,CAAC,EAAE,CAACtB,SAAS,EAAEF,YAAY,EAAED,QAAQ,EAAEK,eAAe,EAAEZ,WAAW,EAAED,QAAQ,CAAC,CAAC;EAE/E,MAAMkC,mBAAmB,GAAGA,CAAA,KAAM;IAChClB,kBAAkB,CAAC,KAAK,CAAC;IACzBJ,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM;IAC7BvB,YAAY,CAAC,gBAAgB,CAAC;IAC9BI,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,oBACEpB,OAAA;IAAAwC,QAAA,GAEGzB,SAAS,KAAK,QAAQ,IAAI,CAACI,eAAe,iBACzCnB,OAAA;MAAKyC,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAO,CAAE;MAAAF,QAAA,eACnCxC,OAAA;QAAQ2C,QAAQ,EAAEnB,gBAAiB;QAACI,KAAK,EAAEf,YAAa;QAAA2B,QAAA,gBACtDxC,OAAA;UAAQ4B,KAAK,EAAC,EAAE;UAAAY,QAAA,EAAC;QAAa;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACtCnC,QAAQ,CAACoC,GAAG,CAACjB,OAAO,iBACnB/B,OAAA;UAA+B4B,KAAK,EAAEG,OAAO,CAACC,QAAS;UAAAQ,QAAA,EACpDT,OAAO,CAACC;QAAQ,GADND,OAAO,CAACC,QAAQ;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAErB,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,eAGD/C,OAAA;MAAAwC,QAAA,EACG,CAACrB,eAAe,gBACfnB,OAAA,CAAAE,SAAA;QAAAsC,QAAA,gBACExC,OAAA;UAAQiD,IAAI,EAAC,QAAQ;UAACC,SAAS,EAAC,KAAK;UAAAV,QAAA,EAAC;QAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpD/C,OAAA;UAAKyC,KAAK,EAAE;YAAEU,OAAO,EAAE,MAAM;YAAEC,UAAU,EAAE;UAAS,CAAE;UAAAZ,QAAA,gBACpDxC,OAAA;YAAMyC,KAAK,EAAE;cAAEY,WAAW,EAAE;YAAM,CAAE;YAAAb,QAAA,EAAC;UAAY;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACxD/C,OAAA,CAACJ,IAAI,CAAC0D,KAAK;YACTL,IAAI,EAAC,UAAU;YACfM,EAAE,EAAC,WAAW;YACdC,IAAI,EAAC,WAAW;YAChBC,OAAO,EAAEnD,QAAS;YAClBqC,QAAQ,EAAElC;UAAe;YAAAmC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACN/C,OAAA;UACEyC,KAAK,EAAE;YAAEiB,SAAS,EAAE;UAAO,CAAE;UAC7BT,IAAI,EAAC,QAAQ;UACbC,SAAS,EAAC,YAAY;UACtBS,OAAO,EAAEhD,SAAU;UAAA6B,QAAA,EACpB;QAED;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACT,CAAC,gBAEH/C,OAAA,CAAAE,SAAA;QAAAsC,QAAA,gBACExC,OAAA;UAAO4D,OAAO,EAAC,eAAe;UAAApB,QAAA,eAACxC,OAAA;YAAAwC,QAAA,EAAG;UAAY;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC1D/C,OAAA;UACEiD,IAAI,EAAC,UAAU;UACfrB,KAAK,EAAEV,mBAAoB,CAAE;UAAA;UAC7B2C,WAAW,EAAC,oBAAoB;UAChClB,QAAQ,EAAErB,cAAe,CAAE;UAAA;UAC3BwC,QAAQ;QAAA;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC,eACF/C,OAAA;UACEyC,KAAK,EAAE;YAAEiB,SAAS,EAAE;UAAO,CAAE;UAC7BT,IAAI,EAAC,QAAQ;UACbC,SAAS,EAAC,YAAY;UACtBS,OAAO,EAAErB,mBAAoB,CAAE;UAAA;UAAAE,QAAA,EAChC;QAED;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACT;IACH;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAGL,CAAC5B,eAAe,iBACfnB,OAAA;MACEyC,KAAK,EAAE;QAAEiB,SAAS,EAAE;MAAO,CAAE;MAC7BT,IAAI,EAAC,QAAQ;MACbC,SAAS,EAAC,KAAK;MACfS,OAAO,EAAEpB,gBAAiB,CAAE;MAAA;MAAAC,QAAA,EAC7B;IAED;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxB,EAAA,CApIWpB,SAAmC;AAAA4D,EAAA,GAAnC5D,SAAmC;AAAA,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}