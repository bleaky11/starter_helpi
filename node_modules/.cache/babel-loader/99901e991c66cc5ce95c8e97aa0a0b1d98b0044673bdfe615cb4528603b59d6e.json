{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\nimport { LoginForm } from './LoginForm';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\",\n    remembered: false\n  });\n  const [remember, setRemember] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null); // stores the indexedDB database instance\n  const [accounts, setAccounts] = useState([]);\n  const [selectedUser, setSelect] = useState(\"\");\n  const [passwordPlaceholder, setPlaceholder] = useState(\"\"); // a blank input space for the reset form\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [calledUsername, setCalled] = useState(\"\");\n  const [isPasswordReset, setIsPasswordReset] = React.useState(false);\n  const CryptoJS = require(\"crypto-js\");\n  const secretKey = process.env.REACT_APP_SECRET_KEY;\n  useEffect(() => {\n    if (!secretKey) {\n      console.error(\"Missing secret key in environment variables\");\n    }\n  }, [secretKey]);\n\n  // Encrypt password and store both encrypted password and IV\n  const encryptPassword = password => {\n    const iv = CryptoJS.lib.WordArray.random(16); // Generate a new random IV\n    const encrypted = CryptoJS.AES.encrypt(password, secretKey, {\n      iv: iv\n    }).toString();\n    return {\n      encryptedPassword: encrypted,\n      iv: iv.toString()\n    };\n  };\n  const decryptPassword = (encryptedPassword, iv) => {\n    // decrypt the user password for log in purposes\n    const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey, {\n      iv: CryptoJS.enc.Hex.parse(iv)\n    });\n    return bytes.toString(CryptoJS.enc.Utf8);\n  };\n  const updatePassword = event => {\n    // updates the password to be reset in the reset form\n    const placeholder = event.target.value;\n    setPlaceholder(placeholder);\n    const encrypted = encryptPassword(placeholder);\n    const encryptedPassword = encrypted.encryptedPassword;\n    setNewPassword(encryptedPassword);\n    setUserInfo(prevState => ({\n      // updates user info\n      ...prevState,\n      password: encryptedPassword\n    }));\n    const usernameToUpdate = calledUsername; // reset password for the called user\n\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const getUserRequest = store.get(usernameToUpdate);\n      getUserRequest.onsuccess = () => {\n        const existingUser = getUserRequest.result;\n        if (existingUser) {\n          existingUser.password = encryptedPassword;\n          const updateRequest = store.put(existingUser); // overwrites old password in database\n\n          updateRequest.onsuccess = () => {\n            updateSavedUsers(); // Update saved accounts\n          };\n          updateRequest.onerror = event => {\n            console.error(\"Error updating password:\", event);\n          };\n        } else {\n          console.error(\"User not found for updating password.\");\n        }\n      };\n      transaction.onerror = event => {\n        console.error(\"Error accessing user store:\", event);\n      };\n    }\n  };\n  const updateCalledUser = event =>\n  // controls username input in reset form\n  {\n    setCalled(event.target.value);\n  };\n  const checkInfo = (savedUsername, savedEncryptedPassword, savedIV, userInput, passInput) =>\n  // checks if log in input matches user credentials\n  {\n    if (userInput === savedUsername) {\n      const decryptedPassword = decryptPassword(savedEncryptedPassword, savedIV); // decrypt password to compare\n      if (decryptedPassword.trim() === passInput.trim()) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n  useEffect(() => {\n    const initializeDatabase = async () => {\n      const indexedDB = window.indexedDB;\n      const request = indexedDB.open(\"UserDatabase\", 2);\n      request.onerror = event => {\n        console.error(\"Error opening user database!\", event);\n      };\n      request.onupgradeneeded = event => {\n        const dbInstance = event.target.result;\n        dbInstance.createObjectStore(\"users\", {\n          keyPath: \"username\"\n        });\n      };\n      request.onsuccess = () => {\n        const dbInstance = request.result;\n        if (dbInstance) {\n          setDb(dbInstance);\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\n          const store = transaction.objectStore(\"users\");\n          const getAllRequest = store.getAll();\n          getAllRequest.onsuccess = () => {\n            const allUsers = getAllRequest.result;\n            const rememberedAccounts = allUsers.filter(user => user.remembered);\n            setAccounts(rememberedAccounts);\n          };\n        } else {\n          if (!localStorage.getItem(\"homeVisit\")) {\n            // save user visit to refresh saved accounts for next surf\n            localStorage.setItem(\"homeVisit\", \"true\");\n          }\n          clearForm();\n        }\n      };\n    };\n    initializeDatabase();\n  }, [formTitle]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!userInfo.username || !userInfo.password) {\n      alert(\"Username and password are required.\");\n      return;\n    }\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const userQuery = store.get(userInfo.username);\n      userQuery.onsuccess = () => {\n        const existingUser = userQuery.result;\n        if (existingUser) {\n          if (formTitle === \"Log in\") {\n            const {\n              username,\n              password: encryptedPassword,\n              iv,\n              remembered\n            } = existingUser;\n            if (checkInfo(username, encryptedPassword, iv, userInfo.username, userInfo.password)) {\n              setIsLoggedIn(true);\n              if (remember !== remembered) {\n                existingUser.remembered = remember;\n                const updateRequest = store.put(existingUser); // change remembered field of user if changed\n                updateRequest.onsuccess = () => updateSavedUsers(); // save changes\n                updateRequest.onerror = event => console.error(\"Error updating remembered status:\", event);\n              } else {\n                updateSavedUsers(); // update regardless if updateSavedUsers() finds no remembered accounts\n              }\n              if (!remember) {\n                removeFromDropdown(userInfo.username); // remove saved account when not remembered\n              }\n            } else {\n              alert(\"Incorrect username or password.\");\n            }\n          } else {\n            alert(\"Account already exists. Please log in.\");\n            clearForm();\n          }\n        } else if (formTitle === \"Create Account\") {\n          const {\n            encryptedPassword,\n            iv\n          } = encryptPassword(userInfo.password);\n          const newUser = {\n            ...userInfo,\n            password: encryptedPassword,\n            iv,\n            remembered: remember\n          };\n          store.put(newUser).onsuccess = () => {\n            alert(\"Account created successfully!\");\n            setIsLoggedIn(true);\n            updateSavedUsers();\n          };\n        } else {\n          alert(\"Username doesn't exist!\");\n          clearForm();\n        }\n      };\n    }\n  };\n  const removeFromDropdown = username => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const getUserRequest = store.get(username);\n      getUserRequest.onsuccess = () => {\n        const user = getUserRequest.result;\n        if (user) {\n          user.remembered = false; // set to false to remove from saved accounts\n\n          const updateRequest = store.put(user);\n          updateRequest.onsuccess = () => {\n            updateSavedUsers(); // Refresh the accounts list after updating\n          };\n          updateRequest.onerror = event => {\n            console.error(\"Error updating account:\", event);\n          };\n        }\n      };\n      transaction.onerror = event => {\n        console.error(\"Error accessing the user store:\", event);\n      };\n    }\n  };\n  const deleteAccount = username => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\n        const getRequest = store.get(username);\n        getRequest.onsuccess = () => {\n          const userAccount = getRequest.result;\n          if (userAccount && userAccount.remembered) {\n            removeFromDropdown(username); // remove account from saved dropdown if remembered\n          }\n          const deleteRequest = store.delete(username);\n          deleteRequest.onsuccess = () => {\n            setUserInfo({\n              username: \"\",\n              password: \"\",\n              remembered: false\n            }); // delete account and reset form\n            handleLogout();\n            clearForm();\n          };\n          deleteRequest.onerror = () => {\n            console.error(\"Error deleting account\");\n          };\n        };\n        getRequest.onerror = () => {\n          console.error(\"Error fetching account\");\n        };\n      }\n    }\n  };\n  const updateSavedUsers = () => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readonly\");\n      const store = transaction.objectStore(\"users\");\n      const request = store.getAll();\n      request.onsuccess = () => {\n        const rememberedAccounts = request.result.filter(account => account.remembered); // capture only remembered users\n        setAccounts(rememberedAccounts);\n        if (rememberedAccounts.length > 0) {\n          const account = rememberedAccounts[0]; // set first user in dropdown to be last saved\n          const decryptedPassword = decryptPassword(account.password, account.iv);\n          setUserInfo({\n            username: account.username,\n            password: decryptedPassword,\n            remembered: account.remembered\n          });\n          setSelect(account.username);\n        } else {\n          clearForm();\n        }\n      };\n    }\n  };\n  const toggleForm = () => {\n    // controls opening/closing form\n    setIsFormOpen(!isFormOpen);\n  };\n  const clearForm = () => {\n    // resets form\n    setUserInfo({\n      username: \"\",\n      password: \"\",\n      remembered: false\n    });\n    setRemember(true);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: type === \"checkbox\" ? checked : value // updates username and password field for log in\n    }));\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setIsFormOpen(false);\n  };\n  const handleRemember = () => {\n    const newRememberState = !remember; // switch remember on check mark click/unclick\n    setRemember(newRememberState);\n  };\n  const showForm = title => {\n    setFormTitle(title);\n    if (title === \"Create Account\") {\n      clearForm(); // clear form fields when switching to \"Create Account\"\n    } else if (title === \"Log in\") {\n      setRemember(true); // set true regardless to show saved accounts\n    }\n    toggleForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: jerboa // default profile picture\n        ,\n        alt: \"Four-Toed Jerboa\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: userInfo.username || \"Logged-in User\" // error with not showing unremembered username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            float: \"left\",\n            marginTop: \"10px\",\n            borderRadius: \"20px\",\n            backgroundColor: \"salmon\"\n          },\n          onClick: handleLogout,\n          children: \"Log out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => deleteAccount(userInfo.username),\n          style: {\n            float: \"left\",\n            marginTop: \"10px\",\n            borderRadius: \"20px\",\n            backgroundColor: \"darkred\"\n          },\n          children: \"Delete Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: \"Guest\" // default visiter status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkblue\"\n        },\n        onClick: () => showForm(\"Log in\"),\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      selectedUser: selectedUser,\n      setSelect: setSelect,\n      accounts: accounts,\n      closeForm: toggleForm,\n      formTitle: formTitle,\n      setFormTitle: setFormTitle,\n      decryptPassword: decryptPassword,\n      passwordPlaceholder: passwordPlaceholder,\n      setPlaceholder: setPlaceholder,\n      isPasswordReset: isPasswordReset,\n      setIsPasswordReset: setIsPasswordReset,\n      newPassword: newPassword,\n      updatePassword: updatePassword,\n      calledUsername: calledUsername,\n      setCalled: setCalled,\n      updateCalledUser: updateCalledUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://bleaky11.github.io/starter_helpi/\",\n      style: {\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"wg44gJda6b5uBI8VTmL9s6uUfgU=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","jerboa","LoginForm","Button","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remembered","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","accounts","setAccounts","selectedUser","setSelect","passwordPlaceholder","setPlaceholder","newPassword","setNewPassword","calledUsername","setCalled","isPasswordReset","setIsPasswordReset","CryptoJS","require","secretKey","process","env","REACT_APP_SECRET_KEY","console","error","encryptPassword","iv","lib","WordArray","random","encrypted","AES","encrypt","toString","encryptedPassword","decryptPassword","bytes","decrypt","enc","Hex","parse","Utf8","updatePassword","event","placeholder","target","value","prevState","usernameToUpdate","transaction","store","objectStore","getUserRequest","get","onsuccess","existingUser","result","updateRequest","put","updateSavedUsers","onerror","updateCalledUser","checkInfo","savedUsername","savedEncryptedPassword","savedIV","userInput","passInput","decryptedPassword","trim","initializeDatabase","indexedDB","window","request","open","onupgradeneeded","dbInstance","createObjectStore","keyPath","getAllRequest","getAll","allUsers","rememberedAccounts","filter","user","localStorage","getItem","setItem","clearForm","handleSubmit","preventDefault","alert","userQuery","removeFromDropdown","newUser","deleteAccount","confirm","getRequest","userAccount","deleteRequest","delete","handleLogout","account","length","toggleForm","updateStatus","name","type","checked","prevInfo","handleRemember","newRememberState","showForm","title","children","src","alt","style","float","width","height","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","borderRadius","backgroundColor","closeForm","href","color","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button} from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [userInfo, setUserInfo] = useState({ username: \"\", password: \"\", remembered: false});\r\n  const [remember, setRemember] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null); // stores the indexedDB database instance\r\n  const [accounts, setAccounts] = useState<{ username: string; password: string, remembered: boolean, iv: string }[]>([]);\r\n  const [selectedUser, setSelect] = useState(\"\");\r\n  const [passwordPlaceholder, setPlaceholder] = useState<string>(\"\"); // a blank input space for the reset form\r\n  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n  const [calledUsername, setCalled]= useState<string>(\"\");\r\n  const [isPasswordReset, setIsPasswordReset] = React.useState<boolean>(false);\r\n\r\n  const CryptoJS = require(\"crypto-js\");\r\n\r\n  const secretKey = process.env.REACT_APP_SECRET_KEY;\r\n\r\n  useEffect(() => {\r\n    if (!secretKey) {\r\n      console.error(\"Missing secret key in environment variables\");\r\n    }\r\n  }, [secretKey]);\r\n\r\n  // Encrypt password and store both encrypted password and IV\r\nconst encryptPassword = (password: string) => {\r\n  const iv = CryptoJS.lib.WordArray.random(16); // Generate a new random IV\r\n  const encrypted = CryptoJS.AES.encrypt(password, secretKey, { iv: iv }).toString();\r\n  \r\n  return { encryptedPassword: encrypted, iv: iv.toString() };\r\n};\r\n\r\nconst decryptPassword = (encryptedPassword: string, iv: string) => { // decrypt the user password for log in purposes\r\n  const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey, { iv: CryptoJS.enc.Hex.parse(iv) });\r\n  return bytes.toString(CryptoJS.enc.Utf8); \r\n};\r\n\r\nconst updatePassword = (event: React.ChangeEvent<HTMLInputElement>) => { // updates the password to be reset in the reset form\r\n  const placeholder = event.target.value; \r\n  setPlaceholder(placeholder); \r\n  \r\n  const encrypted = encryptPassword(placeholder);\r\n  const encryptedPassword = encrypted.encryptedPassword;\r\n  setNewPassword(encryptedPassword);\r\n  \r\n  setUserInfo(prevState => ({ // updates user info\r\n    ...prevState,\r\n    password: encryptedPassword,\r\n  }));\r\n  \r\n  const usernameToUpdate = calledUsername;  // reset password for the called user\r\n  \r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    const getUserRequest = store.get(usernameToUpdate); \r\n    \r\n    getUserRequest.onsuccess = () => {\r\n      const existingUser = getUserRequest.result;\r\n  \r\n      if (existingUser) {\r\n        \r\n        existingUser.password = encryptedPassword;\r\n        \r\n        const updateRequest = store.put(existingUser); // overwrites old password in database\r\n        \r\n        updateRequest.onsuccess = () => {\r\n          updateSavedUsers();  // Update saved accounts\r\n        };\r\n  \r\n        updateRequest.onerror = (event) => {\r\n          console.error(\"Error updating password:\", event);\r\n        };\r\n      } else {\r\n        console.error(\"User not found for updating password.\");\r\n      }\r\n    };\r\n  \r\n    transaction.onerror = (event) => {\r\n      console.error(\"Error accessing user store:\", event);\r\n    };\r\n  }\r\n};\r\n\r\nconst updateCalledUser = (event: React.ChangeEvent<HTMLInputElement>) => // controls username input in reset form\r\n{\r\n  setCalled(event.target.value);\r\n}\r\n\r\nconst checkInfo = (savedUsername: string, savedEncryptedPassword: string, savedIV: string, userInput: string, passInput: string) => // checks if log in input matches user credentials\r\n{\r\n  if (userInput === savedUsername) {\r\n      const decryptedPassword = decryptPassword(savedEncryptedPassword, savedIV); // decrypt password to compare\r\n      if (decryptedPassword.trim() === passInput.trim()) {\r\n        return true;\r\n      } \r\n      else \r\n      {\r\n        return false;\r\n      }\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  const initializeDatabase = async () => {\r\n    const indexedDB = window.indexedDB;\r\n    const request = indexedDB.open(\"UserDatabase\", 2);\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"Error opening user database!\", event);\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const dbInstance = (event.target as IDBOpenDBRequest).result;\r\n      dbInstance.createObjectStore(\"users\", { keyPath: \"username\" });\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      const dbInstance = request.result;\r\n      if (dbInstance) {\r\n        setDb(dbInstance);\r\n        const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n        const store = transaction.objectStore(\"users\");\r\n        const getAllRequest = store.getAll();\r\n\r\n        getAllRequest.onsuccess = () => {\r\n          const allUsers = getAllRequest.result;\r\n          const rememberedAccounts = allUsers.filter(user => user.remembered);\r\n          setAccounts(rememberedAccounts);\r\n        };\r\n      } else {\r\n        if (!localStorage.getItem(\"homeVisit\")) { // save user visit to refresh saved accounts for next surf\r\n          localStorage.setItem(\"homeVisit\", \"true\");\r\n        }\r\n        clearForm();\r\n      }\r\n    };\r\n  };\r\n  initializeDatabase();\r\n}, [formTitle]);\r\n\r\nconst handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n  event.preventDefault();\r\n\r\n  if (!userInfo.username || !userInfo.password) {\r\n    alert(\"Username and password are required.\");\r\n    return;\r\n  }\r\n\r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    const userQuery = store.get(userInfo.username);\r\n\r\n    userQuery.onsuccess = () => {\r\n      const existingUser = userQuery.result;\r\n\r\n      if (existingUser) {\r\n        if (formTitle === \"Log in\") {\r\n          const { username, password: encryptedPassword, iv, remembered } = existingUser;\r\n\r\n          if (checkInfo(username, encryptedPassword, iv, userInfo.username, userInfo.password)) {\r\n            setIsLoggedIn(true);\r\n            if (remember !== remembered) {\r\n              existingUser.remembered = remember;\r\n              const updateRequest = store.put(existingUser); // change remembered field of user if changed\r\n              updateRequest.onsuccess = () => updateSavedUsers(); // save changes\r\n              updateRequest.onerror = (event) => console.error(\"Error updating remembered status:\", event);\r\n            } else {\r\n              updateSavedUsers(); // update regardless if updateSavedUsers() finds no remembered accounts\r\n            }\r\n\r\n            if (!remember) {\r\n              removeFromDropdown(userInfo.username); // remove saved account when not remembered\r\n            }\r\n          } else {\r\n            alert(\"Incorrect username or password.\");\r\n          }\r\n        } else {\r\n          alert(\"Account already exists. Please log in.\");\r\n          clearForm();\r\n        }\r\n      } else if (formTitle === \"Create Account\") {\r\n        const { encryptedPassword, iv } = encryptPassword(userInfo.password);\r\n        const newUser = { ...userInfo, password: encryptedPassword, iv, remembered: remember };\r\n\r\n        store.put(newUser).onsuccess = () => {\r\n          alert(\"Account created successfully!\");\r\n          setIsLoggedIn(true);\r\n          updateSavedUsers();\r\n        };\r\n      } else {\r\n        alert(\"Username doesn't exist!\");\r\n        clearForm();\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n  const removeFromDropdown = (username: string) => {\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const getUserRequest = store.get(username);\r\n  \r\n      getUserRequest.onsuccess = () => {\r\n        const user = getUserRequest.result;\r\n        \r\n        if (user) {\r\n          user.remembered = false; // set to false to remove from saved accounts\r\n  \r\n          const updateRequest = store.put(user);\r\n  \r\n          updateRequest.onsuccess = () => {\r\n            updateSavedUsers(); // Refresh the accounts list after updating\r\n          };\r\n  \r\n          updateRequest.onerror = (event) => {\r\n            console.error(\"Error updating account:\", event);\r\n          };\r\n        }\r\n      };\r\n  \r\n      transaction.onerror = (event) => {\r\n        console.error(\"Error accessing the user store:\", event);\r\n      };\r\n    }\r\n  };\r\n  \r\n  const deleteAccount = (username: string) => {\r\n    if (db) {\r\n        const transaction = db.transaction(\"users\", \"readwrite\");\r\n        const store = transaction.objectStore(\"users\");\r\n\r\n        if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\r\n            const getRequest = store.get(username);\r\n\r\n            getRequest.onsuccess = () => {\r\n                const userAccount = getRequest.result;\r\n\r\n                if (userAccount && userAccount.remembered) { \r\n                    removeFromDropdown(username); // remove account from saved dropdown if remembered\r\n                }\r\n\r\n                const deleteRequest = store.delete(username);\r\n\r\n                deleteRequest.onsuccess = () => {\r\n                    setUserInfo({ username: \"\", password: \"\", remembered: false }); // delete account and reset form\r\n                    handleLogout();\r\n                    clearForm();\r\n                };\r\n\r\n                deleteRequest.onerror = () => {\r\n                    console.error(\"Error deleting account\");\r\n                };\r\n            };\r\n\r\n            getRequest.onerror = () => {\r\n                console.error(\"Error fetching account\");\r\n            };\r\n        }\r\n    }\r\n};\r\n    \r\nconst updateSavedUsers = () => { \r\n  if (db) {\r\n      const transaction = db.transaction(\"users\", \"readonly\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const request = store.getAll();\r\n\r\n      request.onsuccess = () => {\r\n          const rememberedAccounts = request.result.filter(account => account.remembered); // capture only remembered users\r\n          setAccounts(rememberedAccounts);\r\n\r\n          if (rememberedAccounts.length > 0) {\r\n              const account = rememberedAccounts[0]; // set first user in dropdown to be last saved\r\n              const decryptedPassword = decryptPassword(account.password, account.iv);\r\n              setUserInfo({\r\n                  username: account.username,\r\n                  password: decryptedPassword,  \r\n                  remembered: account.remembered,\r\n              });\r\n              setSelect(account.username);\r\n          }\r\n          else\r\n          {\r\n            clearForm();\r\n          }\r\n      };\r\n  }\r\n};\r\n\r\n  const toggleForm = () => { // controls opening/closing form\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const clearForm = () => {    // resets form\r\n    setUserInfo({ username: \"\", password: \"\", remembered: false });\r\n    setRemember(true); \r\n};\r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = event.target;\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: type === \"checkbox\" ? checked : value, // updates username and password field for log in\r\n    }));\r\n  };   \r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n    setIsFormOpen(false);\r\n}; \r\n  \r\n  const handleRemember = () => {\r\n    const newRememberState = !remember; // switch remember on check mark click/unclick\r\n    setRemember(newRememberState); \r\n  };  \r\n  \r\n  const showForm = (title: string) => {\r\n    setFormTitle(title);\r\n    if (title === \"Create Account\") {\r\n      clearForm(); // clear form fields when switching to \"Create Account\"\r\n    }\r\n    else if(title === \"Log in\")\r\n    {\r\n      setRemember(true); // set true regardless to show saved accounts\r\n    }\r\n    toggleForm();\r\n  }; \r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <div>\r\n          <img\r\n            src={jerboa} // default profile picture\r\n            alt=\"Four-Toed Jerboa\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title={userInfo.username || \"Logged-in User\"} // error with not showing unremembered username\r\n          />\r\n          <div>\r\n            <Button \r\n              style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"salmon\" }}\r\n              onClick={handleLogout}\r\n            >\r\n              Log out\r\n            </Button>\r\n  \r\n            <Button \r\n              onClick={() => deleteAccount(userInfo.username)} \r\n              style={{\r\n                float: \"left\", \r\n                marginTop: \"10px\", \r\n                borderRadius: \"20px\", \r\n                backgroundColor: \"darkred\"\r\n              }}\r\n            >\r\n              Delete Account\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title=\"Guest\" // default visiter status\r\n          />\r\n          <Button \r\n            style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkblue\" }}\r\n            onClick={() => showForm(\"Log in\")}\r\n          >\r\n            Log in\r\n          </Button>\r\n        </div>\r\n      )}\r\n  \r\n      {isFormOpen && !isLoggedIn && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          selectedUser={selectedUser}\r\n          setSelect={setSelect}\r\n          accounts={accounts}\r\n          closeForm={toggleForm}\r\n          formTitle={formTitle}\r\n          setFormTitle={setFormTitle}\r\n          decryptPassword = {decryptPassword}\r\n          passwordPlaceholder = {passwordPlaceholder}\r\n          setPlaceholder={setPlaceholder}\r\n          isPasswordReset = {isPasswordReset}\r\n          setIsPasswordReset={setIsPasswordReset}\r\n          newPassword = {newPassword}\r\n          updatePassword = {updatePassword}\r\n          calledUsername = {calledUsername}\r\n          setCalled = {setCalled}\r\n          updateCalledUser = {updateCalledUser}\r\n        />\r\n      )}\r\n      <a href=\"https://bleaky11.github.io/starter_helpi/\" style={{ color: 'black' }}>\r\n        <h1>The Career Quiz</h1>\r\n      </a>\r\n    </div>\r\n  )};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,MAAM,MAAM,wCAAwC;AAC3D,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,MAAM,QAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IAAEc,QAAQ,EAAE,EAAE;IAAEC,QAAQ,EAAE,EAAE;IAAEC,UAAU,EAAE;EAAK,CAAC,CAAC;EAC1F,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,gBAAgB,CAAC;EAC5D,MAAM,CAACuB,EAAE,EAAEC,KAAK,CAAC,GAAGxB,QAAQ,CAAqB,IAAI,CAAC,CAAC,CAAC;EACxD,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAA4E,EAAE,CAAC;EACvH,MAAM,CAAC2B,YAAY,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6B,mBAAmB,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAS,EAAE,CAAC,CAAC,CAAC;EACpE,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAAS,EAAE,CAAC;EAC1D,MAAM,CAACiC,cAAc,EAAEC,SAAS,CAAC,GAAElC,QAAQ,CAAS,EAAE,CAAC;EACvD,MAAM,CAACmC,eAAe,EAAEC,kBAAkB,CAAC,GAAGrC,KAAK,CAACC,QAAQ,CAAU,KAAK,CAAC;EAE5E,MAAMqC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;EAErC,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;EAElDzC,SAAS,CAAC,MAAM;IACd,IAAI,CAACsC,SAAS,EAAE;MACdI,OAAO,CAACC,KAAK,CAAC,6CAA6C,CAAC;IAC9D;EACF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;;EAEf;EACF,MAAMM,eAAe,GAAI9B,QAAgB,IAAK;IAC5C,MAAM+B,EAAE,GAAGT,QAAQ,CAACU,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,MAAMC,SAAS,GAAGb,QAAQ,CAACc,GAAG,CAACC,OAAO,CAACrC,QAAQ,EAAEwB,SAAS,EAAE;MAAEO,EAAE,EAAEA;IAAG,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC;IAElF,OAAO;MAAEC,iBAAiB,EAAEJ,SAAS;MAAEJ,EAAE,EAAEA,EAAE,CAACO,QAAQ,CAAC;IAAE,CAAC;EAC5D,CAAC;EAED,MAAME,eAAe,GAAGA,CAACD,iBAAyB,EAAER,EAAU,KAAK;IAAE;IACnE,MAAMU,KAAK,GAAGnB,QAAQ,CAACc,GAAG,CAACM,OAAO,CAACH,iBAAiB,EAAEf,SAAS,EAAE;MAAEO,EAAE,EAAET,QAAQ,CAACqB,GAAG,CAACC,GAAG,CAACC,KAAK,CAACd,EAAE;IAAE,CAAC,CAAC;IACpG,OAAOU,KAAK,CAACH,QAAQ,CAAChB,QAAQ,CAACqB,GAAG,CAACG,IAAI,CAAC;EAC1C,CAAC;EAED,MAAMC,cAAc,GAAIC,KAA0C,IAAK;IAAE;IACvE,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IACtCpC,cAAc,CAACkC,WAAW,CAAC;IAE3B,MAAMd,SAAS,GAAGL,eAAe,CAACmB,WAAW,CAAC;IAC9C,MAAMV,iBAAiB,GAAGJ,SAAS,CAACI,iBAAiB;IACrDtB,cAAc,CAACsB,iBAAiB,CAAC;IAEjCzC,WAAW,CAACsD,SAAS,KAAK;MAAE;MAC1B,GAAGA,SAAS;MACZpD,QAAQ,EAAEuC;IACZ,CAAC,CAAC,CAAC;IAEH,MAAMc,gBAAgB,GAAGnC,cAAc,CAAC,CAAE;;IAE1C,IAAIV,EAAE,EAAE;MACN,MAAM8C,WAAW,GAAG9C,EAAE,CAAC8C,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;MACxD,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;MAE9C,MAAMC,cAAc,GAAGF,KAAK,CAACG,GAAG,CAACL,gBAAgB,CAAC;MAElDI,cAAc,CAACE,SAAS,GAAG,MAAM;QAC/B,MAAMC,YAAY,GAAGH,cAAc,CAACI,MAAM;QAE1C,IAAID,YAAY,EAAE;UAEhBA,YAAY,CAAC5D,QAAQ,GAAGuC,iBAAiB;UAEzC,MAAMuB,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAACH,YAAY,CAAC,CAAC,CAAC;;UAE/CE,aAAa,CAACH,SAAS,GAAG,MAAM;YAC9BK,gBAAgB,CAAC,CAAC,CAAC,CAAE;UACvB,CAAC;UAEDF,aAAa,CAACG,OAAO,GAAIjB,KAAK,IAAK;YACjCpB,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEmB,KAAK,CAAC;UAClD,CAAC;QACH,CAAC,MAAM;UACLpB,OAAO,CAACC,KAAK,CAAC,uCAAuC,CAAC;QACxD;MACF,CAAC;MAEDyB,WAAW,CAACW,OAAO,GAAIjB,KAAK,IAAK;QAC/BpB,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEmB,KAAK,CAAC;MACrD,CAAC;IACH;EACF,CAAC;EAED,MAAMkB,gBAAgB,GAAIlB,KAA0C;EAAK;EACzE;IACE7B,SAAS,CAAC6B,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMgB,SAAS,GAAGA,CAACC,aAAqB,EAAEC,sBAA8B,EAAEC,OAAe,EAAEC,SAAiB,EAAEC,SAAiB;EAAK;EACpI;IACE,IAAID,SAAS,KAAKH,aAAa,EAAE;MAC7B,MAAMK,iBAAiB,GAAGjC,eAAe,CAAC6B,sBAAsB,EAAEC,OAAO,CAAC,CAAC,CAAC;MAC5E,IAAIG,iBAAiB,CAACC,IAAI,CAAC,CAAC,KAAKF,SAAS,CAACE,IAAI,CAAC,CAAC,EAAE;QACjD,OAAO,IAAI;MACb,CAAC,MAED;QACE,OAAO,KAAK;MACd;IACJ,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF,CAAC;EAEDxF,SAAS,CAAC,MAAM;IACd,MAAMyF,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,MAAMC,SAAS,GAAGC,MAAM,CAACD,SAAS;MAClC,MAAME,OAAO,GAAGF,SAAS,CAACG,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;MAEjDD,OAAO,CAACb,OAAO,GAAIjB,KAAK,IAAK;QAC3BpB,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEmB,KAAK,CAAC;MACtD,CAAC;MAED8B,OAAO,CAACE,eAAe,GAAIhC,KAAK,IAAK;QACnC,MAAMiC,UAAU,GAAIjC,KAAK,CAACE,MAAM,CAAsBW,MAAM;QAC5DoB,UAAU,CAACC,iBAAiB,CAAC,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAW,CAAC,CAAC;MAChE,CAAC;MAEDL,OAAO,CAACnB,SAAS,GAAG,MAAM;QACxB,MAAMsB,UAAU,GAAGH,OAAO,CAACjB,MAAM;QACjC,IAAIoB,UAAU,EAAE;UACdxE,KAAK,CAACwE,UAAU,CAAC;UACjB,MAAM3B,WAAW,GAAG2B,UAAU,CAAC3B,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;UAC/D,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;UAC9C,MAAM4B,aAAa,GAAG7B,KAAK,CAAC8B,MAAM,CAAC,CAAC;UAEpCD,aAAa,CAACzB,SAAS,GAAG,MAAM;YAC9B,MAAM2B,QAAQ,GAAGF,aAAa,CAACvB,MAAM;YACrC,MAAM0B,kBAAkB,GAAGD,QAAQ,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACxF,UAAU,CAAC;YACnEU,WAAW,CAAC4E,kBAAkB,CAAC;UACjC,CAAC;QACH,CAAC,MAAM;UACL,IAAI,CAACG,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE;YAAE;YACxCD,YAAY,CAACE,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC;UAC3C;UACAC,SAAS,CAAC,CAAC;QACb;MACF,CAAC;IACH,CAAC;IACDlB,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACrE,SAAS,CAAC,CAAC;EAEf,MAAMwF,YAAY,GAAI9C,KAAuC,IAAK;IAChEA,KAAK,CAAC+C,cAAc,CAAC,CAAC;IAEtB,IAAI,CAAClG,QAAQ,CAACE,QAAQ,IAAI,CAACF,QAAQ,CAACG,QAAQ,EAAE;MAC5CgG,KAAK,CAAC,qCAAqC,CAAC;MAC5C;IACF;IAEA,IAAIxF,EAAE,EAAE;MACN,MAAM8C,WAAW,GAAG9C,EAAE,CAAC8C,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;MACxD,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;MAE9C,MAAMyC,SAAS,GAAG1C,KAAK,CAACG,GAAG,CAAC7D,QAAQ,CAACE,QAAQ,CAAC;MAE9CkG,SAAS,CAACtC,SAAS,GAAG,MAAM;QAC1B,MAAMC,YAAY,GAAGqC,SAAS,CAACpC,MAAM;QAErC,IAAID,YAAY,EAAE;UAChB,IAAItD,SAAS,KAAK,QAAQ,EAAE;YAC1B,MAAM;cAAEP,QAAQ;cAAEC,QAAQ,EAAEuC,iBAAiB;cAAER,EAAE;cAAE9B;YAAW,CAAC,GAAG2D,YAAY;YAE9E,IAAIO,SAAS,CAACpE,QAAQ,EAAEwC,iBAAiB,EAAER,EAAE,EAAElC,QAAQ,CAACE,QAAQ,EAAEF,QAAQ,CAACG,QAAQ,CAAC,EAAE;cACpFK,aAAa,CAAC,IAAI,CAAC;cACnB,IAAIH,QAAQ,KAAKD,UAAU,EAAE;gBAC3B2D,YAAY,CAAC3D,UAAU,GAAGC,QAAQ;gBAClC,MAAM4D,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAACH,YAAY,CAAC,CAAC,CAAC;gBAC/CE,aAAa,CAACH,SAAS,GAAG,MAAMK,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBACpDF,aAAa,CAACG,OAAO,GAAIjB,KAAK,IAAKpB,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEmB,KAAK,CAAC;cAC9F,CAAC,MAAM;gBACLgB,gBAAgB,CAAC,CAAC,CAAC,CAAC;cACtB;cAEA,IAAI,CAAC9D,QAAQ,EAAE;gBACbgG,kBAAkB,CAACrG,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAAC;cACzC;YACF,CAAC,MAAM;cACLiG,KAAK,CAAC,iCAAiC,CAAC;YAC1C;UACF,CAAC,MAAM;YACLA,KAAK,CAAC,wCAAwC,CAAC;YAC/CH,SAAS,CAAC,CAAC;UACb;QACF,CAAC,MAAM,IAAIvF,SAAS,KAAK,gBAAgB,EAAE;UACzC,MAAM;YAAEiC,iBAAiB;YAAER;UAAG,CAAC,GAAGD,eAAe,CAACjC,QAAQ,CAACG,QAAQ,CAAC;UACpE,MAAMmG,OAAO,GAAG;YAAE,GAAGtG,QAAQ;YAAEG,QAAQ,EAAEuC,iBAAiB;YAAER,EAAE;YAAE9B,UAAU,EAAEC;UAAS,CAAC;UAEtFqD,KAAK,CAACQ,GAAG,CAACoC,OAAO,CAAC,CAACxC,SAAS,GAAG,MAAM;YACnCqC,KAAK,CAAC,+BAA+B,CAAC;YACtC3F,aAAa,CAAC,IAAI,CAAC;YACnB2D,gBAAgB,CAAC,CAAC;UACpB,CAAC;QACH,CAAC,MAAM;UACLgC,KAAK,CAAC,yBAAyB,CAAC;UAChCH,SAAS,CAAC,CAAC;QACb;MACF,CAAC;IACH;EACF,CAAC;EAEC,MAAMK,kBAAkB,GAAInG,QAAgB,IAAK;IAC/C,IAAIS,EAAE,EAAE;MACN,MAAM8C,WAAW,GAAG9C,EAAE,CAAC8C,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;MACxD,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;MAC9C,MAAMC,cAAc,GAAGF,KAAK,CAACG,GAAG,CAAC3D,QAAQ,CAAC;MAE1C0D,cAAc,CAACE,SAAS,GAAG,MAAM;QAC/B,MAAM8B,IAAI,GAAGhC,cAAc,CAACI,MAAM;QAElC,IAAI4B,IAAI,EAAE;UACRA,IAAI,CAACxF,UAAU,GAAG,KAAK,CAAC,CAAC;;UAEzB,MAAM6D,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAAC0B,IAAI,CAAC;UAErC3B,aAAa,CAACH,SAAS,GAAG,MAAM;YAC9BK,gBAAgB,CAAC,CAAC,CAAC,CAAC;UACtB,CAAC;UAEDF,aAAa,CAACG,OAAO,GAAIjB,KAAK,IAAK;YACjCpB,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEmB,KAAK,CAAC;UACjD,CAAC;QACH;MACF,CAAC;MAEDM,WAAW,CAACW,OAAO,GAAIjB,KAAK,IAAK;QAC/BpB,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEmB,KAAK,CAAC;MACzD,CAAC;IACH;EACF,CAAC;EAED,MAAMoD,aAAa,GAAIrG,QAAgB,IAAK;IAC1C,IAAIS,EAAE,EAAE;MACJ,MAAM8C,WAAW,GAAG9C,EAAE,CAAC8C,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;MACxD,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;MAE9C,IAAIqB,MAAM,CAACwB,OAAO,CAAC,qEAAqE,CAAC,EAAE;QACvF,MAAMC,UAAU,GAAG/C,KAAK,CAACG,GAAG,CAAC3D,QAAQ,CAAC;QAEtCuG,UAAU,CAAC3C,SAAS,GAAG,MAAM;UACzB,MAAM4C,WAAW,GAAGD,UAAU,CAACzC,MAAM;UAErC,IAAI0C,WAAW,IAAIA,WAAW,CAACtG,UAAU,EAAE;YACvCiG,kBAAkB,CAACnG,QAAQ,CAAC,CAAC,CAAC;UAClC;UAEA,MAAMyG,aAAa,GAAGjD,KAAK,CAACkD,MAAM,CAAC1G,QAAQ,CAAC;UAE5CyG,aAAa,CAAC7C,SAAS,GAAG,MAAM;YAC5B7D,WAAW,CAAC;cAAEC,QAAQ,EAAE,EAAE;cAAEC,QAAQ,EAAE,EAAE;cAAEC,UAAU,EAAE;YAAM,CAAC,CAAC,CAAC,CAAC;YAChEyG,YAAY,CAAC,CAAC;YACdb,SAAS,CAAC,CAAC;UACf,CAAC;UAEDW,aAAa,CAACvC,OAAO,GAAG,MAAM;YAC1BrC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;UAC3C,CAAC;QACL,CAAC;QAEDyE,UAAU,CAACrC,OAAO,GAAG,MAAM;UACvBrC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;QAC3C,CAAC;MACL;IACJ;EACJ,CAAC;EAED,MAAMmC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIxD,EAAE,EAAE;MACJ,MAAM8C,WAAW,GAAG9C,EAAE,CAAC8C,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;MACvD,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;MAC9C,MAAMsB,OAAO,GAAGvB,KAAK,CAAC8B,MAAM,CAAC,CAAC;MAE9BP,OAAO,CAACnB,SAAS,GAAG,MAAM;QACtB,MAAM4B,kBAAkB,GAAGT,OAAO,CAACjB,MAAM,CAAC2B,MAAM,CAACmB,OAAO,IAAIA,OAAO,CAAC1G,UAAU,CAAC,CAAC,CAAC;QACjFU,WAAW,CAAC4E,kBAAkB,CAAC;QAE/B,IAAIA,kBAAkB,CAACqB,MAAM,GAAG,CAAC,EAAE;UAC/B,MAAMD,OAAO,GAAGpB,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;UACvC,MAAMd,iBAAiB,GAAGjC,eAAe,CAACmE,OAAO,CAAC3G,QAAQ,EAAE2G,OAAO,CAAC5E,EAAE,CAAC;UACvEjC,WAAW,CAAC;YACRC,QAAQ,EAAE4G,OAAO,CAAC5G,QAAQ;YAC1BC,QAAQ,EAAEyE,iBAAiB;YAC3BxE,UAAU,EAAE0G,OAAO,CAAC1G;UACxB,CAAC,CAAC;UACFY,SAAS,CAAC8F,OAAO,CAAC5G,QAAQ,CAAC;QAC/B,CAAC,MAED;UACE8F,SAAS,CAAC,CAAC;QACb;MACJ,CAAC;IACL;EACF,CAAC;EAEC,MAAMgB,UAAU,GAAGA,CAAA,KAAM;IAAE;IACzBjH,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAED,MAAMkG,SAAS,GAAGA,CAAA,KAAM;IAAK;IAC3B/F,WAAW,CAAC;MAAEC,QAAQ,EAAE,EAAE;MAAEC,QAAQ,EAAE,EAAE;MAAEC,UAAU,EAAE;IAAM,CAAC,CAAC;IAC9DE,WAAW,CAAC,IAAI,CAAC;EACrB,CAAC;EAEC,MAAM2G,YAAY,GAAI9D,KAA0C,IAAK;IACnE,MAAM;MAAE+D,IAAI;MAAE5D,KAAK;MAAE6D,IAAI;MAAEC;IAAQ,CAAC,GAAGjE,KAAK,CAACE,MAAM;IACnDpD,WAAW,CAAEoH,QAAQ,KAAM;MACzB,GAAGA,QAAQ;MACX,CAACH,IAAI,GAAGC,IAAI,KAAK,UAAU,GAAGC,OAAO,GAAG9D,KAAK,CAAE;IACjD,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMuD,YAAY,GAAGA,CAAA,KAAM;IACzBrG,aAAa,CAAC,KAAK,CAAC;IACpBT,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAEC,MAAMuH,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,gBAAgB,GAAG,CAAClH,QAAQ,CAAC,CAAC;IACpCC,WAAW,CAACiH,gBAAgB,CAAC;EAC/B,CAAC;EAED,MAAMC,QAAQ,GAAIC,KAAa,IAAK;IAClC/G,YAAY,CAAC+G,KAAK,CAAC;IACnB,IAAIA,KAAK,KAAK,gBAAgB,EAAE;MAC9BzB,SAAS,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,MACI,IAAGyB,KAAK,KAAK,QAAQ,EAC1B;MACEnH,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IACrB;IACA0G,UAAU,CAAC,CAAC;EACd,CAAC;EAED,oBACErH,OAAA;IAAA+H,QAAA,GACGnH,UAAU,gBACTZ,OAAA;MAAA+H,QAAA,gBACE/H,OAAA;QACEgI,GAAG,EAAEpI,MAAO,CAAC;QAAA;QACbqI,GAAG,EAAC,kBAAkB;QACtBC,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAU,CAAE;QAC3EC,OAAO,EAAEA,CAAA,KAAMV,QAAQ,CAAC,gBAAgB,CAAE;QAC1CC,KAAK,EAAEzH,QAAQ,CAACE,QAAQ,IAAI,gBAAiB,CAAC;MAAA;QAAAiI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACF3I,OAAA;QAAA+H,QAAA,gBACE/H,OAAA,CAACF,MAAM;UACLoI,KAAK,EAAE;YAAEC,KAAK,EAAE,MAAM;YAAES,SAAS,EAAE,MAAM;YAAEC,YAAY,EAAE,MAAM;YAAEC,eAAe,EAAE;UAAS,CAAE;UAC7FP,OAAO,EAAErB,YAAa;UAAAa,QAAA,EACvB;QAED;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAET3I,OAAA,CAACF,MAAM;UACLyI,OAAO,EAAEA,CAAA,KAAM3B,aAAa,CAACvG,QAAQ,CAACE,QAAQ,CAAE;UAChD2H,KAAK,EAAE;YACLC,KAAK,EAAE,MAAM;YACbS,SAAS,EAAE,MAAM;YACjBC,YAAY,EAAE,MAAM;YACpBC,eAAe,EAAE;UACnB,CAAE;UAAAf,QAAA,EACH;QAED;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAEN3I,OAAA;MAAA+H,QAAA,gBACE/H,OAAA;QACEgI,GAAG,EAAErI,WAAY;QACjBsI,GAAG,EAAC,cAAc;QAClBC,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAU,CAAE;QAC3EC,OAAO,EAAEA,CAAA,KAAMV,QAAQ,CAAC,gBAAgB,CAAE;QAC1CC,KAAK,EAAC,OAAO,CAAC;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,eACF3I,OAAA,CAACF,MAAM;QACLoI,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAES,SAAS,EAAE,MAAM;UAAEC,YAAY,EAAE,MAAM;UAAEC,eAAe,EAAE;QAAW,CAAE;QAC/FP,OAAO,EAAEA,CAAA,KAAMV,QAAQ,CAAC,QAAQ,CAAE;QAAAE,QAAA,EACnC;MAED;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,EAEAxI,UAAU,IAAI,CAACS,UAAU,iBACxBZ,OAAA,CAACH,SAAS;MACRQ,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzBI,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzBgH,cAAc,EAAEA,cAAe;MAC/BrB,YAAY,EAAEA,YAAa;MAC3BgB,YAAY,EAAEA,YAAa;MAC3BlG,YAAY,EAAEA,YAAa;MAC3BC,SAAS,EAAEA,SAAU;MACrBH,QAAQ,EAAEA,QAAS;MACnB6H,SAAS,EAAE1B,UAAW;MACtBvG,SAAS,EAAEA,SAAU;MACrBC,YAAY,EAAEA,YAAa;MAC3BiC,eAAe,EAAIA,eAAgB;MACnC1B,mBAAmB,EAAIA,mBAAoB;MAC3CC,cAAc,EAAEA,cAAe;MAC/BK,eAAe,EAAIA,eAAgB;MACnCC,kBAAkB,EAAEA,kBAAmB;MACvCL,WAAW,EAAIA,WAAY;MAC3B+B,cAAc,EAAIA,cAAe;MACjC7B,cAAc,EAAIA,cAAe;MACjCC,SAAS,EAAIA,SAAU;MACvB+C,gBAAgB,EAAIA;IAAiB;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CACF,eACD3I,OAAA;MAAGgJ,IAAI,EAAC,2CAA2C;MAACd,KAAK,EAAE;QAAEe,KAAK,EAAE;MAAQ,CAAE;MAAAlB,QAAA,eAC5E/H,OAAA;QAAA+H,QAAA,EAAI;MAAe;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AACP,CAAC;AAACzI,EAAA,CAhaQD,QAAkB;AAAAiJ,EAAA,GAAlBjJ,QAAkB;AAAA,IAAAiJ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}