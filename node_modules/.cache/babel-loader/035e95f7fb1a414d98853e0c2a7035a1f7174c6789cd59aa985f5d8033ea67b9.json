{"ast":null,"code":"import{useState}from\"react\";import{getChatGptResponse}from\"./chatGpt\";import{Button}from\"react-bootstrap\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";// Function that takes in an API key (entered on homepage) and an array of key:value paired answers (provided by basic quiz), then\n// places the answers into a prompt. Prompt is sent to chatGPT and first response is returned.\nexport function GptResponse(_ref){let{apiKey,taggedAnswers}=_ref;const[message,setMessage]=useState(\"Default\");const[isLoading,setIsLoading]=useState(false);const generatePrompt=taggedAnswers=>{//Helper function that takes in the array of key:value paired answers and replaces each key in prompt template with the correlated value.\nconst tagsMap={};taggedAnswers.forEach(_ref2=>{let{answer,tag}=_ref2;tagsMap[tag]=answer;});const basicPromptTemplate=\"\\n    I am an individual searching for a career path. Some important things to consider are that I would prefer to work in a {environment} type of environment, interacting with others {interaction}. \\n    I prefer {noise} noise in my work environment, and I believe that communication is {communication}. \\n    I am educated with a {education} and ideally I would like to make {salary} annually. \\n    Lastly, I am {techComfort} with technology, I am {manualLabor} comfortable with manual labor, and I am interested in {STEM} when it comes to STEM.\\n    What would be some ideal career paths for me and why? Give me 5 careers including career name, salary, how to get started, and why it would appeal to me based on my responses.\\n    \";return basicPromptTemplate.replace(/{(.*?)}/g,(match,tag)=>{//Returns above template with user's answers in place of placeholders.\nreturn tagsMap[tag]||match;});};const handleSendMessage=async()=>{//Handles sending and receiving response from chatGPT\nsetIsLoading(true);try{const prompt=generatePrompt(taggedAnswers);// Generate prompt\nconst data=await getChatGptResponse(prompt,apiKey);// Send prompt to ChatGPT\nconst formattedResponse=formatResponse(data.choices[0].message.content);// Format response\nsetMessage(formattedResponse);// Set the formatted response from ChatGPT\n}catch(error){console.error(\"Error getting response from ChatGPT:\",error);//Error handling\n}finally{setIsLoading(false);//Set loading state to false\n}};const formatResponse=response=>{//Helper function to format ChatGPT response. Removes asterisks and adds line breaks for readability.\n//Remove asterisks\nconst boldText=response.replace(/\\*(.*?)\\*/g,(match,p1)=>{return\"\";});//Add double line break after each item\nconst formattedResponse=boldText.replace(/(\\d+\\.)/g,match=>{return\"<br /><br />\".concat(match);});//Add line breaks after each highlight (salary, how to start, why)\nconst fullyFormatted=formattedResponse.replace(/( - S| - H| - W)/g,match=>{return\"<br />\".concat(match);});return fullyFormatted;};return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center',justifyContent:'center',textAlign:'center'},children:[/*#__PURE__*/_jsxs(Button,{onClick:handleSendMessage,disabled:isLoading,style:{marginBottom:'20px',background:\"#DDA15E\",border:\"3px\",borderColor:\"#bc6c25\",borderStyle:\"solid\"},children:[\"GPT Test: \",isLoading?\"loading\":\"send\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Results:\"}),/*#__PURE__*/_jsx(\"div\",{dangerouslySetInnerHTML:{__html:message}})]})]});}","map":{"version":3,"names":["useState","getChatGptResponse","Button","jsxs","_jsxs","jsx","_jsx","GptResponse","_ref","apiKey","taggedAnswers","message","setMessage","isLoading","setIsLoading","generatePrompt","tagsMap","forEach","_ref2","answer","tag","basicPromptTemplate","replace","match","handleSendMessage","prompt","data","formattedResponse","formatResponse","choices","content","error","console","response","boldText","p1","concat","fullyFormatted","style","display","flexDirection","alignItems","justifyContent","textAlign","children","onClick","disabled","marginBottom","background","border","borderColor","borderStyle","dangerouslySetInnerHTML","__html"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/gptResponse.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { getChatGptResponse } from \"./chatGpt\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\ninterface taggedAnswer { //Interface to provide an array of key:value pairs for user's answers\r\n  answer: string;\r\n  tag: string;\r\n}\r\n\r\n\r\n// Function that takes in an API key (entered on homepage) and an array of key:value paired answers (provided by basic quiz), then\r\n// places the answers into a prompt. Prompt is sent to chatGPT and first response is returned.\r\nexport function GptResponse({ apiKey, taggedAnswers }: { apiKey: string, taggedAnswers: taggedAnswer[] }): JSX.Element {\r\n  const [message, setMessage] = useState<string>(\"Default\");\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  const generatePrompt = (taggedAnswers: taggedAnswer[]): string => { //Helper function that takes in the array of key:value paired answers and replaces each key in prompt template with the correlated value.\r\n    const tagsMap: { [key: string]: string } = {};\r\n    taggedAnswers.forEach(({ answer, tag }) => {\r\n      tagsMap[tag] = answer;\r\n    });\r\n\r\n    const basicPromptTemplate = `\r\n    I am an individual searching for a career path. Some important things to consider are that I would prefer to work in a {environment} type of environment, interacting with others {interaction}. \r\n    I prefer {noise} noise in my work environment, and I believe that communication is {communication}. \r\n    I am educated with a {education} and ideally I would like to make {salary} annually. \r\n    Lastly, I am {techComfort} with technology, I am {manualLabor} comfortable with manual labor, and I am interested in {STEM} when it comes to STEM.\r\n    What would be some ideal career paths for me and why? Give me 5 careers including career name, salary, how to get started, and why it would appeal to me based on my responses.\r\n    `;\r\n\r\n    return basicPromptTemplate.replace(/{(.*?)}/g, (match, tag) => { //Returns above template with user's answers in place of placeholders.\r\n      return tagsMap[tag] || match;\r\n    });\r\n  };\r\n\r\n  const handleSendMessage = async () => { //Handles sending and receiving response from chatGPT\r\n    setIsLoading(true);\r\n    try {\r\n      const prompt = generatePrompt(taggedAnswers); // Generate prompt\r\n      const data = await getChatGptResponse(prompt, apiKey); // Send prompt to ChatGPT\r\n      const formattedResponse = formatResponse(data.choices[0].message.content); // Format response\r\n      setMessage(formattedResponse); // Set the formatted response from ChatGPT\r\n    } catch (error) {\r\n      console.error(\"Error getting response from ChatGPT:\", error); //Error handling\r\n    } finally {\r\n      setIsLoading(false); //Set loading state to false\r\n    }\r\n  };\r\n\r\n  const formatResponse = (response: string): string => { //Helper function to format ChatGPT response. Removes asterisks and adds line breaks for readability.\r\n    //Remove asterisks\r\n    const boldText = response.replace(/\\*(.*?)\\*/g, (match, p1) => {\r\n      return ``;\r\n    });\r\n\r\n    //Add double line break after each item\r\n    const formattedResponse = boldText.replace(/(\\d+\\.)/g, (match) => {\r\n      return `<br /><br />${match}`;\r\n    });\r\n\r\n    //Add line breaks after each highlight (salary, how to start, why)\r\n    const fullyFormatted = formattedResponse.replace(/( - S| - H| - W)/g, (match) => {\r\n      return `<br />${match}`;\r\n    });\r\n\r\n    return fullyFormatted;\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', textAlign: 'center' }}>\r\n      <Button onClick={handleSendMessage} disabled={isLoading} style={{ marginBottom: '20px', background: \"#DDA15E\", border: \"3px\", borderColor: \"#bc6c25\", borderStyle: \"solid\" }}>\r\n        GPT Test: {isLoading ? \"loading\" : \"send\"}\r\n      </Button>\r\n      \r\n      <div>\r\n        <h2>Results:</h2>\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: message,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}