{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\gptResponse.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { getChatGptResponse } from \"./chatGpt\";\nimport { Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Function that takes in an API key (entered on homepage) and an array of key:value paired answers (provided by basic quiz), then\n// places the answers into a prompt. Prompt is sent to chatGPT and first response is returned.\nexport function GptResponse({\n  apiKey,\n  taggedAnswers\n}) {\n  _s();\n  const [message, setMessage] = useState(\"Default\");\n  const [isLoading, setIsLoading] = useState(false);\n  const generatePrompt = taggedAnswers => {\n    //Helper function that takes in the array of key:value paired answers and replaces each key in prompt template with the correlated value.\n    const tagsMap = {};\n    taggedAnswers.forEach(({\n      answer,\n      tag\n    }) => {\n      tagsMap[tag] = answer;\n    });\n    const basicPromptTemplate = `\n    I am an individual searching for a career path. Some important things to consider are that I would prefer to work in a {environment} type of environment, interacting with others {interaction}. \n    I prefer {noise} noise in my work environment, and I believe that communication is {communication}. \n    I am educated with a {education} and ideally I would like to make {salary} annually. \n    Lastly, I am {techComfort} with technology, I am {manualLabor} comfortable with manual labor, and I am interested in {STEM} when it comes to STEM.\n    What would be some ideal career paths for me and why? Give me 5 careers including career name, salary, how to get started, and why it would appeal to me based on my responses.\n    `;\n    return basicPromptTemplate.replace(/{(.*?)}/g, (match, tag) => {\n      //Returns above template with user's answers in place of placeholders.\n      return tagsMap[tag] || match;\n    });\n  };\n  const handleSendMessage = async () => {\n    //Handles sending and receiving response from chatGPT\n    setIsLoading(true);\n    try {\n      const prompt = generatePrompt(taggedAnswers); // Generate prompt\n      const data = await getChatGptResponse(prompt, apiKey); // Send prompt to ChatGPT\n      const formattedResponse = formatResponse(data.choices[0].message.content); // Format response\n      setMessage(formattedResponse); // Set the formatted response from ChatGPT\n    } catch (error) {\n      console.error(\"Error getting response from ChatGPT:\", error); //Error handling\n    } finally {\n      setIsLoading(false); //Set loading state to false\n    }\n  };\n  const formatResponse = response => {\n    //Helper function to format ChatGPT response. Removes asterisks and adds line breaks for readability.\n    //Remove asterisks\n    const boldText = response.replace(/\\*(.*?)\\*/g, (match, p1) => {\n      return ``;\n    });\n\n    //Add double line break after each item\n    const formattedResponse = boldText.replace(/(\\d+\\.)/g, match => {\n      return `<br /><br />${match}`;\n    });\n\n    //Add line breaks after each highlight (salary, how to start, why)\n    const fullyFormatted = formattedResponse.replace(/( - S| - H| - W)/g, match => {\n      return `<br />${match}`;\n    });\n    return fullyFormatted;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSendMessage,\n      disabled: isLoading,\n      style: {\n        marginBottom: '20px',\n        background: \"#DDA15E\",\n        border: \"3px\",\n        borderColor: \"#bc6c25\",\n        borderStyle: \"solid\"\n      },\n      children: [\"GPT Test: \", isLoading ? \"loading\" : \"send\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: message\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(GptResponse, \"XQHrm6NU5hQT17sGiPiB1I6acMo=\");\n_c = GptResponse;\nvar _c;\n$RefreshReg$(_c, \"GptResponse\");","map":{"version":3,"names":["useState","getChatGptResponse","Button","jsxDEV","_jsxDEV","GptResponse","apiKey","taggedAnswers","_s","message","setMessage","isLoading","setIsLoading","generatePrompt","tagsMap","forEach","answer","tag","basicPromptTemplate","replace","match","handleSendMessage","prompt","data","formattedResponse","formatResponse","choices","content","error","console","response","boldText","p1","fullyFormatted","style","display","flexDirection","alignItems","justifyContent","textAlign","children","onClick","disabled","marginBottom","background","border","borderColor","borderStyle","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/gptResponse.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { getChatGptResponse } from \"./chatGpt\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\ninterface taggedAnswer { //Interface to provide an array of key:value pairs for user's answers\r\n  answer: string;\r\n  tag: string;\r\n}\r\n\r\n\r\n// Function that takes in an API key (entered on homepage) and an array of key:value paired answers (provided by basic quiz), then\r\n// places the answers into a prompt. Prompt is sent to chatGPT and first response is returned.\r\nexport function GptResponse({ apiKey, taggedAnswers }: { apiKey: string, taggedAnswers: taggedAnswer[] }): JSX.Element {\r\n  const [message, setMessage] = useState<string>(\"Default\");\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  const generatePrompt = (taggedAnswers: taggedAnswer[]): string => { //Helper function that takes in the array of key:value paired answers and replaces each key in prompt template with the correlated value.\r\n    const tagsMap: { [key: string]: string } = {};\r\n    taggedAnswers.forEach(({ answer, tag }) => {\r\n      tagsMap[tag] = answer;\r\n    });\r\n\r\n    const basicPromptTemplate = `\r\n    I am an individual searching for a career path. Some important things to consider are that I would prefer to work in a {environment} type of environment, interacting with others {interaction}. \r\n    I prefer {noise} noise in my work environment, and I believe that communication is {communication}. \r\n    I am educated with a {education} and ideally I would like to make {salary} annually. \r\n    Lastly, I am {techComfort} with technology, I am {manualLabor} comfortable with manual labor, and I am interested in {STEM} when it comes to STEM.\r\n    What would be some ideal career paths for me and why? Give me 5 careers including career name, salary, how to get started, and why it would appeal to me based on my responses.\r\n    `;\r\n\r\n    return basicPromptTemplate.replace(/{(.*?)}/g, (match, tag) => { //Returns above template with user's answers in place of placeholders.\r\n      return tagsMap[tag] || match;\r\n    });\r\n  };\r\n\r\n  const handleSendMessage = async () => { //Handles sending and receiving response from chatGPT\r\n    setIsLoading(true);\r\n    try {\r\n      const prompt = generatePrompt(taggedAnswers); // Generate prompt\r\n      const data = await getChatGptResponse(prompt, apiKey); // Send prompt to ChatGPT\r\n      const formattedResponse = formatResponse(data.choices[0].message.content); // Format response\r\n      setMessage(formattedResponse); // Set the formatted response from ChatGPT\r\n    } catch (error) {\r\n      console.error(\"Error getting response from ChatGPT:\", error); //Error handling\r\n    } finally {\r\n      setIsLoading(false); //Set loading state to false\r\n    }\r\n  };\r\n\r\n  const formatResponse = (response: string): string => { //Helper function to format ChatGPT response. Removes asterisks and adds line breaks for readability.\r\n    //Remove asterisks\r\n    const boldText = response.replace(/\\*(.*?)\\*/g, (match, p1) => {\r\n      return ``;\r\n    });\r\n\r\n    //Add double line break after each item\r\n    const formattedResponse = boldText.replace(/(\\d+\\.)/g, (match) => {\r\n      return `<br /><br />${match}`;\r\n    });\r\n\r\n    //Add line breaks after each highlight (salary, how to start, why)\r\n    const fullyFormatted = formattedResponse.replace(/( - S| - H| - W)/g, (match) => {\r\n      return `<br />${match}`;\r\n    });\r\n\r\n    return fullyFormatted;\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', textAlign: 'center' }}>\r\n      <Button onClick={handleSendMessage} disabled={isLoading} style={{ marginBottom: '20px', background: \"#DDA15E\", border: \"3px\", borderColor: \"#bc6c25\", borderStyle: \"solid\" }}>\r\n        GPT Test: {isLoading ? \"loading\" : \"send\"}\r\n      </Button>\r\n      \r\n      <div>\r\n        <h2>Results:</h2>\r\n        <div\r\n          dangerouslySetInnerHTML={{\r\n            __html: message,\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,kBAAkB,QAAQ,WAAW;AAC9C,SAASC,MAAM,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQzC;AACA;AACA,OAAO,SAASC,WAAWA,CAAC;EAAEC,MAAM;EAAEC;AAAiE,CAAC,EAAe;EAAAC,EAAA;EACrH,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAS,SAAS,CAAC;EACzD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAU,KAAK,CAAC;EAE1D,MAAMa,cAAc,GAAIN,aAA6B,IAAa;IAAE;IAClE,MAAMO,OAAkC,GAAG,CAAC,CAAC;IAC7CP,aAAa,CAACQ,OAAO,CAAC,CAAC;MAAEC,MAAM;MAAEC;IAAI,CAAC,KAAK;MACzCH,OAAO,CAACG,GAAG,CAAC,GAAGD,MAAM;IACvB,CAAC,CAAC;IAEF,MAAME,mBAAmB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,OAAOA,mBAAmB,CAACC,OAAO,CAAC,UAAU,EAAE,CAACC,KAAK,EAAEH,GAAG,KAAK;MAAE;MAC/D,OAAOH,OAAO,CAACG,GAAG,CAAC,IAAIG,KAAK;IAC9B,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAAE;IACtCT,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMU,MAAM,GAAGT,cAAc,CAACN,aAAa,CAAC,CAAC,CAAC;MAC9C,MAAMgB,IAAI,GAAG,MAAMtB,kBAAkB,CAACqB,MAAM,EAAEhB,MAAM,CAAC,CAAC,CAAC;MACvD,MAAMkB,iBAAiB,GAAGC,cAAc,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACjB,OAAO,CAACkB,OAAO,CAAC,CAAC,CAAC;MAC3EjB,UAAU,CAACc,iBAAiB,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC,CAAC,CAAC;IAChE,CAAC,SAAS;MACRhB,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;EAED,MAAMa,cAAc,GAAIK,QAAgB,IAAa;IAAE;IACrD;IACA,MAAMC,QAAQ,GAAGD,QAAQ,CAACX,OAAO,CAAC,YAAY,EAAE,CAACC,KAAK,EAAEY,EAAE,KAAK;MAC7D,OAAQ,EAAC;IACX,CAAC,CAAC;;IAEF;IACA,MAAMR,iBAAiB,GAAGO,QAAQ,CAACZ,OAAO,CAAC,UAAU,EAAGC,KAAK,IAAK;MAChE,OAAQ,eAAcA,KAAM,EAAC;IAC/B,CAAC,CAAC;;IAEF;IACA,MAAMa,cAAc,GAAGT,iBAAiB,CAACL,OAAO,CAAC,mBAAmB,EAAGC,KAAK,IAAK;MAC/E,OAAQ,SAAQA,KAAM,EAAC;IACzB,CAAC,CAAC;IAEF,OAAOa,cAAc;EACvB,CAAC;EAED,oBACE7B,OAAA;IAAK8B,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,UAAU,EAAE,QAAQ;MAAEC,cAAc,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAC5HpC,OAAA,CAACF,MAAM;MAACuC,OAAO,EAAEpB,iBAAkB;MAACqB,QAAQ,EAAE/B,SAAU;MAACuB,KAAK,EAAE;QAAES,YAAY,EAAE,MAAM;QAAEC,UAAU,EAAE,SAAS;QAAEC,MAAM,EAAE,KAAK;QAAEC,WAAW,EAAE,SAAS;QAAEC,WAAW,EAAE;MAAQ,CAAE;MAAAP,QAAA,GAAC,YAClK,EAAC7B,SAAS,GAAG,SAAS,GAAG,MAAM;IAAA;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eAET/C,OAAA;MAAAoC,QAAA,gBACEpC,OAAA;QAAAoC,QAAA,EAAI;MAAQ;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjB/C,OAAA;QACEgD,uBAAuB,EAAE;UACvBC,MAAM,EAAE5C;QACV;MAAE;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC3C,EAAA,CAxEeH,WAAW;AAAAiD,EAAA,GAAXjD,WAAW;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}