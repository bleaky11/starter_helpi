{"ast":null,"code":"// Taken from chatgpt and edited to allow for custom questions and apikey inputs\nimport axios from\"axios\";const API_URL='https://api.openai.com/v1/chat/completions';export const getChatGptResponse=async(message,apiKey)=>{try{const response=await axios.post(API_URL,{model:'gpt-4o',// or 'gpt-4o' depending on your access\nmessages:[{role:'user',content:message}],max_tokens:300},{headers:{'Content-Type':'application/json',Authorization:\"Bearer \".concat(apiKey)}});return response.data;}catch(error){if(axios.isAxiosError(error)){console.error('Error message:',error.message);if(error.response){console.error('Response data:',error.response.data);console.error('Response status:',error.response.status);console.error('Response headers:',error.response.headers);}}else{console.error('Unexpected error:',error);}throw error;}};","map":{"version":3,"names":["axios","API_URL","getChatGptResponse","message","apiKey","response","post","model","messages","role","content","max_tokens","headers","Authorization","concat","data","error","isAxiosError","console","status"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/chatGpt.ts"],"sourcesContent":["// Taken from chatgpt and edited to allow for custom questions and apikey inputs\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\r\n\r\nexport const getChatGptResponse = async (message: string, apiKey: string) => {\r\n  try {\r\n    const response = await axios.post(\r\n      API_URL,\r\n      {\r\n        model: 'gpt-4o', // or 'gpt-4o' depending on your access\r\n        messages: [{ role: 'user', content: message }],\r\n        max_tokens: 300\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      console.error('Error message:', error.message);\r\n      if (error.response) {\r\n        console.error('Response data:', error.response.data);\r\n        console.error('Response status:', error.response.status);\r\n        console.error('Response headers:', error.response.headers);\r\n      }\r\n    } else {\r\n      console.error('Unexpected error:', error);\r\n    }\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,OAAO,CAAG,4CAA4C,CAE5D,MAAO,MAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAOC,OAAe,CAAEC,MAAc,GAAK,CAC3E,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,IAAI,CAC/BL,OAAO,CACP,CACEM,KAAK,CAAE,QAAQ,CAAE;AACjBC,QAAQ,CAAE,CAAC,CAAEC,IAAI,CAAE,MAAM,CAAEC,OAAO,CAAEP,OAAQ,CAAC,CAAC,CAC9CQ,UAAU,CAAE,GACd,CAAC,CACD,CACEC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClCC,aAAa,WAAAC,MAAA,CAAYV,MAAM,CACjC,CACF,CACF,CAAC,CACD,MAAO,CAAAC,QAAQ,CAACU,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACd,GAAIhB,KAAK,CAACiB,YAAY,CAACD,KAAK,CAAC,CAAE,CAC7BE,OAAO,CAACF,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAACb,OAAO,CAAC,CAC9C,GAAIa,KAAK,CAACX,QAAQ,CAAE,CAClBa,OAAO,CAACF,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAACX,QAAQ,CAACU,IAAI,CAAC,CACpDG,OAAO,CAACF,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAACX,QAAQ,CAACc,MAAM,CAAC,CACxDD,OAAO,CAACF,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAACX,QAAQ,CAACO,OAAO,CAAC,CAC5D,CACF,CAAC,IAAM,CACLM,OAAO,CAACF,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAC3C,CACA,KAAM,CAAAA,KAAK,CACb,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}