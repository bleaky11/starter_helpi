{"ast":null,"code":"import{Form}from'react-bootstrap';import{useEffect}from'react';import'./LoginForm.css';import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const LoginForm=_ref=>{let{userInfo,setUserInfo,remember,setRemember,updateStatus,handleRemember,handleSubmit,closeForm,accounts,selectedUser,setSelect,formTitle,setFormTitle,decryptPassword,passwordPlaceholder,setPlaceholder,isPasswordReset,setIsPasswordReset,newPassword,updatePassword,calledUsername,setCalled,updateCalledUser}=_ref;useEffect(()=>{// displays saved credentials for dropdown for selected user\nif(formTitle===\"Log in\"&&selectedUser&&accounts.length>0){const selectedAccount=accounts.find(account=>account.username===selectedUser);// show saved user credentials if found\nif(selectedAccount){const decryptedPassword=decryptPassword(selectedAccount.password,selectedAccount.iv);if(userInfo.username!==selectedAccount.username||// compares old select to new selected user to update if needed\nuserInfo.password!==decryptedPassword||userInfo.remembered!==selectedAccount.remembered){var _selectedAccount$reme;setUserInfo({username:selectedAccount.username,password:decryptedPassword,remembered:(_selectedAccount$reme=selectedAccount.remembered)!==null&&_selectedAccount$reme!==void 0?_selectedAccount$reme:false});}}}},[formTitle,selectedUser,accounts,decryptPassword,setUserInfo,userInfo,remember]);const handleUserSelect=event=>{const selectedUsername=event.target.value;setSelect(selectedUsername);setCalled(selectedUsername);if(selectedUsername===\"\"){// reset to no saved user selected\nsetUserInfo({username:\"\",password:\"\",remembered:false});}else{const selectedAccount=accounts.find(account=>account.username===selectedUsername);if(selectedAccount){var _selectedAccount$reme2;const decryptedPassword=decryptPassword(selectedAccount.password,selectedAccount.iv);setUserInfo({username:selectedAccount.username,password:decryptedPassword,remembered:(_selectedAccount$reme2=selectedAccount.remembered)!==null&&_selectedAccount$reme2!==void 0?_selectedAccount$reme2:false});}}};const handleResetClick=()=>{// Handle reset password click\nsetIsPasswordReset(false);setFormTitle(\"Log in\");// go back to log in form to see change\nsetUserInfo(prevState=>({...prevState,password:\"\"}));alert(\"Password Reset!\");};const handlePasswordReset=()=>{// Switch to password reset view\nsetFormTitle(\"Reset Password\");setCalled(\"\");// reset blank username for input\nsetPlaceholder(\"\");// reset blank password for input\nsetIsPasswordReset(true);};return/*#__PURE__*/_jsx(\"div\",{className:\"form-popup\",id:\"myForm\",children:/*#__PURE__*/_jsxs(\"form\",{className:\"form-container\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"h1\",{children:formTitle}),/*#__PURE__*/_jsx(Form.Group,{controlId:\"savedUsers\",children:formTitle===\"Log in\"&&/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:\"25px\"},children:accounts.filter(account=>account.remembered&&account.username!=='Select a saved user').length===0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"No Saved Usernames\"}),/*#__PURE__*/_jsx(Form.Select,{value:\"\",disabled:true,children:/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"No saved usernames\"})})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Saved Usernames\"}),/*#__PURE__*/_jsxs(Form.Select,{value:selectedUser,onChange:handleUserSelect,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select a saved user\"}),\" \",accounts.filter(account=>account.remembered)// Show remembered accounts\n.map(user=>/*#__PURE__*/_jsx(\"option\",{value:user.username,children:user.username},user.username))]})]})})}),!isPasswordReset&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Username\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:userInfo.username,placeholder:\"Enter Username\",name:\"username\",onChange:updateStatus,required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Password\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:userInfo.password,placeholder:\"Enter Password\",name:\"password\",onChange:updateStatus,required:true}),formTitle===\"Log in\"&&/*#__PURE__*/_jsx(\"div\",{onClick:handlePasswordReset// Trigger password reset mode\n,style:{fontSize:\"12px\",marginBottom:\"10px\",cursor:\"pointer\",color:\"blue\",textDecoration:\"underline\"},tabIndex:0,role:\"button\",children:\"Forgot Password?\"})]}),/*#__PURE__*/_jsx(\"div\",{children:!isPasswordReset?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn\",children:\"Login\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center'},children:[/*#__PURE__*/_jsx(\"span\",{style:{marginRight:'8px'},children:\"Remember me?\"}),/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",id:\"save-user\",name:\"save-user\",checked:remember,onChange:handleRemember})]}),/*#__PURE__*/_jsx(\"button\",{style:{marginTop:'10px'},type:\"button\",className:\"btn cancel\",onClick:closeForm,children:\"Close\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'10px',marginBottom:'10px'},children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Usernames\"}),/*#__PURE__*/_jsx(Form.Select,{value:selectedUser,onChange:handleUserSelect,children:accounts.map(user=>/*#__PURE__*/_jsx(\"option\",{value:user.username,children:user.username},user.username))})]}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"resetUser\",children:/*#__PURE__*/_jsx(\"b\",{children:\"Username\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:calledUsername,placeholder:\"Enter Username\",onChange:updateCalledUser,required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"resetPassword\",children:/*#__PURE__*/_jsx(\"b\",{children:\"New Password\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:passwordPlaceholder,placeholder:\"Enter New Password\",onChange:updatePassword,required:true}),/*#__PURE__*/_jsx(\"button\",{disabled:calledUsername===\"\"||passwordPlaceholder===\"\",style:{marginTop:'10px'},type:\"button\",className:\"btn\",onClick:handleResetClick,children:\"Reset Password\"}),/*#__PURE__*/_jsx(\"button\",{style:{marginTop:'10px'},type:\"button\",className:\"btn cancel\",onClick:()=>closeForm(),children:\"Close\"})]})})]})});};","map":{"version":3,"names":["Form","useEffect","React","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","LoginForm","_ref","userInfo","setUserInfo","remember","setRemember","updateStatus","handleRemember","handleSubmit","closeForm","accounts","selectedUser","setSelect","formTitle","setFormTitle","decryptPassword","passwordPlaceholder","setPlaceholder","isPasswordReset","setIsPasswordReset","newPassword","updatePassword","calledUsername","setCalled","updateCalledUser","length","selectedAccount","find","account","username","decryptedPassword","password","iv","remembered","_selectedAccount$reme","handleUserSelect","event","selectedUsername","target","value","_selectedAccount$reme2","handleResetClick","prevState","alert","handlePasswordReset","className","id","children","onSubmit","Group","controlId","style","marginBottom","filter","Label","Select","disabled","onChange","map","user","htmlFor","type","placeholder","name","required","onClick","fontSize","cursor","color","textDecoration","tabIndex","role","display","alignItems","marginRight","Check","checked","marginTop"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/LoginForm.tsx"],"sourcesContent":["import { Form } from 'react-bootstrap';\r\nimport { useEffect } from 'react';\r\nimport './LoginForm.css';\r\nimport React from 'react';\r\n\r\nexport interface LoginFormProps {\r\n  closeForm: () => void;\r\n  userInfo: { username: string; password: string; remembered: boolean };\r\n  setUserInfo: (value: React.SetStateAction<{ username: string; password: string; remembered: boolean }>) => void;\r\n  remember: boolean;\r\n  setRemember: React.Dispatch<React.SetStateAction<boolean>>;\r\n  updateStatus: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleRemember: () => void;\r\n  handleSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\r\n  accounts: { username: string; password: string; remembered: boolean; iv: string }[];\r\n  selectedUser: string;\r\n  setSelect: (value: React.SetStateAction<string>) => void;\r\n  formTitle: string;\r\n  setFormTitle: React.Dispatch<React.SetStateAction<string>>;\r\n  decryptPassword: (encryptedPassword: string, iv: string) => string;\r\n  passwordPlaceholder: string;\r\n  setPlaceholder: React.Dispatch<React.SetStateAction<string>>;\r\n  isPasswordReset: boolean;\r\n  setIsPasswordReset: React.Dispatch<React.SetStateAction<boolean>>;\r\n  newPassword: string;\r\n  updatePassword: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  calledUsername: string;\r\n  setCalled: React.Dispatch<React.SetStateAction<string>>;\r\n  updateCalledUser: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const LoginForm: React.FC<LoginFormProps> = ({\r\n  userInfo,\r\n  setUserInfo,\r\n  remember,\r\n  setRemember,\r\n  updateStatus,\r\n  handleRemember,\r\n  handleSubmit,\r\n  closeForm,\r\n  accounts,\r\n  selectedUser,\r\n  setSelect,\r\n  formTitle,\r\n  setFormTitle,\r\n  decryptPassword,\r\n  passwordPlaceholder,\r\n  setPlaceholder,\r\n  isPasswordReset,\r\n  setIsPasswordReset,\r\n  newPassword,\r\n  updatePassword,\r\n  calledUsername,\r\n  setCalled,\r\n  updateCalledUser\r\n}) => {\r\n\r\n  useEffect(() => {  \r\n    // displays saved credentials for dropdown for selected user\r\n    if (formTitle === \"Log in\" && selectedUser && accounts.length > 0) {\r\n      const selectedAccount = accounts.find(account => account.username === selectedUser); // show saved user credentials if found\r\n      if (selectedAccount) {\r\n        const decryptedPassword = decryptPassword(selectedAccount.password, selectedAccount.iv);\r\n        if (\r\n          userInfo.username !== selectedAccount.username || // compares old select to new selected user to update if needed\r\n          userInfo.password !== decryptedPassword ||\r\n          userInfo.remembered !== selectedAccount.remembered\r\n        ) {\r\n          setUserInfo({ \r\n            username: selectedAccount.username,\r\n            password: decryptedPassword,\r\n            remembered: selectedAccount.remembered ?? false,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [formTitle, selectedUser, accounts, decryptPassword, setUserInfo, userInfo, remember]);  \r\n\r\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const selectedUsername = event.target.value;\r\n    setSelect(selectedUsername);\r\n    setCalled(selectedUsername);\r\n    if (selectedUsername === \"\") { // reset to no saved user selected\r\n      setUserInfo({\r\n        username: \"\",\r\n        password: \"\",\r\n        remembered: false,\r\n      });\r\n    } else {\r\n      const selectedAccount = accounts.find(account => account.username === selectedUsername);\r\n      if (selectedAccount) {\r\n        const decryptedPassword = decryptPassword(selectedAccount.password, selectedAccount.iv);\r\n        setUserInfo({\r\n          username: selectedAccount.username,\r\n          password: decryptedPassword,\r\n          remembered: selectedAccount.remembered ?? false,\r\n        });\r\n      }\r\n    }\r\n  };  \r\n\r\n  const handleResetClick = () => { // Handle reset password click\r\n    setIsPasswordReset(false);\r\n    setFormTitle(\"Log in\"); // go back to log in form to see change\r\n    setUserInfo(prevState => ({\r\n      ...prevState,\r\n      password: \"\"\r\n    }));\r\n    alert(\"Password Reset!\");\r\n  };\r\n\r\n  const handlePasswordReset = () => { // Switch to password reset view\r\n    setFormTitle(\"Reset Password\");\r\n    setCalled(\"\"); // reset blank username for input\r\n    setPlaceholder(\"\"); // reset blank password for input\r\n    setIsPasswordReset(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-popup\" id=\"myForm\">\r\n      <form className=\"form-container\" onSubmit={handleSubmit}>\r\n        <h1>{formTitle}</h1>\r\n        <Form.Group controlId=\"savedUsers\">\r\n  {formTitle === \"Log in\" && (  \r\n    <div style={{ marginBottom: \"25px\" }}>\r\n      {accounts.filter((account) => account.remembered && account.username !== 'Select a saved user').length === 0 ? (\r\n        <>\r\n          <Form.Label>No Saved Usernames</Form.Label>\r\n          <Form.Select value=\"\" disabled>\r\n            <option value=\"\">No saved usernames</option>\r\n          </Form.Select>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Form.Label>Saved Usernames</Form.Label>\r\n          <Form.Select value={selectedUser} onChange={handleUserSelect}>\r\n            <option value=\"\">Select a saved user</option> {/* Default placeholder */}\r\n            {accounts\r\n              .filter((account) => account.remembered) // Show remembered accounts\r\n              .map((user) => (\r\n                <option key={user.username} value={user.username}>\r\n                  {user.username}\r\n                </option>\r\n              ))}\r\n          </Form.Select>\r\n        </>\r\n      )}\r\n    </div>\r\n  )}\r\n    </Form.Group>\r\n        {!isPasswordReset && (\r\n          <>\r\n            <label htmlFor=\"username\"><b>Username</b></label>\r\n            <input\r\n              type=\"text\"\r\n              value={userInfo.username}\r\n              placeholder=\"Enter Username\"\r\n              name=\"username\"\r\n              onChange={updateStatus}\r\n              required\r\n            />\r\n\r\n            <label htmlFor=\"password\"><b>Password</b></label>\r\n            <input\r\n              type=\"password\"\r\n              value={userInfo.password}\r\n              placeholder=\"Enter Password\"\r\n              name=\"password\"\r\n              onChange={updateStatus}\r\n              required\r\n            />\r\n\r\n            {formTitle === \"Log in\" && (\r\n              <div\r\n                onClick={handlePasswordReset}  // Trigger password reset mode\r\n                style={{\r\n                  fontSize: \"12px\",\r\n                  marginBottom: \"10px\",\r\n                  cursor: \"pointer\",\r\n                  color: \"blue\",\r\n                  textDecoration: \"underline\"\r\n                }}\r\n                tabIndex={0}\r\n                role=\"button\"\r\n              >\r\n                Forgot Password?\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        <div>\r\n          {!isPasswordReset ? (\r\n            <>\r\n              <button type=\"submit\" className=\"btn\">Login</button>\r\n              <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <span style={{ marginRight: '8px' }}>Remember me?</span>\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  id=\"save-user\"\r\n                  name=\"save-user\"\r\n                  checked={remember}\r\n                  onChange={handleRemember}\r\n                />\r\n              </div>\r\n              <button\r\n                style={{ marginTop: '10px' }}\r\n                type=\"button\"\r\n                className=\"btn cancel\"\r\n                onClick={closeForm}\r\n              >\r\n                Close\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n            <div style = {{marginTop: '10px', marginBottom: '10px'}}>\r\n            <Form.Label>Usernames</Form.Label>\r\n            <Form.Select value={selectedUser} onChange={handleUserSelect}>\r\n              {accounts.map((user) => (\r\n                <option key={user.username} value={user.username}>\r\n                  {user.username}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n            </div>\r\n\r\n          <label htmlFor=\"resetUser\"><b>Username</b></label>\r\n          <input\r\n            type=\"text\"\r\n            value={calledUsername}  \r\n            placeholder=\"Enter Username\"\r\n            onChange={updateCalledUser}\r\n            required\r\n          />\r\n\r\n          <label htmlFor=\"resetPassword\"><b>New Password</b></label>\r\n          <input\r\n            type=\"password\"\r\n            value={passwordPlaceholder}  \r\n            placeholder=\"Enter New Password\"\r\n            onChange={updatePassword}\r\n            required\r\n          />\r\n\r\n          <button\r\n            disabled={calledUsername === \"\" || passwordPlaceholder === \"\"}\r\n            style={{ marginTop: '10px' }}\r\n            type=\"button\"\r\n            className=\"btn\"\r\n            onClick={handleResetClick}\r\n          >\r\n            Reset Password\r\n          </button>\r\n\r\n          <button\r\n                style={{ marginTop: '10px'}}\r\n                type=\"button\"\r\n                className=\"btn cancel\"\r\n                onClick={() => closeForm()}  \r\n              >\r\n                Close\r\n          </button>\r\n          </>\r\n                )}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        );\r\n      };\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}