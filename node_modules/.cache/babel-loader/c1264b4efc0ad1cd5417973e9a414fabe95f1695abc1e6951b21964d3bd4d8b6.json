{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\nimport { LoginForm } from './LoginForm';\nimport { Button, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\",\n    remembered: true\n  });\n  const [remember, setRemember] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [selectedUser, setSelect] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const CryptoJS = require(\"crypto-js\");\n  const secretKey = process.env.REACT_APP_SECRET_KEY;\n  useEffect(() => {\n    if (!secretKey) {\n      console.error(\"Missing secret key in environment variables\");\n    }\n  }, [secretKey]);\n  const encryptPassword = password => {\n    if (!secretKey) {\n      throw new Error(\"Secret key is missing. Please check environment variables.\");\n    }\n    const iv = CryptoJS.lib.WordArray.random(16);\n    const encrypted = CryptoJS.AES.encrypt(password, CryptoJS.enc.Hex.parse(secretKey), {\n      iv\n    });\n    return {\n      encryptedPassword: encrypted.toString(),\n      iv: iv.toString(CryptoJS.enc.Hex)\n    };\n  };\n  const decryptPassword = (encryptedPassword, iv) => {\n    if (!secretKey) {\n      throw new Error(\"Secret key is missing. Please check environment variables.\");\n    }\n    const ivWordArray = CryptoJS.enc.Hex.parse(iv);\n    const bytes = CryptoJS.AES.decrypt(encryptedPassword, CryptoJS.enc.Hex.parse(secretKey), {\n      iv: ivWordArray\n    });\n    return bytes.toString(CryptoJS.enc.Utf8);\n  };\n  function updatePassword(event) {\n    setNewPassword(event.target.value);\n  }\n  function resetPassword() {\n    setIsFormOpen(false); // Close the form\n    setUserInfo({\n      ...userInfo,\n      password: newPassword\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"passwordReset\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          value: newPassword,\n          onChange: updatePassword,\n          placeholder: \"Enter password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this);\n  }\n  const checkInfo = (savedUsername, savedEncryptedPassword, savedIV, userInput, passInput) => {\n    if (userInput === savedUsername) {\n      try {\n        const decryptedPassword = decryptPassword(savedEncryptedPassword, savedIV);\n        console.log(\"Decrypted Password:\", decryptedPassword);\n        console.log(\"User Input Password:\", passInput);\n        if (decryptedPassword.trim() === passInput.trim()) {\n          console.log(\"Login successful\");\n          return true;\n        } else {\n          console.log(\"Incorrect password\");\n          return false;\n        }\n      } catch (error) {\n        console.error(\"Error decrypting password:\", error);\n        return false; // Return false if decryption fails\n      }\n    } else {\n      console.log(\"Incorrect username\");\n      return false;\n    }\n  };\n  useEffect(() => {\n    const initializeDatabase = async () => {\n      const indexedDB = window.indexedDB;\n      const request = indexedDB.open(\"UserDatabase\", 2);\n      request.onerror = event => {\n        console.error(\"Error opening user database!\", event);\n      };\n      request.onupgradeneeded = event => {\n        const dbInstance = event.target.result;\n        dbInstance.createObjectStore(\"users\", {\n          keyPath: \"username\"\n        });\n      };\n      request.onsuccess = () => {\n        const dbInstance = request.result;\n        if (dbInstance) {\n          setDb(dbInstance);\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\n          const store = transaction.objectStore(\"users\");\n          const getAllRequest = store.getAll();\n          getAllRequest.onsuccess = () => {\n            const allUsers = getAllRequest.result;\n            const rememberedAccounts = allUsers.filter(user => user.remembered);\n            setAccounts(rememberedAccounts);\n            if (localStorage.getItem(\"homeVisit\") && rememberedAccounts.length > 0) {\n              const firstAccount = rememberedAccounts[0];\n              const getRequest = store.get(firstAccount.username);\n              getRequest.onsuccess = () => {\n                const rememberedUser = getRequest.result;\n                if (rememberedUser) {\n                  setUserInfo({\n                    username: rememberedUser.username,\n                    password: rememberedUser.password,\n                    remembered: true\n                  });\n                  setSelect(rememberedUser.username);\n                }\n              };\n            } else {\n              if (!localStorage.getItem(\"homeVisit\")) {\n                localStorage.setItem(\"homeVisit\", \"true\");\n              }\n            }\n          };\n        }\n      };\n    };\n    initializeDatabase();\n  }, []);\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!userInfo.username || !userInfo.password) {\n      alert(\"Username and password are required.\");\n      return;\n    }\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const userQuery = store.get(userInfo.username);\n      userQuery.onsuccess = () => {\n        const existingUser = userQuery.result;\n        if (existingUser) {\n          if (formTitle === \"Log in\") {\n            const {\n              username,\n              password: encryptedPassword,\n              iv,\n              remembered\n            } = existingUser;\n\n            // Call checkInfo to verify the username and decrypted password\n            if (checkInfo(username, encryptedPassword, iv, userInfo.username, userInfo.password)) {\n              setIsLoggedIn(true);\n\n              // Update the remembered status if necessary\n              if (remember !== remembered) {\n                existingUser.remembered = remember;\n                const updateRequest = store.put(existingUser);\n                updateRequest.onsuccess = () => {\n                  updateSavedUsers();\n                };\n              } else {\n                updateSavedUsers();\n              }\n              if (!remember) {\n                removeFromDropdown(userInfo.username);\n              }\n            } else {\n              alert(\"Incorrect username or password.\");\n            }\n          } else {\n            alert(\"Account already exists. Please log in.\");\n            clearForm();\n          }\n        } else if (formTitle === \"Create Account\") {\n          const {\n            encryptedPassword,\n            iv\n          } = encryptPassword(userInfo.password);\n          const newUser = {\n            ...userInfo,\n            password: encryptedPassword,\n            iv,\n            remembered: remember\n          };\n          store.put(newUser).onsuccess = () => {\n            alert(\"Account created successfully!\");\n            setIsLoggedIn(true);\n            updateSavedUsers();\n          };\n        }\n      };\n    }\n  };\n  const removeFromDropdown = username => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const getUserRequest = store.get(username);\n      getUserRequest.onsuccess = () => {\n        const user = getUserRequest.result;\n        if (user) {\n          user.remembered = false;\n          const updateRequest = store.put(user);\n          updateRequest.onsuccess = () => {\n            updateSavedUsers(); // Refresh the accounts list after updating\n          };\n          updateRequest.onerror = event => {\n            console.error(\"Error updating account:\", event);\n          };\n        }\n      };\n      transaction.onerror = event => {\n        console.error(\"Error accessing the user store:\", event);\n      };\n    }\n  };\n  const deleteAccount = username => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\n        const deleteRequest = store.delete(username);\n        deleteRequest.onsuccess = () => {\n          console.log(`Account ${username} deleted successfully.`);\n          setUserInfo({\n            username: \"\",\n            password: \"\",\n            remembered: false\n          });\n          clearForm();\n          handleLogout(); // Ensure the user is logged out after deletion\n        };\n        deleteRequest.onerror = event => {\n          console.error(\"Error deleting account:\", event);\n        };\n      }\n      transaction.oncomplete = () => {\n        console.log(\"Delete transaction completed.\");\n      };\n      transaction.onerror = event => {\n        console.error(\"Error in transaction while deleting account:\", event);\n      };\n    }\n  };\n  const updateSavedUsers = () => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readonly\");\n      const store = transaction.objectStore(\"users\");\n      const request = store.getAll();\n      request.onsuccess = () => {\n        const rememberedAccounts = request.result.filter(account => account.remembered);\n        console.log(\"Remembered accounts:\", rememberedAccounts);\n        setAccounts(rememberedAccounts); // Update dropdown with remembered users only\n\n        if (rememberedAccounts.length > 0) {\n          setUserInfo({\n            username: rememberedAccounts[0].username,\n            password: rememberedAccounts[0].password,\n            remembered: rememberedAccounts[0].remembered\n          });\n          setSelect(rememberedAccounts[0].username);\n        }\n      };\n      request.onerror = () => {\n        console.error(\"Error fetching users.\");\n      };\n    }\n  };\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const clearForm = () => {\n    setUserInfo({\n      username: \"\",\n      password: \"\",\n      remembered: false\n    });\n    setRemember(false);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: type === \"checkbox\" ? checked : value\n    }));\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setIsFormOpen(true); // Ensure the form opens after logout\n    updateSavedUsers();\n  };\n  const handleRemember = () => {\n    const newRememberState = !remember;\n    setRemember(newRememberState); // Toggle remember state\n  };\n  const showForm = title => {\n    setFormTitle(title);\n    clearForm();\n    if (title === \"Log in\") {\n      setRemember(true);\n    }\n    toggleForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: jerboa,\n        alt: \"Four-Toed Jerboa\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: userInfo.username || \"Logged-in User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            float: \"left\",\n            marginTop: \"10px\",\n            borderRadius: \"20px\",\n            backgroundColor: \"salmon\"\n          },\n          onClick: handleLogout,\n          children: \"Log out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => deleteAccount(userInfo.username) // Ensure the username is passed correctly here\n          ,\n          style: {\n            float: \"left\",\n            marginTop: \"10px\",\n            borderRadius: \"20px\",\n            backgroundColor: \"darkred\"\n          },\n          children: \"Delete Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: \"Guest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkblue\"\n        },\n        onClick: () => showForm(\"Log in\"),\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      selectedUser: selectedUser,\n      setSelect: setSelect,\n      accounts: accounts,\n      closeForm: toggleForm,\n      formTitle: formTitle,\n      resetPassword: resetPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://bleaky11.github.io/starter_helpi/\",\n      style: {\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"fkILKHa+g4TuUd3sQMUBh0RZ8Ss=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","jerboa","LoginForm","Button","Form","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remembered","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","accounts","setAccounts","selectedUser","setSelect","newPassword","setNewPassword","CryptoJS","require","secretKey","process","env","REACT_APP_SECRET_KEY","console","error","encryptPassword","Error","iv","lib","WordArray","random","encrypted","AES","encrypt","enc","Hex","parse","encryptedPassword","toString","decryptPassword","ivWordArray","bytes","decrypt","Utf8","updatePassword","event","target","value","resetPassword","children","Group","controlId","Control","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","checkInfo","savedUsername","savedEncryptedPassword","savedIV","userInput","passInput","decryptedPassword","log","trim","initializeDatabase","indexedDB","window","request","open","onerror","onupgradeneeded","dbInstance","result","createObjectStore","keyPath","onsuccess","transaction","store","objectStore","getAllRequest","getAll","allUsers","rememberedAccounts","filter","user","localStorage","getItem","length","firstAccount","getRequest","get","rememberedUser","setItem","handleSubmit","preventDefault","alert","userQuery","existingUser","updateRequest","put","updateSavedUsers","removeFromDropdown","clearForm","newUser","getUserRequest","deleteAccount","confirm","deleteRequest","delete","handleLogout","oncomplete","account","toggleForm","updateStatus","name","checked","prevInfo","handleRemember","newRememberState","showForm","title","src","alt","style","float","width","height","cursor","onClick","marginTop","borderRadius","backgroundColor","closeForm","href","color","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button, Form } from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [userInfo, setUserInfo] = useState({ username: \"\", password: \"\", remembered: true});\r\n  const [remember, setRemember] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null);\r\n  const [accounts, setAccounts] = useState<{ username: string; password: string, remembered: boolean }[]>([]);\r\n  const [selectedUser, setSelect] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n\r\n  const CryptoJS = require(\"crypto-js\");\r\n\r\n  const secretKey = process.env.REACT_APP_SECRET_KEY;\r\n\r\n  useEffect(() => {\r\n    if (!secretKey) {\r\n      console.error(\"Missing secret key in environment variables\");\r\n    }\r\n  }, [secretKey]);\r\n\r\n  const encryptPassword = (password: string) => {\r\n    if (!secretKey) {\r\n      throw new Error(\"Secret key is missing. Please check environment variables.\");\r\n    }\r\n    const iv = CryptoJS.lib.WordArray.random(16);\r\n    const encrypted = CryptoJS.AES.encrypt(password, CryptoJS.enc.Hex.parse(secretKey), { iv });\r\n    return { encryptedPassword: encrypted.toString(), iv: iv.toString(CryptoJS.enc.Hex) };\r\n  };\r\n\r\n  const decryptPassword = (encryptedPassword: string, iv: string) => {\r\n    if (!secretKey) {\r\n      throw new Error(\"Secret key is missing. Please check environment variables.\");\r\n    }\r\n    const ivWordArray = CryptoJS.enc.Hex.parse(iv);\r\n    const bytes = CryptoJS.AES.decrypt(encryptedPassword, CryptoJS.enc.Hex.parse(secretKey), { iv: ivWordArray });\r\n    return bytes.toString(CryptoJS.enc.Utf8);\r\n  };\r\n\r\nfunction updatePassword(event: React.ChangeEvent<HTMLInputElement>)\r\n{\r\n  setNewPassword(event.target.value);\r\n}\r\n\r\nfunction resetPassword(): JSX.Element {\r\n  setIsFormOpen(false); // Close the form\r\n  setUserInfo({\r\n    ...userInfo,  \r\n    password: newPassword, \r\n  });\r\n  return (\r\n    <div>\r\n      <Form.Group controlId=\"passwordReset\">\r\n        <Form.Control\r\n          type=\"password\"\r\n          value={newPassword}\r\n          onChange={updatePassword}\r\n          placeholder=\"Enter password\"\r\n        />\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst checkInfo = (savedUsername: string, savedEncryptedPassword: string, savedIV: string, userInput: string, passInput: string) => {\r\n  if (userInput === savedUsername) {\r\n    try {\r\n      const decryptedPassword = decryptPassword(savedEncryptedPassword, savedIV);\r\n      console.log(\"Decrypted Password:\", decryptedPassword);\r\n      console.log(\"User Input Password:\", passInput);\r\n\r\n      if (decryptedPassword.trim() === passInput.trim()) {\r\n        console.log(\"Login successful\");\r\n        return true;\r\n      } else {\r\n        console.log(\"Incorrect password\");\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error decrypting password:\", error);\r\n      return false; // Return false if decryption fails\r\n    }\r\n  } else {\r\n    console.log(\"Incorrect username\");\r\n    return false;\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  const initializeDatabase = async () => {\r\n    const indexedDB = window.indexedDB;\r\n    const request = indexedDB.open(\"UserDatabase\", 2);\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"Error opening user database!\", event);\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const dbInstance = (event.target as IDBOpenDBRequest).result;\r\n      dbInstance.createObjectStore(\"users\", { keyPath: \"username\" });\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      const dbInstance = request.result;\r\n      if (dbInstance) {\r\n        setDb(dbInstance);\r\n        const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n        const store = transaction.objectStore(\"users\");\r\n        const getAllRequest = store.getAll();\r\n\r\n        getAllRequest.onsuccess = () => {\r\n          const allUsers = getAllRequest.result;\r\n          const rememberedAccounts = allUsers.filter(user => user.remembered);\r\n          setAccounts(rememberedAccounts);\r\n\r\n          if (localStorage.getItem(\"homeVisit\") && rememberedAccounts.length > 0) {\r\n            const firstAccount = rememberedAccounts[0];\r\n            const getRequest = store.get(firstAccount.username);\r\n            getRequest.onsuccess = () => {\r\n              const rememberedUser = getRequest.result;\r\n              if (rememberedUser) {\r\n                setUserInfo({\r\n                  username: rememberedUser.username,\r\n                  password: rememberedUser.password,\r\n                  remembered: true,\r\n                });\r\n                setSelect(rememberedUser.username);\r\n              }\r\n            };\r\n          } else {\r\n            if (!localStorage.getItem(\"homeVisit\")) {\r\n              localStorage.setItem(\"homeVisit\", \"true\");\r\n            }\r\n          }\r\n        };\r\n      }\r\n    };\r\n  };\r\n  initializeDatabase();\r\n}, []);\r\n\r\nconst handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n  event.preventDefault();\r\n\r\n  if (!userInfo.username || !userInfo.password) {\r\n    alert(\"Username and password are required.\");\r\n    return;\r\n  }\r\n\r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    const userQuery = store.get(userInfo.username);\r\n\r\n    userQuery.onsuccess = () => {\r\n      const existingUser = userQuery.result;\r\n\r\n      if (existingUser) {\r\n        if (formTitle === \"Log in\") {\r\n          const { username, password: encryptedPassword, iv, remembered } = existingUser;\r\n\r\n          // Call checkInfo to verify the username and decrypted password\r\n          if (checkInfo(username, encryptedPassword, iv, userInfo.username, userInfo.password)) {\r\n            setIsLoggedIn(true);\r\n\r\n            // Update the remembered status if necessary\r\n            if (remember !== remembered) {\r\n              existingUser.remembered = remember;\r\n              const updateRequest = store.put(existingUser);\r\n              updateRequest.onsuccess = () => {\r\n                updateSavedUsers();\r\n              };\r\n            } else {\r\n              updateSavedUsers();\r\n            }\r\n\r\n            if (!remember) {\r\n              removeFromDropdown(userInfo.username);\r\n            }\r\n          } else {\r\n            alert(\"Incorrect username or password.\");\r\n          }\r\n        } else {\r\n          alert(\"Account already exists. Please log in.\");\r\n          clearForm();\r\n        }\r\n      } else if (formTitle === \"Create Account\") {\r\n        const { encryptedPassword, iv } = encryptPassword(userInfo.password);\r\n        const newUser = { ...userInfo, password: encryptedPassword, iv, remembered: remember };\r\n        store.put(newUser).onsuccess = () => {\r\n          alert(\"Account created successfully!\");\r\n          setIsLoggedIn(true);\r\n          updateSavedUsers();\r\n        };\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n  const removeFromDropdown = (username: string) => {\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const getUserRequest = store.get(username);\r\n  \r\n      getUserRequest.onsuccess = () => {\r\n        const user = getUserRequest.result;\r\n        \r\n        if (user) {\r\n          user.remembered = false;\r\n  \r\n          const updateRequest = store.put(user);\r\n  \r\n          updateRequest.onsuccess = () => {\r\n            updateSavedUsers(); // Refresh the accounts list after updating\r\n          };\r\n  \r\n          updateRequest.onerror = (event) => {\r\n            console.error(\"Error updating account:\", event);\r\n          };\r\n        }\r\n      };\r\n  \r\n      transaction.onerror = (event) => {\r\n        console.error(\"Error accessing the user store:\", event);\r\n      };\r\n    }\r\n  };\r\n  \r\n  const deleteAccount = (username: string) => {\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n  \r\n      if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\r\n        const deleteRequest = store.delete(username);\r\n  \r\n        deleteRequest.onsuccess = () => {\r\n          console.log(`Account ${username} deleted successfully.`);\r\n          setUserInfo({username: \"\", password: \"\", remembered: false});\r\n          clearForm(); \r\n          handleLogout(); // Ensure the user is logged out after deletion\r\n        };\r\n  \r\n        deleteRequest.onerror = (event) => {\r\n          console.error(\"Error deleting account:\", event);\r\n        };\r\n      }\r\n  \r\n      transaction.oncomplete = () => {\r\n        console.log(\"Delete transaction completed.\");\r\n      };\r\n  \r\n      transaction.onerror = (event) => {\r\n        console.error(\"Error in transaction while deleting account:\", event);\r\n      };\r\n    }\r\n  };  \r\n    \r\n  const updateSavedUsers = () => {\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readonly\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const request = store.getAll();\r\n  \r\n      request.onsuccess = () => {\r\n        const rememberedAccounts = request.result.filter((account: { remembered: boolean }) => account.remembered);\r\n        console.log(\"Remembered accounts:\", rememberedAccounts);\r\n  \r\n        setAccounts(rememberedAccounts); // Update dropdown with remembered users only\r\n  \r\n        if (rememberedAccounts.length > 0) {\r\n          setUserInfo({\r\n            username: rememberedAccounts[0].username,\r\n            password: rememberedAccounts[0].password,\r\n            remembered: rememberedAccounts[0].remembered,\r\n          });\r\n          setSelect(rememberedAccounts[0].username);\r\n        } \r\n      };\r\n  \r\n      request.onerror = () => {\r\n        console.error(\"Error fetching users.\");\r\n      };\r\n    }\r\n  };  \r\n  \r\n  const toggleForm = () => {\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setUserInfo({ username: \"\", password: \"\", remembered: false });\r\n    setRemember(false);\r\n  };  \r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = event.target;\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    }));\r\n  };   \r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n    setIsFormOpen(true);  // Ensure the form opens after logout\r\n    updateSavedUsers(); \r\n  };   \r\n  \r\n  const handleRemember = () => {\r\n    const newRememberState = !remember;\r\n    setRemember(newRememberState); // Toggle remember state\r\n  };  \r\n  \r\n  const showForm = (title: string) => {\r\n    setFormTitle(title);\r\n    clearForm();\r\n    if (title === \"Log in\") \r\n    {\r\n      setRemember(true); \r\n    }\r\n    toggleForm();\r\n  };  \r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <div>\r\n          <img\r\n            src={jerboa}\r\n            alt=\"Four-Toed Jerboa\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title={userInfo.username || \"Logged-in User\"} \r\n          />\r\n          <div>\r\n            <Button \r\n              style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"salmon\" }}\r\n              onClick={handleLogout}\r\n            >\r\n              Log out\r\n            </Button>\r\n  \r\n            <Button \r\n              onClick={() => deleteAccount(userInfo.username)} // Ensure the username is passed correctly here\r\n              style={{\r\n                float: \"left\", \r\n                marginTop: \"10px\", \r\n                borderRadius: \"20px\", \r\n                backgroundColor: \"darkred\"\r\n              }}\r\n            >\r\n              Delete Account\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title=\"Guest\"\r\n          />\r\n          <Button \r\n            style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkblue\" }}\r\n            onClick={() => showForm(\"Log in\")}\r\n          >\r\n            Log in\r\n          </Button>\r\n        </div>\r\n      )}\r\n  \r\n      {isFormOpen && !isLoggedIn && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          selectedUser={selectedUser}\r\n          setSelect={setSelect}\r\n          accounts={accounts}\r\n          closeForm={toggleForm}\r\n          formTitle={formTitle}\r\n          resetPassword={resetPassword}\r\n        />\r\n      )}\r\n  \r\n      <a href=\"https://bleaky11.github.io/starter_helpi/\" style={{ color: 'black' }}>\r\n        <h1>The Career Quiz</h1>\r\n      </a>\r\n    </div>\r\n  )};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}