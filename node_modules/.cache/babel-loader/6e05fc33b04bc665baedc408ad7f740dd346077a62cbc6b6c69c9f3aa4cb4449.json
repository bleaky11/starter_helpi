{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\basicCareer.tsx\",\n  _s = $RefreshSig$();\nimport { backgroundStyle } from \"./CSS/Background\";\nimport { useState } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BasicCareerComponent() {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [questions, setQuestions] = useState([{\n    text: \"Mock Question #1\",\n    type: \"radio\",\n    // or \"checkbox\" for checkboxes\n    choices: [{\n      id: 1,\n      label: \"choice-1\"\n    }, {\n      id: 2,\n      label: \"choice-2\"\n    }, {\n      id: 3,\n      label: \"choice-3\"\n    }],\n    selected: null // for radio\n  }, {\n    text: \"Mock Question #2\",\n    type: \"checkbox\",\n    // this question uses checkboxes\n    choices: [{\n      id: 1,\n      label: \"choice-1\"\n    }, {\n      id: 2,\n      label: \"choice-2\"\n    }, {\n      id: 3,\n      label: \"choice-3\"\n    }],\n    selected: [false, false, false] // for checkboxes\n  }, {\n    text: \"Mock Question #3\",\n    type: \"radio\",\n    choices: [{\n      id: 1,\n      label: \"choice-1\"\n    }, {\n      id: 2,\n      label: \"choice-2\"\n    }, {\n      id: 3,\n      label: \"choice-3\"\n    }],\n    selected: null // for radio\n  }]);\n  function updateAnswer(event, questionIndex) {\n    const updatedQuestions = [...questions];\n    const question = updatedQuestions[questionIndex];\n    if (question.type === \"radio\") {\n      // Update the selected state for radio buttons\n      question.selected = event.target.value;\n      updatedQuestions[questionIndex] = question;\n    } else if (question.type === \"checkbox\") {\n      // Update the selected state for checkboxes\n      const choiceIndex = question.choices.findIndex(choice => choice.label === event.target.value);\n      question.selected[choiceIndex] = event.target.checked; // Toggle the selection\n      updatedQuestions[questionIndex] = question;\n    }\n    setQuestions(updatedQuestions);\n    updateProgress(questionIndex);\n  }\n  function updateProgress(index) {\n    const question = questions[index];\n    let isAnswered = false;\n    if (question.type === \"radio\") {\n      isAnswered = question.selected !== null; // Check if a radio button is selected\n    } else if (question.type === \"checkbox\") {\n      isAnswered = question.selected.some(isSelected => isSelected); // Check if at least one checkbox is selected\n    }\n    if (isAnswered) {\n      // Only update progress if the question is answered\n      setProgress(prevProgress => Math.min(prevProgress + 100 / questions.length, 100));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: backgroundStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          marginBottom: \"10px\",\n          marginRight: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"question\",\n          style: {\n            marginRight: \"10px\"\n          },\n          children: [\"Percent Complete: \", progress.toFixed(0), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"question\",\n          value: progress,\n          max: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Here is the Basic Career Page!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          style: {\n            border: \"2px solid red\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This assessment is designed to determine an appropriate career path going forward. You will be asked a series of multiple-choice questions. If you're looking for more in-depth questions, go to the Detailed Career Page. Before you begin, make sure you're in a comfortable environment and answer each question to the best of your ability.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"30px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: question.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            children: question.choices.map(choice => /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: question.type,\n              label: choice.label,\n              name: `question-${questionIndex}` // Unique name for grouping radio buttons\n              ,\n              value: choice.label,\n              checked: question.type === \"checkbox\" ? question.selected[choice.id - 1] : question.selected === choice.label // Conditional checking\n              ,\n              onChange: event => updateAnswer(event, questionIndex)\n            }, choice.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this)]\n        }, questionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(BasicCareerComponent, \"N8w57zQ4X8SEr2jJbfe9/IORjkQ=\");\n_c = BasicCareerComponent;\nvar _c;\n$RefreshReg$(_c, \"BasicCareerComponent\");","map":{"version":3,"names":["backgroundStyle","useState","Container","Form","jsxDEV","_jsxDEV","BasicCareerComponent","_s","progress","setProgress","questions","setQuestions","text","type","choices","id","label","selected","updateAnswer","event","questionIndex","updatedQuestions","question","target","value","choiceIndex","findIndex","choice","checked","updateProgress","index","isAnswered","some","isSelected","prevProgress","Math","min","length","style","children","display","alignItems","justifyContent","marginBottom","marginRight","htmlFor","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","max","textAlign","border","marginLeft","map","Check","name","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/basicCareer.tsx"],"sourcesContent":["import { backgroundStyle } from \"./CSS/Background\";\r\nimport { useState } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\";\r\n\r\nexport function BasicCareerComponent(): JSX.Element {\r\n    const [progress, setProgress] = useState<number>(0);\r\n    const [questions, setQuestions] = useState([\r\n        {\r\n            text: \"Mock Question #1\",\r\n            type: \"radio\", // or \"checkbox\" for checkboxes\r\n            choices: [\r\n                { id: 1, label: \"choice-1\" },\r\n                { id: 2, label: \"choice-2\" },\r\n                { id: 3, label: \"choice-3\" },\r\n            ],\r\n            selected: null, // for radio\r\n        },\r\n        {\r\n            text: \"Mock Question #2\",\r\n            type: \"checkbox\", // this question uses checkboxes\r\n            choices: [\r\n                { id: 1, label: \"choice-1\" },\r\n                { id: 2, label: \"choice-2\" },\r\n                { id: 3, label: \"choice-3\" },\r\n            ],\r\n            selected: [false, false, false], // for checkboxes\r\n        },\r\n        {\r\n            text: \"Mock Question #3\",\r\n            type: \"radio\",\r\n            choices: [\r\n                { id: 1, label: \"choice-1\" },\r\n                { id: 2, label: \"choice-2\" },\r\n                { id: 3, label: \"choice-3\" },\r\n            ],\r\n            selected: null, // for radio\r\n        },\r\n    ]);\r\n\r\n    function updateAnswer(event: React.ChangeEvent<HTMLInputElement>, questionIndex: number) {\r\n        const updatedQuestions = [...questions];\r\n        const question = updatedQuestions[questionIndex];\r\n\r\n        if (question.type === \"radio\") {\r\n            // Update the selected state for radio buttons\r\n            question.selected = event.target.value;\r\n            updatedQuestions[questionIndex] = question;\r\n        } else if (question.type === \"checkbox\") {\r\n            // Update the selected state for checkboxes\r\n            const choiceIndex = question.choices.findIndex(choice => choice.label === event.target.value);\r\n            question.selected[choiceIndex] = event.target.checked; // Toggle the selection\r\n            updatedQuestions[questionIndex] = question;\r\n        }\r\n\r\n        setQuestions(updatedQuestions);\r\n        updateProgress(questionIndex);\r\n    }\r\n\r\n    function updateProgress(index: number): void {\r\n        const question = questions[index];\r\n        let isAnswered = false;\r\n\r\n        if (question.type === \"radio\") {\r\n            isAnswered = question.selected !== null; // Check if a radio button is selected\r\n        } else if (question.type === \"checkbox\") {\r\n            isAnswered = question.selected.some(isSelected => isSelected); // Check if at least one checkbox is selected\r\n        }\r\n\r\n        if (isAnswered) {\r\n            // Only update progress if the question is answered\r\n            setProgress(prevProgress => Math.min(prevProgress + (100 / questions.length), 100));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={backgroundStyle}>\r\n            <div>\r\n                <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-end\", marginBottom: \"10px\", marginRight: \"30px\" }}>\r\n                    <label htmlFor=\"question\" style={{ marginRight: \"10px\" }}>\r\n                        Percent Complete: {progress.toFixed(0)}%\r\n                    </label>\r\n                    <progress id=\"question\" value={progress} max=\"100\" />\r\n                </div>\r\n                <h1 style={{ textAlign: \"center\" }}>Here is the Basic Career Page!</h1>\r\n                <br />\r\n                <div>\r\n                    <Container style={{ border: \"2px solid red\" }}>\r\n                        <p>\r\n                            This assessment is designed to determine an appropriate career path going forward.\r\n                            You will be asked a series of multiple-choice questions. If you're looking for more\r\n                            in-depth questions, go to the Detailed Career Page. Before you begin, make sure you're\r\n                            in a comfortable environment and answer each question to the best of your ability.\r\n                        </p>\r\n                    </Container>\r\n                </div>\r\n                <div style={{ marginLeft: \"30px\" }}>\r\n                    <br />\r\n                    {questions.map((question, questionIndex) => (\r\n                        <div key={questionIndex}>\r\n                            <h4>{question.text}</h4>\r\n                            <Form>\r\n                                {question.choices.map((choice) => (\r\n                                    <Form.Check\r\n                                        key={choice.id}\r\n                                        type={question.type}\r\n                                        label={choice.label}\r\n                                        name={`question-${questionIndex}`} // Unique name for grouping radio buttons\r\n                                        value={choice.label}\r\n                                        checked={question.type === \"checkbox\" ? question.selected[choice.id - 1] : question.selected === choice.label} // Conditional checking\r\n                                        onChange={(event) => updateAnswer(event, questionIndex)}\r\n                                    />\r\n                                ))}\r\n                            </Form>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}