{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\nimport { LoginForm } from './LoginForm';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [remember, setRemember] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [selectedUser, setSelect] = useState(\"\");\n  const checkInfo = (savedUsername, savedPassword, userInput, passInput) => {\n    if (userInput === savedUsername && passInput === savedPassword) {\n      return true;\n    } else {\n      alert(userInput !== savedUsername ? \"Wrong username entered!\" : \"Wrong password entered!\");\n      return false;\n    }\n  };\n  useEffect(() => {\n    const initializeDatabase = async () => {\n      const indexedDB = window.indexedDB;\n      const request = indexedDB.open(\"UserDatabase\", 2);\n      request.onerror = event => {\n        console.error(\"Error opening user database!\", event);\n      };\n      request.onupgradeneeded = event => {\n        const dbInstance = event.target.result;\n        dbInstance.createObjectStore(\"users\", {\n          keyPath: \"username\"\n        });\n        console.log(\"Object store created.\");\n      };\n      request.onsuccess = () => {\n        const dbInstance = request.result;\n        setDb(dbInstance);\n        if (dbInstance) {\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\n          const store = transaction.objectStore(\"users\");\n          const getAllRequest = store.getAll();\n          getAllRequest.onsuccess = () => {\n            const allUsers = getAllRequest.result;\n            console.log(\"All users retrieved:\", allUsers); // Check if data is retrieved here\n\n            const rememberedAccounts = allUsers.filter(user => user.remembered);\n            setAccounts(rememberedAccounts);\n            console.log(\"Remembered accounts:\", rememberedAccounts);\n          };\n          getAllRequest.onerror = event => {\n            console.error(\"Error retrieving users from the users object store:\", event);\n          };\n        } else {\n          console.error(\"Database is not initialized.\");\n        }\n      };\n    };\n    initializeDatabase();\n  }, []); // Empty dependency array to avoid infinite loop  \n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!userInfo.username || !userInfo.password) {\n      console.error(\"Username and password must be provided.\");\n      return;\n    }\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const userQuery = store.get(userInfo.username);\n      userQuery.onsuccess = () => {\n        const existingUser = userQuery.result;\n        if (existingUser) {\n          const {\n            username,\n            password,\n            remembered\n          } = existingUser;\n          if (checkInfo(username, password, userInfo.username, userInfo.password)) {\n            setIsLoggedIn(true);\n\n            // Update \"remembered\" status if it has changed\n            if (remembered !== remember) {\n              const updatedUser = {\n                ...existingUser,\n                remembered: remember\n              };\n              store.put(updatedUser).onsuccess = () => {\n                updateSavedUsers(); // Update saved users with the latest data\n              };\n            } else {\n              updateSavedUsers(); // Update saved users even if \"Remember me\" is unchanged\n            }\n          }\n        } else if (formTitle === \"Create Account\") {\n          const newUser = {\n            username: userInfo.username,\n            password: userInfo.password,\n            remembered: remember\n          };\n          store.put(newUser).onsuccess = () => {\n            setIsLoggedIn(true);\n            clearForm();\n            alert(\"Account creation success!\");\n            updateSavedUsers(); // Update saved users on successful account creation\n          };\n        } else {\n          alert(\"User does not exist. Please create an account first.\");\n          clearForm();\n        }\n      };\n      userQuery.onerror = () => {\n        console.error(\"Error querying user data\");\n      };\n      transaction.onerror = event => {\n        console.error(\"Transaction failed:\", event);\n      };\n    }\n  };\n  const updateSavedUsers = () => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readonly\");\n      const store = transaction.objectStore(\"users\");\n      const request = store.getAll();\n      request.onsuccess = () => {\n        const rememberedAccounts = request.result.filter(account => account.remembered);\n        setAccounts(rememberedAccounts); // Update accounts with the latest data\n        if (remember) {\n          setSelect(userInfo.username); // Optionally set the selected user\n        }\n      };\n      request.onerror = () => {\n        console.error(\"Error fetching users\");\n      };\n    }\n  };\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const clearForm = () => {\n    setUserInfo({\n      username: \"\",\n      password: \"\"\n    });\n    setRemember(false);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: value\n    }));\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n  };\n  const handleRemember = () => {\n    const newRememberState = !remember;\n    setRemember(newRememberState);\n  };\n  const showForm = title => {\n    setFormTitle(title);\n    if (title === \"Create Account\") {\n      clearForm();\n    }\n    toggleForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: jerboa,\n        alt: \"Four-Toed Jerboa\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: userInfo.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleLogout,\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkred\"\n        },\n        children: \"Log out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\"),\n        title: \"Guest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => showForm(\"Log in\"),\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkblue\"\n        },\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      selectedUser: selectedUser,\n      setSelect: setSelect,\n      accounts: accounts,\n      closeForm: toggleForm,\n      formTitle: formTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://bleaky11.github.io/starter_helpi/\",\n      style: {\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"JpDbL2NnhLqgTAzSKQpFM7xZdNY=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","jerboa","LoginForm","Button","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","accounts","setAccounts","selectedUser","setSelect","checkInfo","savedUsername","savedPassword","userInput","passInput","alert","initializeDatabase","indexedDB","window","request","open","onerror","event","console","error","onupgradeneeded","dbInstance","target","result","createObjectStore","keyPath","log","onsuccess","transaction","store","objectStore","getAllRequest","getAll","allUsers","rememberedAccounts","filter","user","remembered","handleSubmit","preventDefault","userQuery","get","existingUser","updatedUser","put","updateSavedUsers","newUser","clearForm","account","toggleForm","updateStatus","name","value","prevInfo","handleLogout","handleRemember","newRememberState","showForm","title","children","src","alt","style","float","width","height","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","borderRadius","backgroundColor","closeForm","href","color","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport jerboa from './Images/Four-toes-jerboa-modified.png';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [userInfo, setUserInfo] = useState({ username: \"\", password: \"\" });\r\n  const [remember, setRemember] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null);\r\n  const [accounts, setAccounts] = useState<{ username: string; password: string }[]>([]);\r\n  const [selectedUser, setSelect] = useState(\"\");\r\n\r\n  const checkInfo = (savedUsername: string, savedPassword: string, userInput: string, passInput: string) => {\r\n    if (userInput === savedUsername && passInput === savedPassword) {\r\n      return true;\r\n    } else {\r\n      alert(userInput !== savedUsername ? \"Wrong username entered!\" : \"Wrong password entered!\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializeDatabase = async () => {\r\n      const indexedDB = window.indexedDB;\r\n      const request = indexedDB.open(\"UserDatabase\", 2);\r\n  \r\n      request.onerror = (event) => {\r\n        console.error(\"Error opening user database!\", event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        const dbInstance = (event.target as IDBOpenDBRequest).result;\r\n        dbInstance.createObjectStore(\"users\", { keyPath: \"username\" });\r\n        console.log(\"Object store created.\");\r\n      };\r\n  \r\n      request.onsuccess = () => {\r\n        const dbInstance = request.result;\r\n        setDb(dbInstance);\r\n  \r\n        if (dbInstance) {\r\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n          const store = transaction.objectStore(\"users\");\r\n          const getAllRequest = store.getAll();\r\n  \r\n          getAllRequest.onsuccess = () => {\r\n            const allUsers = getAllRequest.result as { username: string; password: string; remembered: boolean }[];\r\n            console.log(\"All users retrieved:\", allUsers); // Check if data is retrieved here\r\n            \r\n            const rememberedAccounts = allUsers.filter(user => user.remembered);\r\n            setAccounts(rememberedAccounts);\r\n            console.log(\"Remembered accounts:\", rememberedAccounts);\r\n          };\r\n            \r\n          getAllRequest.onerror = (event) => {\r\n            console.error(\"Error retrieving users from the users object store:\", event);\r\n          };\r\n        } else {\r\n          console.error(\"Database is not initialized.\");\r\n        }\r\n      };\r\n    };\r\n    initializeDatabase();\r\n  }, []); // Empty dependency array to avoid infinite loop  \r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n  \r\n    if (!userInfo.username || !userInfo.password) {\r\n      console.error(\"Username and password must be provided.\");\r\n      return;\r\n    }\r\n  \r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const userQuery = store.get(userInfo.username);\r\n  \r\n      userQuery.onsuccess = () => {\r\n        const existingUser = userQuery.result;\r\n  \r\n        if (existingUser) {\r\n          const { username, password, remembered } = existingUser;\r\n  \r\n          if (checkInfo(username, password, userInfo.username, userInfo.password)) {\r\n            setIsLoggedIn(true);\r\n  \r\n            // Update \"remembered\" status if it has changed\r\n            if (remembered !== remember) {\r\n              const updatedUser = { ...existingUser, remembered: remember };\r\n              store.put(updatedUser).onsuccess = () => {\r\n                updateSavedUsers(); // Update saved users with the latest data\r\n              };\r\n            } else {\r\n              updateSavedUsers(); // Update saved users even if \"Remember me\" is unchanged\r\n            }\r\n          }\r\n        } else if (formTitle === \"Create Account\") {\r\n          const newUser = { username: userInfo.username, password: userInfo.password, remembered: remember };\r\n          store.put(newUser).onsuccess = () => {\r\n            setIsLoggedIn(true);\r\n            clearForm();\r\n            alert(\"Account creation success!\");\r\n            updateSavedUsers(); // Update saved users on successful account creation\r\n          };\r\n        } else {\r\n          alert(\"User does not exist. Please create an account first.\");\r\n          clearForm();\r\n        }\r\n      };\r\n  \r\n      userQuery.onerror = () => {\r\n        console.error(\"Error querying user data\");\r\n      };\r\n  \r\n      transaction.onerror = (event) => {\r\n        console.error(\"Transaction failed:\", event);\r\n      };\r\n    }\r\n  };  \r\n  \r\n  const updateSavedUsers = () => {\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readonly\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const request = store.getAll();\r\n  \r\n      request.onsuccess = () => {\r\n        const rememberedAccounts = request.result.filter((account) => account.remembered);\r\n        setAccounts(rememberedAccounts); // Update accounts with the latest data\r\n        if (remember) {\r\n          setSelect(userInfo.username); // Optionally set the selected user\r\n        }\r\n      };\r\n  \r\n      request.onerror = () => {\r\n        console.error(\"Error fetching users\");\r\n      };\r\n    }\r\n  };\r\n  \r\n  const toggleForm = () => {\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const clearForm = () => \r\n  {\r\n    setUserInfo({username: \"\", password: \"\"});\r\n    setRemember(false);\r\n  }\r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  const handleRemember = () => {\r\n    const newRememberState = !remember;\r\n    setRemember(newRememberState);\r\n  };\r\n\r\n  const showForm = (title: string) => {\r\n    setFormTitle(title);\r\n    if(title === \"Create Account\")\r\n    {\r\n      clearForm();\r\n    }\r\n    toggleForm();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <div>\r\n          <img\r\n            src={jerboa}\r\n            alt=\"Four-Toed Jerboa\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title={userInfo.username}\r\n          />\r\n          <Button\r\n            onClick={handleLogout}\r\n            style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkred\" }}\r\n          >\r\n            Log out\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")}\r\n            title=\"Guest\"\r\n          />\r\n          <Button\r\n            onClick={() => showForm(\"Log in\")}\r\n            style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkblue\" }}\r\n          >\r\n            Log in\r\n          </Button>\r\n        </div>\r\n      )}\r\n\r\n      {isFormOpen && !isLoggedIn && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          selectedUser={selectedUser}\r\n          setSelect={setSelect}\r\n          accounts={accounts}\r\n          closeForm={toggleForm}\r\n          formTitle={formTitle}\r\n        />\r\n      )}\r\n\r\n      <a href=\"https://bleaky11.github.io/starter_helpi/\" style={{ color: 'black' }}>\r\n        <h1>The Career Quiz</h1>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,MAAM,MAAM,wCAAwC;AAC3D,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,MAAM,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,OAAO,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IAAEc,QAAQ,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;EACxE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,gBAAgB,CAAC;EAC5D,MAAM,CAACsB,EAAE,EAAEC,KAAK,CAAC,GAAGvB,QAAQ,CAAqB,IAAI,CAAC;EACtD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAA2C,EAAE,CAAC;EACtF,MAAM,CAAC0B,YAAY,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAM4B,SAAS,GAAGA,CAACC,aAAqB,EAAEC,aAAqB,EAAEC,SAAiB,EAAEC,SAAiB,KAAK;IACxG,IAAID,SAAS,KAAKF,aAAa,IAAIG,SAAS,KAAKF,aAAa,EAAE;MAC9D,OAAO,IAAI;IACb,CAAC,MAAM;MACLG,KAAK,CAACF,SAAS,KAAKF,aAAa,GAAG,yBAAyB,GAAG,yBAAyB,CAAC;MAC1F,OAAO,KAAK;IACd;EACF,CAAC;EAED5B,SAAS,CAAC,MAAM;IACd,MAAMiC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,MAAMC,SAAS,GAAGC,MAAM,CAACD,SAAS;MAClC,MAAME,OAAO,GAAGF,SAAS,CAACG,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;MAEjDD,OAAO,CAACE,OAAO,GAAIC,KAAK,IAAK;QAC3BC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,KAAK,CAAC;MACtD,CAAC;MAEDH,OAAO,CAACM,eAAe,GAAIH,KAAK,IAAK;QACnC,MAAMI,UAAU,GAAIJ,KAAK,CAACK,MAAM,CAAsBC,MAAM;QAC5DF,UAAU,CAACG,iBAAiB,CAAC,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAW,CAAC,CAAC;QAC9DP,OAAO,CAACQ,GAAG,CAAC,uBAAuB,CAAC;MACtC,CAAC;MAEDZ,OAAO,CAACa,SAAS,GAAG,MAAM;QACxB,MAAMN,UAAU,GAAGP,OAAO,CAACS,MAAM;QACjCvB,KAAK,CAACqB,UAAU,CAAC;QAEjB,IAAIA,UAAU,EAAE;UACd,MAAMO,WAAW,GAAGP,UAAU,CAACO,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;UAC/D,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;UAC9C,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC,CAAC;UAEpCD,aAAa,CAACJ,SAAS,GAAG,MAAM;YAC9B,MAAMM,QAAQ,GAAGF,aAAa,CAACR,MAAuE;YACtGL,OAAO,CAACQ,GAAG,CAAC,sBAAsB,EAAEO,QAAQ,CAAC,CAAC,CAAC;;YAE/C,MAAMC,kBAAkB,GAAGD,QAAQ,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,UAAU,CAAC;YACnEnC,WAAW,CAACgC,kBAAkB,CAAC;YAC/BhB,OAAO,CAACQ,GAAG,CAAC,sBAAsB,EAAEQ,kBAAkB,CAAC;UACzD,CAAC;UAEDH,aAAa,CAACf,OAAO,GAAIC,KAAK,IAAK;YACjCC,OAAO,CAACC,KAAK,CAAC,qDAAqD,EAAEF,KAAK,CAAC;UAC7E,CAAC;QACH,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;QAC/C;MACF,CAAC;IACH,CAAC;IACDR,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAM2B,YAAY,GAAIrB,KAAuC,IAAK;IAChEA,KAAK,CAACsB,cAAc,CAAC,CAAC;IAEtB,IAAI,CAAClD,QAAQ,CAACE,QAAQ,IAAI,CAACF,QAAQ,CAACG,QAAQ,EAAE;MAC5C0B,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC;MACxD;IACF;IAEA,IAAIpB,EAAE,EAAE;MACN,MAAM6B,WAAW,GAAG7B,EAAE,CAAC6B,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;MACxD,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;MAC9C,MAAMU,SAAS,GAAGX,KAAK,CAACY,GAAG,CAACpD,QAAQ,CAACE,QAAQ,CAAC;MAE9CiD,SAAS,CAACb,SAAS,GAAG,MAAM;QAC1B,MAAMe,YAAY,GAAGF,SAAS,CAACjB,MAAM;QAErC,IAAImB,YAAY,EAAE;UAChB,MAAM;YAAEnD,QAAQ;YAAEC,QAAQ;YAAE6C;UAAW,CAAC,GAAGK,YAAY;UAEvD,IAAIrC,SAAS,CAACd,QAAQ,EAAEC,QAAQ,EAAEH,QAAQ,CAACE,QAAQ,EAAEF,QAAQ,CAACG,QAAQ,CAAC,EAAE;YACvEI,aAAa,CAAC,IAAI,CAAC;;YAEnB;YACA,IAAIyC,UAAU,KAAK5C,QAAQ,EAAE;cAC3B,MAAMkD,WAAW,GAAG;gBAAE,GAAGD,YAAY;gBAAEL,UAAU,EAAE5C;cAAS,CAAC;cAC7DoC,KAAK,CAACe,GAAG,CAACD,WAAW,CAAC,CAAChB,SAAS,GAAG,MAAM;gBACvCkB,gBAAgB,CAAC,CAAC,CAAC,CAAC;cACtB,CAAC;YACH,CAAC,MAAM;cACLA,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACtB;UACF;QACF,CAAC,MAAM,IAAIhD,SAAS,KAAK,gBAAgB,EAAE;UACzC,MAAMiD,OAAO,GAAG;YAAEvD,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;YAAEC,QAAQ,EAAEH,QAAQ,CAACG,QAAQ;YAAE6C,UAAU,EAAE5C;UAAS,CAAC;UAClGoC,KAAK,CAACe,GAAG,CAACE,OAAO,CAAC,CAACnB,SAAS,GAAG,MAAM;YACnC/B,aAAa,CAAC,IAAI,CAAC;YACnBmD,SAAS,CAAC,CAAC;YACXrC,KAAK,CAAC,2BAA2B,CAAC;YAClCmC,gBAAgB,CAAC,CAAC,CAAC,CAAC;UACtB,CAAC;QACH,CAAC,MAAM;UACLnC,KAAK,CAAC,sDAAsD,CAAC;UAC7DqC,SAAS,CAAC,CAAC;QACb;MACF,CAAC;MAEDP,SAAS,CAACxB,OAAO,GAAG,MAAM;QACxBE,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MAC3C,CAAC;MAEDS,WAAW,CAACZ,OAAO,GAAIC,KAAK,IAAK;QAC/BC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,KAAK,CAAC;MAC7C,CAAC;IACH;EACF,CAAC;EAED,MAAM4B,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI9C,EAAE,EAAE;MACN,MAAM6B,WAAW,GAAG7B,EAAE,CAAC6B,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;MACvD,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;MAC9C,MAAMhB,OAAO,GAAGe,KAAK,CAACG,MAAM,CAAC,CAAC;MAE9BlB,OAAO,CAACa,SAAS,GAAG,MAAM;QACxB,MAAMO,kBAAkB,GAAGpB,OAAO,CAACS,MAAM,CAACY,MAAM,CAAEa,OAAO,IAAKA,OAAO,CAACX,UAAU,CAAC;QACjFnC,WAAW,CAACgC,kBAAkB,CAAC,CAAC,CAAC;QACjC,IAAIzC,QAAQ,EAAE;UACZW,SAAS,CAACf,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAAC;QAChC;MACF,CAAC;MAEDuB,OAAO,CAACE,OAAO,GAAG,MAAM;QACtBE,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;MACvC,CAAC;IACH;EACF,CAAC;EAED,MAAM8B,UAAU,GAAGA,CAAA,KAAM;IACvB7D,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAED,MAAM4D,SAAS,GAAGA,CAAA,KAClB;IACEzD,WAAW,CAAC;MAACC,QAAQ,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAE,CAAC,CAAC;IACzCE,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,MAAMwD,YAAY,GAAIjC,KAA0C,IAAK;IACnE,MAAM;MAAEkC,IAAI;MAAEC;IAAM,CAAC,GAAGnC,KAAK,CAACK,MAAM;IACpChC,WAAW,CAAE+D,QAAQ,KAAM;MACzB,GAAGA,QAAQ;MACX,CAACF,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB1D,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAM2D,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,gBAAgB,GAAG,CAAC/D,QAAQ;IAClCC,WAAW,CAAC8D,gBAAgB,CAAC;EAC/B,CAAC;EAED,MAAMC,QAAQ,GAAIC,KAAa,IAAK;IAClC5D,YAAY,CAAC4D,KAAK,CAAC;IACnB,IAAGA,KAAK,KAAK,gBAAgB,EAC7B;MACEX,SAAS,CAAC,CAAC;IACb;IACAE,UAAU,CAAC,CAAC;EACd,CAAC;EAED,oBACEjE,OAAA;IAAA2E,QAAA,GACGhE,UAAU,gBACTX,OAAA;MAAA2E,QAAA,gBACE3E,OAAA;QACE4E,GAAG,EAAEhF,MAAO;QACZiF,GAAG,EAAC,kBAAkB;QACtBC,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAU,CAAE;QAC3EC,OAAO,EAAEA,CAAA,KAAMV,QAAQ,CAAC,gBAAgB,CAAE;QAC1CC,KAAK,EAAErE,QAAQ,CAACE;MAAS;QAAA6E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACFvF,OAAA,CAACF,MAAM;QACLqF,OAAO,EAAEb,YAAa;QACtBQ,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAES,SAAS,EAAE,MAAM;UAAEC,YAAY,EAAE,MAAM;UAAEC,eAAe,EAAE;QAAU,CAAE;QAAAf,QAAA,EAC/F;MAED;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,gBAENvF,OAAA;MAAA2E,QAAA,gBACE3E,OAAA;QACE4E,GAAG,EAAEjF,WAAY;QACjBkF,GAAG,EAAC,cAAc;QAClBC,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAU,CAAE;QAC3EC,OAAO,EAAEA,CAAA,KAAMV,QAAQ,CAAC,gBAAgB,CAAE;QAC1CC,KAAK,EAAC;MAAO;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd,CAAC,eACFvF,OAAA,CAACF,MAAM;QACLqF,OAAO,EAAEA,CAAA,KAAMV,QAAQ,CAAC,QAAQ,CAAE;QAClCK,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAES,SAAS,EAAE,MAAM;UAAEC,YAAY,EAAE,MAAM;UAAEC,eAAe,EAAE;QAAW,CAAE;QAAAf,QAAA,EAChG;MAED;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,EAEApF,UAAU,IAAI,CAACQ,UAAU,iBACxBX,OAAA,CAACH,SAAS;MACRQ,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzBG,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzB6D,cAAc,EAAEA,cAAe;MAC/BjB,YAAY,EAAEA,YAAa;MAC3BY,YAAY,EAAEA,YAAa;MAC3B/C,YAAY,EAAEA,YAAa;MAC3BC,SAAS,EAAEA,SAAU;MACrBH,QAAQ,EAAEA,QAAS;MACnB0E,SAAS,EAAE1B,UAAW;MACtBpD,SAAS,EAAEA;IAAU;MAAAuE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CACF,eAEDvF,OAAA;MAAG4F,IAAI,EAAC,2CAA2C;MAACd,KAAK,EAAE;QAAEe,KAAK,EAAE;MAAQ,CAAE;MAAAlB,QAAA,eAC5E3E,OAAA;QAAA2E,QAAA,EAAI;MAAe;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACrF,EAAA,CAzOWD,QAAkB;AAAA6F,EAAA,GAAlB7F,QAAkB;AAAA,IAAA6F,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}