{"ast":null,"code":"import{useEffect,useState}from\"react\";import bell from\"./Images/bell.png\";import notificationBell from\"./Images/notificationBell.png\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function NotifBell(_ref){let{basicComplete,detailedComplete}=_ref;const[notifBar,toggleBar]=useState(false);const[image,changeImage]=useState(false);const[notification,setNotification]=useState(false);useEffect(()=>{//Runs on basicComplete or detailedComplete update\nif(basicComplete&&sessionStorage.getItem(\"basicCount\")===null){//if basicQs completed for the first time, notify user\nsetNotification(true);}else if(detailedComplete&&sessionStorage.getItem(\"detailedCount\")===null){//if detailedQs completed for the first time, notify user\nsetNotification(true);}else{//Turn notification off after viewed \nsetNotification(false);}},[basicComplete,detailedComplete]);useEffect(()=>{//Changes image of bell to notification bell when notification is updated\nif(notification){changeImage(true);}else{changeImage(false);}},[notification]);function basicToggle(){//Function to handle toggling the notification bar on and off\ntoggleBar(!notifBar);if(notification===true){setNotification(false);//set notification to false if it equals true when clicked\nif(basicComplete){sessionStorage.setItem(\"basicCount\",\"1\");//update counter so notification doesn't keep getting displayed after being viewed\n}if(detailedComplete){//update counter so notification doesn't keep getting displayed after being viewed\nsessionStorage.setItem(\"detailedCount\",\"1\");}}}return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{src:image===true?notificationBell:bell,onClick:basicToggle,alt:\"Bell here\",className:\"notif-bell\"})}),basicComplete&&detailedComplete?notifBar&&/*#__PURE__*/_jsxs(\"div\",{className:\"notif-bar\",children:[\"Basic Questions are complete! \",/*#__PURE__*/_jsx(\"br\",{}),\" Detailed Questions are complete! \",/*#__PURE__*/_jsx(\"br\",{}),\" Check out the results page! \"]}):basicComplete&&!detailedComplete?notifBar&&/*#__PURE__*/_jsxs(\"div\",{className:\"notif-bar\",children:[\"Basic Questions are complete! \",/*#__PURE__*/_jsx(\"br\",{}),\" Check out the results page!\"]}):detailedComplete&&!basicComplete?notifBar&&/*#__PURE__*/_jsxs(\"div\",{className:\"notif-bar\",children:[\"Detailed Questions are complete! \",/*#__PURE__*/_jsx(\"br\",{}),\" Check out the results page! \"]}):notifBar&&/*#__PURE__*/_jsx(\"div\",{className:\"notif-bar\",children:\"No questions finished yet\"})]});}","map":{"version":3,"names":["useEffect","useState","bell","notificationBell","jsx","_jsx","jsxs","_jsxs","NotifBell","_ref","basicComplete","detailedComplete","notifBar","toggleBar","image","changeImage","notification","setNotification","sessionStorage","getItem","basicToggle","setItem","className","children","src","onClick","alt"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/notification.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport bell from \"./Images/bell.png\"\r\nimport notificationBell from \"./Images/notificationBell.png\"\r\n\r\nexport interface submitButton{ // Interface for keeping track of Basic Question Completion\r\n    basicComplete: boolean;\r\n    detailedComplete: boolean;\r\n}\r\n\r\nexport function NotifBell({basicComplete, detailedComplete}: submitButton): JSX.Element{\r\n    const [notifBar, toggleBar] = useState<boolean>(false);\r\n    const [image, changeImage] = useState<boolean>(false);\r\n    const [notification, setNotification] = useState<boolean>(false);\r\n\r\n    useEffect(() => { //Runs on basicComplete or detailedComplete update\r\n        if (basicComplete && sessionStorage.getItem(\"basicCount\") === null) { //if basicQs completed for the first time, notify user\r\n            setNotification(true);\r\n        } else if (detailedComplete && sessionStorage.getItem(\"detailedCount\") === null){//if detailedQs completed for the first time, notify user\r\n            setNotification(true);\r\n        } else {//Turn notification off after viewed \r\n            setNotification(false);\r\n        }\r\n    }, [basicComplete, detailedComplete]);\r\n\r\n    useEffect(() => { //Changes image of bell to notification bell when notification is updated\r\n        if(notification){\r\n            changeImage(true);\r\n        }\r\n        else{\r\n            changeImage(false);\r\n        }\r\n    }, [notification])\r\n\r\n    function basicToggle(): void{ //Function to handle toggling the notification bar on and off\r\n        toggleBar(!notifBar);\r\n        if(notification === true){\r\n            setNotification(false); //set notification to false if it equals true when clicked\r\n            if(basicComplete){\r\n                sessionStorage.setItem(\"basicCount\", \"1\") //update counter so notification doesn't keep getting displayed after being viewed\r\n            }\r\n            \r\n            if(detailedComplete){ //update counter so notification doesn't keep getting displayed after being viewed\r\n                sessionStorage.setItem(\"detailedCount\", \"1\")\r\n            }\r\n        }\r\n    }\r\n    return (<div className=\"container\">\r\n        <div>\r\n            <img src={image === true ? notificationBell : bell} onClick={basicToggle} alt=\"Bell here\" className=\"notif-bell\"></img>\r\n        </div>\r\n        {(basicComplete && detailedComplete)? (notifBar && <div className=\"notif-bar\">Basic Questions are complete! <br></br> Detailed Questions are complete! <br></br> Check out the results page! </div>) :\r\n        ((basicComplete && !detailedComplete)? (notifBar && <div className=\"notif-bar\">Basic Questions are complete! <br></br> Check out the results page!</div>) :\r\n        ((detailedComplete && !basicComplete)?  (notifBar && <div className=\"notif-bar\">Detailed Questions are complete! <br></br> Check out the results page! </div> ): (notifBar && <div className=\"notif-bar\">No questions finished yet</div>)))}\r\n\r\n    </div>)\r\n}"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,MAAO,CAAAC,IAAI,KAAM,mBAAmB,CACpC,MAAO,CAAAC,gBAAgB,KAAM,+BAA+B,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAO5D,MAAO,SAAS,CAAAC,SAASA,CAAAC,IAAA,CAA8D,IAA7D,CAACC,aAAa,CAAEC,gBAA8B,CAAC,CAAAF,IAAA,CACrE,KAAM,CAACG,QAAQ,CAAEC,SAAS,CAAC,CAAGZ,QAAQ,CAAU,KAAK,CAAC,CACtD,KAAM,CAACa,KAAK,CAAEC,WAAW,CAAC,CAAGd,QAAQ,CAAU,KAAK,CAAC,CACrD,KAAM,CAACe,YAAY,CAAEC,eAAe,CAAC,CAAGhB,QAAQ,CAAU,KAAK,CAAC,CAEhED,SAAS,CAAC,IAAM,CAAE;AACd,GAAIU,aAAa,EAAIQ,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,GAAK,IAAI,CAAE,CAAE;AAClEF,eAAe,CAAC,IAAI,CAAC,CACzB,CAAC,IAAM,IAAIN,gBAAgB,EAAIO,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC,GAAK,IAAI,CAAC,CAAC;AAC7EF,eAAe,CAAC,IAAI,CAAC,CACzB,CAAC,IAAM,CAAC;AACJA,eAAe,CAAC,KAAK,CAAC,CAC1B,CACJ,CAAC,CAAE,CAACP,aAAa,CAAEC,gBAAgB,CAAC,CAAC,CAErCX,SAAS,CAAC,IAAM,CAAE;AACd,GAAGgB,YAAY,CAAC,CACZD,WAAW,CAAC,IAAI,CAAC,CACrB,CAAC,IACG,CACAA,WAAW,CAAC,KAAK,CAAC,CACtB,CACJ,CAAC,CAAE,CAACC,YAAY,CAAC,CAAC,CAElB,QAAS,CAAAI,WAAWA,CAAA,CAAQ,CAAE;AAC1BP,SAAS,CAAC,CAACD,QAAQ,CAAC,CACpB,GAAGI,YAAY,GAAK,IAAI,CAAC,CACrBC,eAAe,CAAC,KAAK,CAAC,CAAE;AACxB,GAAGP,aAAa,CAAC,CACbQ,cAAc,CAACG,OAAO,CAAC,YAAY,CAAE,GAAG,CAAC,CAAC;AAC9C,CAEA,GAAGV,gBAAgB,CAAC,CAAE;AAClBO,cAAc,CAACG,OAAO,CAAC,eAAe,CAAE,GAAG,CAAC,CAChD,CACJ,CACJ,CACA,mBAAQd,KAAA,QAAKe,SAAS,CAAC,WAAW,CAAAC,QAAA,eAC9BlB,IAAA,QAAAkB,QAAA,cACIlB,IAAA,QAAKmB,GAAG,CAAEV,KAAK,GAAK,IAAI,CAAGX,gBAAgB,CAAGD,IAAK,CAACuB,OAAO,CAAEL,WAAY,CAACM,GAAG,CAAC,WAAW,CAACJ,SAAS,CAAC,YAAY,CAAM,CAAC,CACtH,CAAC,CACJZ,aAAa,EAAIC,gBAAgB,CAAIC,QAAQ,eAAIL,KAAA,QAAKe,SAAS,CAAC,WAAW,CAAAC,QAAA,EAAC,gCAA8B,cAAAlB,IAAA,QAAQ,CAAC,qCAAkC,cAAAA,IAAA,QAAQ,CAAC,gCAA6B,EAAK,CAAC,CACjMK,aAAa,EAAI,CAACC,gBAAgB,CAAIC,QAAQ,eAAIL,KAAA,QAAKe,SAAS,CAAC,WAAW,CAAAC,QAAA,EAAC,gCAA8B,cAAAlB,IAAA,QAAQ,CAAC,+BAA4B,EAAK,CAAC,CACtJM,gBAAgB,EAAI,CAACD,aAAa,CAAKE,QAAQ,eAAIL,KAAA,QAAKe,SAAS,CAAC,WAAW,CAAAC,QAAA,EAAC,mCAAiC,cAAAlB,IAAA,QAAQ,CAAC,gCAA6B,EAAK,CAAC,CAAKO,QAAQ,eAAIP,IAAA,QAAKiB,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAC,2BAAyB,CAAK,CAAI,EAE1O,CAAC,CACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}