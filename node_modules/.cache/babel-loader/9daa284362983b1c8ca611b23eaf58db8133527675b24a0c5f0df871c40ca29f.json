{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport detective from './Images/detective-profile.png';\nimport { headingStyle } from './CSS/Heading';\nimport { LoginForm } from './LoginForm';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\",\n    remembered: false\n  });\n  const [remember, setRemember] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null); // stores the indexedDB database instance\n  const [accounts, setAccounts] = useState([]);\n  const [selectedUser, setSelect] = useState(\"Select a saved user\");\n  const [passwordPlaceholder, setPlaceholder] = useState(\"\"); // a blank input space for the reset form\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [calledUsername, setCalled] = useState(\"\");\n  const [isPasswordReset, setIsPasswordReset] = React.useState(false);\n  const CryptoJS = require(\"crypto-js\");\n  const secretKey = process.env.REACT_APP_SECRET_KEY; // private password for the encryption algorithmn\n\n  useEffect(() => {\n    if (!secretKey) {\n      console.error(\"Missing secret key in environment variables\");\n    }\n  }, [secretKey]);\n  useEffect(() => {\n    const initializeDatabase = async () => {\n      const indexedDB = window.indexedDB;\n      const request = indexedDB.open(\"UserDatabase\", 2);\n      request.onerror = event => {\n        console.error(\"Error opening user database!\", event);\n      };\n      request.onupgradeneeded = event => {\n        const dbInstance = event.target.result;\n        dbInstance.createObjectStore(\"users\", {\n          keyPath: \"username\"\n        }); // creates or updates database: creates an objectStore if not found\n      };\n      request.onsuccess = () => {\n        const dbInstance = request.result;\n        if (dbInstance) {\n          setDb(dbInstance); // save current db instance\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\n          const store = transaction.objectStore(\"users\");\n          const getAllRequest = store.getAll();\n          getAllRequest.onsuccess = () => {\n            const allUsers = getAllRequest.result;\n            const defaultAccount = {\n              username: \"Select a saved user\",\n              password: \"\",\n              remember: true,\n              iv: \"\"\n            };\n            setAccounts([defaultAccount, ...allUsers]);\n            if (!isLoggedIn) {\n              clearForm(); // clear form for account deletion\n            }\n          };\n        } else {\n          if (!localStorage.getItem(\"homeVisit\")) {\n            // save user visit to refresh saved accounts for next surf\n            localStorage.setItem(\"homeVisit\", \"true\");\n          }\n        }\n      };\n    };\n    initializeDatabase(); // create/update database\n  }, [formTitle, isLoggedIn]);\n\n  /* Encrypt password and store both encrypted password and IV\r\n      Secret Key: A private password for Advanced Encryption Standard (AES)\r\n      Initialized Vector (IV): unique random string used to control encyption output. Prevents hackers from recognizing patterns.\r\n  */\n\n  const encryptPassword = password => {\n    const iv = CryptoJS.lib.WordArray.random(16); // Generate a new random IV\n    const encrypted = CryptoJS.AES.encrypt(password, secretKey, {\n      iv: iv\n    }).toString();\n    return {\n      encryptedPassword: encrypted,\n      iv: iv.toString()\n    };\n  };\n  const decryptPassword = (encryptedPassword, iv) => {\n    // decrypt the user password for log in purposes\n    const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey, {\n      iv: CryptoJS.enc.Hex.parse(iv)\n    }); // parse IV into readable form\n    return bytes.toString(CryptoJS.enc.Utf8);\n  };\n  const updatePassword = event => {\n    // updates the password to be reset in the reset form\n    const placeholder = event.target.value;\n    setPlaceholder(placeholder);\n    const encrypted = encryptPassword(placeholder);\n    const encryptedPassword = encrypted.encryptedPassword;\n    setNewPassword(encryptedPassword);\n    setUserInfo(prevState => ({\n      // updates user info\n      ...prevState,\n      password: encryptedPassword\n    }));\n    const usernameToUpdate = calledUsername; // reset password for the called user\n\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const getUserRequest = store.get(usernameToUpdate);\n      getUserRequest.onsuccess = () => {\n        const existingUser = getUserRequest.result;\n        if (existingUser) {\n          existingUser.password = encryptedPassword;\n          const updateRequest = store.put(existingUser); // overwrites old password in database\n\n          updateRequest.onsuccess = () => {\n            updateSavedUsers(); // Update saved accounts\n          };\n          updateRequest.onerror = event => {\n            console.error(\"Error updating password:\", event);\n          };\n        } else {\n          console.error(\"User not found for updating password.\");\n        }\n      };\n      transaction.onerror = event => {\n        console.error(\"Error accessing user store:\", event);\n      };\n    }\n  };\n  const updateCalledUser = event => {\n    setCalled(event.target.value);\n  };\n  const checkInfo = (savedUsername, savedEncryptedPassword, savedIV, userInput, passInput) =>\n  // checks if log in input matches user credentials\n  {\n    if (userInput === savedUsername) {\n      const decryptedPassword = decryptPassword(savedEncryptedPassword, savedIV); // decrypt password to compare\n      return decryptedPassword.trim() === passInput.trim();\n    } else {\n      return false;\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!userInfo.username || !userInfo.password) {\n      alert(\"Username and password are required.\");\n      return;\n    }\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const userQuery = store.get(userInfo.username);\n      userQuery.onsuccess = () => {\n        const existingUser = userQuery.result;\n        if (existingUser) {\n          if (formTitle === \"Log in\") {\n            const {\n              username,\n              password: encryptedPassword,\n              iv,\n              remembered\n            } = existingUser;\n            if (checkInfo(username, encryptedPassword, iv, userInfo.username, userInfo.password)) {\n              setIsLoggedIn(true);\n              if (remember !== remembered) {\n                existingUser.remembered = remember;\n                const updateRequest = store.put(existingUser); // change remembered field of user if changed\n                updateRequest.onsuccess = () => updateSavedUsers(); // save changes\n                updateRequest.onerror = event => console.error(\"Error updating remembered status:\", event);\n              } else {\n                updateSavedUsers(); // update regardless if updateSavedUsers() finds no remembered accounts\n              }\n              if (!remember) {\n                removeFromDropdown(userInfo.username); // remove saved account when not remembered\n              }\n            } else {\n              alert(\"Incorrect username or password.\");\n            }\n          } else {\n            alert(\"Account already exists. Please log in.\");\n            clearForm();\n          }\n        } else if (formTitle === \"Create Account\") {\n          const {\n            encryptedPassword,\n            iv\n          } = encryptPassword(userInfo.password);\n          const newUser = {\n            ...userInfo,\n            password: encryptedPassword,\n            iv,\n            remembered: remember\n          };\n          store.put(newUser).onsuccess = () => {\n            alert(\"Account created successfully!\");\n            setIsLoggedIn(true);\n            updateSavedUsers();\n          };\n        } else {\n          alert(\"Username doesn't exist!\");\n          clearForm();\n        }\n      };\n    }\n  };\n  const removeFromDropdown = username => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const getUserRequest = store.get(username);\n      getUserRequest.onsuccess = () => {\n        const user = getUserRequest.result;\n        if (user) {\n          user.remembered = false; // set to false to remove from saved accounts\n\n          const updateRequest = store.put(user);\n          updateRequest.onsuccess = () => {\n            updateSavedUsers(); // Refresh the accounts list after updating\n            // Trigger a re-render for the dropdown or selected user change.\n          };\n          updateRequest.onerror = event => {\n            console.error(\"Error updating account:\", event);\n          };\n        }\n      };\n      transaction.onerror = event => {\n        console.error(\"Error accessing the user store:\", event);\n      };\n    }\n  };\n  const deleteAccount = async username => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\n        try {\n          const getRequest = store.get(username);\n          getRequest.onsuccess = async () => {\n            const userAccount = getRequest.result;\n            if (userAccount && userAccount.remembered) {\n              removeFromDropdown(username); // Remove account from saved dropdown if remembered\n            }\n            const deleteRequest = store.delete(username);\n            deleteRequest.onsuccess = () => {\n              handleLogout(); // Reset the login state\n              updateSavedUsers(); // Update saved accounts\n              alert(\"Account deleted!\");\n            };\n            deleteRequest.onerror = () => {\n              console.error(\"Error deleting account\");\n            };\n          };\n          getRequest.onerror = () => {\n            console.error(\"Error fetching account\");\n          };\n        } catch (error) {\n          console.error(\"An error occurred while deleting the account:\", error);\n        }\n      }\n    }\n  };\n  const updateSavedUsers = () => {\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readonly\");\n      const store = transaction.objectStore(\"users\");\n      const request = store.getAll();\n      request.onsuccess = () => {\n        const allAccounts = request.result;\n        setAccounts(allAccounts); // Set all users for general access\n\n        const rememberedAccounts = allAccounts.filter(account => account.remembered);\n        if (rememberedAccounts.length > 1) {\n          const account = rememberedAccounts[0]; // Select the first remembered account\n          const decryptedPassword = decryptPassword(account.password, account.iv);\n          setUserInfo({\n            username: account.username,\n            password: decryptedPassword,\n            remembered: account.remembered\n          });\n          setSelect(account.username); // Update the dropdown to show the remembered username\n        } else {\n          setUserInfo({\n            username: userInfo.username,\n            password: userInfo.password,\n            remembered: false\n          });\n        }\n      };\n    }\n  };\n  const toggleForm = () => {\n    // controls opening/closing form\n    if (formTitle === \"Reset Password\") {\n      setIsPasswordReset(false);\n    }\n    setIsFormOpen(!isFormOpen);\n  };\n  const clearForm = () => {\n    setTimeout(() => {\n      setUserInfo({\n        username: \"\",\n        password: \"\",\n        remembered: false\n      });\n      setSelect(\"\"); // Clear selected user from dropdown\n    }, 50);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target; // destructured HTML element\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: type === \"checkbox\" ? checked : value // takes name as generic key... updates field based on type\n    }));\n  };\n  const handleLogout = () => {\n    setTimeout(() => {\n      alert(\"Logging out...\");\n      setIsLoggedIn(false);\n      setIsFormOpen(false);\n    }, 1500);\n  };\n  const handleRemember = () => {\n    const newRememberState = !remember; // switch remember on check mark click/unclick\n    setRemember(newRememberState);\n  };\n  const showForm = title => {\n    setFormTitle(title);\n    if (title === \"Create Account\") {\n      clearForm(); // clear form fields when switching to \"Create Account\"\n    } else if (title === \"Log in\") {\n      setRemember(true); // set true regardless to show saved accounts\n    }\n    toggleForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '125px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignContent: \"center\"\n      },\n      children: isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: detective // default profile picture\n          ,\n          alt: \"detective profile\",\n          style: {\n            width: '50px',\n            height: '50px',\n            cursor: 'pointer'\n          },\n          onClick: () => showForm(\"Create Account\"),\n          title: userInfo.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              borderRadius: \"20px\",\n              backgroundColor: \"salmon\"\n            },\n            onClick: handleLogout,\n            children: \"Log out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => deleteAccount(userInfo.username),\n            style: {\n              marginTop: \"10px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"darkred\"\n            },\n            children: \"Delete Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: userProfile,\n          alt: \"User Profile\",\n          style: {\n            width: '50px',\n            height: '55px',\n            cursor: 'pointer'\n          },\n          onClick: () => showForm(\"Create Account\"),\n          title: \"Guest\" // default visitor status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            borderRadius: \"20px\",\n            backgroundColor: \"darkblue\"\n          },\n          onClick: () => showForm(\"Log in\"),\n          children: \"Log in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      selectedUser: selectedUser,\n      setSelect: setSelect,\n      accounts: accounts,\n      closeForm: toggleForm,\n      formTitle: formTitle,\n      setFormTitle: setFormTitle,\n      decryptPassword: decryptPassword,\n      passwordPlaceholder: passwordPlaceholder,\n      setPlaceholder: setPlaceholder,\n      isPasswordReset: isPasswordReset,\n      setIsPasswordReset: setIsPasswordReset,\n      newPassword: newPassword,\n      updatePassword: updatePassword,\n      calledUsername: calledUsername,\n      setCalled: setCalled,\n      updateCalledUser: updateCalledUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: headingStyle,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://bleaky11.github.io/starter_helpi/\",\n        style: {\n          color: 'black',\n          fontSize: '40px',\n          textDecoration: 'none'\n        },\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"eTrBpj7IaBSd13tLKWc8Hr89Ihw=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","detective","headingStyle","LoginForm","Button","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remembered","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","accounts","setAccounts","selectedUser","setSelect","passwordPlaceholder","setPlaceholder","newPassword","setNewPassword","calledUsername","setCalled","isPasswordReset","setIsPasswordReset","CryptoJS","require","secretKey","process","env","REACT_APP_SECRET_KEY","console","error","initializeDatabase","indexedDB","window","request","open","onerror","event","onupgradeneeded","dbInstance","target","result","createObjectStore","keyPath","onsuccess","transaction","store","objectStore","getAllRequest","getAll","allUsers","defaultAccount","iv","clearForm","localStorage","getItem","setItem","encryptPassword","lib","WordArray","random","encrypted","AES","encrypt","toString","encryptedPassword","decryptPassword","bytes","decrypt","enc","Hex","parse","Utf8","updatePassword","placeholder","value","prevState","usernameToUpdate","getUserRequest","get","existingUser","updateRequest","put","updateSavedUsers","updateCalledUser","checkInfo","savedUsername","savedEncryptedPassword","savedIV","userInput","passInput","decryptedPassword","trim","handleSubmit","preventDefault","alert","userQuery","removeFromDropdown","newUser","user","deleteAccount","confirm","getRequest","userAccount","deleteRequest","delete","handleLogout","allAccounts","rememberedAccounts","filter","account","length","toggleForm","setTimeout","updateStatus","name","type","checked","prevInfo","handleRemember","newRememberState","showForm","title","style","height","children","display","justifyContent","alignContent","src","alt","width","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","borderRadius","backgroundColor","marginTop","closeForm","href","color","fontSize","textDecoration","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport detective from './Images/detective-profile.png';\r\nimport { headingStyle } from './CSS/Heading';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button} from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [userInfo, setUserInfo] = useState({ username: \"\", password: \"\", remembered: false});\r\n  const [remember, setRemember] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null); // stores the indexedDB database instance\r\n  const [accounts, setAccounts] = useState<{ username: string; password: string, remembered: boolean, iv: string }[]>([]);\r\n  const [selectedUser, setSelect] = useState(\"Select a saved user\");\r\n  const [passwordPlaceholder, setPlaceholder] = useState<string>(\"\"); // a blank input space for the reset form\r\n  const [newPassword, setNewPassword] = useState<string>(\"\");\r\n  const [calledUsername, setCalled]= useState<string>(\"\");\r\n  const [isPasswordReset, setIsPasswordReset] = React.useState<boolean>(false);\r\n\r\n  const CryptoJS = require(\"crypto-js\");\r\n\r\n  const secretKey = process.env.REACT_APP_SECRET_KEY; // private password for the encryption algorithmn\r\n\r\n  useEffect(() => {\r\n    if (!secretKey) {\r\n      console.error(\"Missing secret key in environment variables\");\r\n    }\r\n  }, [secretKey]);\r\n\r\n  useEffect(() => {\r\n    const initializeDatabase = async () => {\r\n      const indexedDB = window.indexedDB;\r\n      const request = indexedDB.open(\"UserDatabase\", 2);\r\n  \r\n      request.onerror = (event) => {\r\n        console.error(\"Error opening user database!\", event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        const dbInstance = (event.target as IDBOpenDBRequest).result;\r\n        dbInstance.createObjectStore(\"users\", { keyPath: \"username\" }); // creates or updates database: creates an objectStore if not found\r\n      };\r\n  \r\n      request.onsuccess = () => {\r\n        const dbInstance = request.result;\r\n        if (dbInstance) {\r\n          setDb(dbInstance); // save current db instance\r\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n          const store = transaction.objectStore(\"users\");\r\n          const getAllRequest = store.getAll();\r\n  \r\n          getAllRequest.onsuccess = () => {\r\n            const allUsers = getAllRequest.result;\r\n            const defaultAccount = { username: \"Select a saved user\", password: \"\", remember: true, iv: \"\" };\r\n            setAccounts([defaultAccount, ...allUsers]);\r\n            if(!isLoggedIn)\r\n            {\r\n              clearForm(); // clear form for account deletion\r\n            }\r\n          };\r\n        } else {\r\n          if (!localStorage.getItem(\"homeVisit\")) { // save user visit to refresh saved accounts for next surf\r\n            localStorage.setItem(\"homeVisit\", \"true\");\r\n          }\r\n        }\r\n      };\r\n    };\r\n    initializeDatabase(); // create/update database\r\n  }, [formTitle, isLoggedIn]);\r\n\r\n/* Encrypt password and store both encrypted password and IV\r\n    Secret Key: A private password for Advanced Encryption Standard (AES)\r\n    Initialized Vector (IV): unique random string used to control encyption output. Prevents hackers from recognizing patterns.\r\n*/\r\n\r\nconst encryptPassword = (password: string) => {\r\n  const iv = CryptoJS.lib.WordArray.random(16); // Generate a new random IV\r\n  const encrypted = CryptoJS.AES.encrypt(password, secretKey, { iv: iv }).toString();\r\n  return { encryptedPassword: encrypted, iv: iv.toString() };\r\n};\r\n\r\nconst decryptPassword = (encryptedPassword: string, iv: string) => { // decrypt the user password for log in purposes\r\n  const bytes = CryptoJS.AES.decrypt(encryptedPassword, secretKey, { iv: CryptoJS.enc.Hex.parse(iv) }); // parse IV into readable form\r\n  return bytes.toString(CryptoJS.enc.Utf8); \r\n};\r\n\r\nconst updatePassword = (event: React.ChangeEvent<HTMLInputElement>) => { // updates the password to be reset in the reset form\r\n  const placeholder = event.target.value; \r\n  setPlaceholder(placeholder); \r\n  \r\n  const encrypted = encryptPassword(placeholder);\r\n  const encryptedPassword = encrypted.encryptedPassword;\r\n  setNewPassword(encryptedPassword);\r\n  \r\n  setUserInfo(prevState => ({ // updates user info\r\n    ...prevState,\r\n    password: encryptedPassword,\r\n  }));\r\n  \r\n  const usernameToUpdate = calledUsername;  // reset password for the called user\r\n  \r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    const getUserRequest = store.get(usernameToUpdate); \r\n    \r\n    getUserRequest.onsuccess = () => {\r\n      const existingUser = getUserRequest.result;\r\n  \r\n      if (existingUser) {\r\n        \r\n        existingUser.password = encryptedPassword;\r\n        \r\n        const updateRequest = store.put(existingUser); // overwrites old password in database\r\n        \r\n        updateRequest.onsuccess = () => {\r\n          updateSavedUsers();  // Update saved accounts\r\n        };\r\n  \r\n        updateRequest.onerror = (event) => {\r\n          console.error(\"Error updating password:\", event);\r\n        };\r\n      } else {\r\n        console.error(\"User not found for updating password.\");\r\n      }\r\n    };\r\n  \r\n    transaction.onerror = (event) => {\r\n      console.error(\"Error accessing user store:\", event);\r\n    };\r\n  }\r\n};\r\n\r\nconst updateCalledUser = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n{\r\n  setCalled(event.target.value);\r\n}\r\n\r\nconst checkInfo = (savedUsername: string, savedEncryptedPassword: string, savedIV: string, userInput: string, passInput: string) => // checks if log in input matches user credentials\r\n{\r\n  if (userInput === savedUsername) {\r\n      const decryptedPassword = decryptPassword(savedEncryptedPassword, savedIV); // decrypt password to compare\r\n      return decryptedPassword.trim() === passInput.trim()\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n  event.preventDefault();\r\n\r\n  if (!userInfo.username || !userInfo.password) {\r\n    alert(\"Username and password are required.\");\r\n    return;\r\n  }\r\n\r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    const userQuery = store.get(userInfo.username);\r\n\r\n    userQuery.onsuccess = () => {\r\n      const existingUser = userQuery.result;\r\n\r\n      if (existingUser) {\r\n        if (formTitle === \"Log in\") {\r\n          const { username, password: encryptedPassword, iv, remembered } = existingUser;\r\n\r\n          if (checkInfo(username, encryptedPassword, iv, userInfo.username, userInfo.password)) {\r\n            setIsLoggedIn(true);\r\n            if (remember !== remembered) {\r\n              existingUser.remembered = remember;\r\n              const updateRequest = store.put(existingUser); // change remembered field of user if changed\r\n              updateRequest.onsuccess = () => updateSavedUsers(); // save changes\r\n              updateRequest.onerror = (event) => console.error(\"Error updating remembered status:\", event);\r\n            } else {\r\n              updateSavedUsers(); // update regardless if updateSavedUsers() finds no remembered accounts\r\n            }\r\n            if (!remember) {\r\n              removeFromDropdown(userInfo.username); // remove saved account when not remembered\r\n            }\r\n          } else {\r\n            alert(\"Incorrect username or password.\");\r\n          }\r\n        } else {\r\n          alert(\"Account already exists. Please log in.\");\r\n          clearForm();\r\n        }\r\n      } else if (formTitle === \"Create Account\") {\r\n        const { encryptedPassword, iv } = encryptPassword(userInfo.password);\r\n        const newUser = { ...userInfo, password: encryptedPassword, iv, remembered: remember };\r\n\r\n        store.put(newUser).onsuccess = () => {\r\n          alert(\"Account created successfully!\");\r\n          setIsLoggedIn(true);\r\n          updateSavedUsers();\r\n        };\r\n      } else {\r\n        alert(\"Username doesn't exist!\");\r\n        clearForm();\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nconst removeFromDropdown = (username: string) => {\r\n  if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n      const getUserRequest = store.get(username);\r\n\r\n      getUserRequest.onsuccess = () => {\r\n          const user = getUserRequest.result;\r\n\r\n          if (user) {\r\n              user.remembered = false; // set to false to remove from saved accounts\r\n\r\n              const updateRequest = store.put(user);\r\n\r\n              updateRequest.onsuccess = () => {\r\n                  updateSavedUsers(); // Refresh the accounts list after updating\r\n                  // Trigger a re-render for the dropdown or selected user change.\r\n              };\r\n\r\n              updateRequest.onerror = (event) => {\r\n                  console.error(\"Error updating account:\", event);\r\n              };\r\n          }\r\n      };\r\n\r\n      transaction.onerror = (event) => {\r\n          console.error(\"Error accessing the user store:\", event);\r\n      };\r\n  }\r\n};\r\n\r\nconst deleteAccount = async (username: string) => {\r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readwrite\");\r\n    const store = transaction.objectStore(\"users\");\r\n\r\n    if (window.confirm(\"Are you sure you want to delete your account? This can't be undone!\")) {\r\n      try {\r\n        const getRequest = store.get(username);\r\n\r\n        getRequest.onsuccess = async () => {\r\n          const userAccount = getRequest.result;\r\n\r\n          if (userAccount && userAccount.remembered) {\r\n            removeFromDropdown(username); // Remove account from saved dropdown if remembered\r\n          }\r\n\r\n          const deleteRequest = store.delete(username);\r\n\r\n          deleteRequest.onsuccess = () => {\r\n            handleLogout(); // Reset the login state\r\n            updateSavedUsers(); // Update saved accounts\r\n            alert(\"Account deleted!\");\r\n          };\r\n\r\n          deleteRequest.onerror = () => {\r\n            console.error(\"Error deleting account\");\r\n          };\r\n        };\r\n\r\n        getRequest.onerror = () => {\r\n          console.error(\"Error fetching account\");\r\n        };\r\n      } catch (error) {\r\n        console.error(\"An error occurred while deleting the account:\", error);\r\n      }\r\n    }\r\n  }\r\n};\r\n    \r\nconst updateSavedUsers = () => { \r\n  if (db) {\r\n    const transaction = db.transaction(\"users\", \"readonly\");\r\n    const store = transaction.objectStore(\"users\");\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n      const allAccounts = request.result;\r\n      setAccounts(allAccounts); // Set all users for general access\r\n\r\n      const rememberedAccounts = allAccounts.filter(account => account.remembered);\r\n      if (rememberedAccounts.length > 1) { \r\n        const account = rememberedAccounts[0];  // Select the first remembered account\r\n        const decryptedPassword = decryptPassword(account.password, account.iv); \r\n        setUserInfo({\r\n          username: account.username,\r\n          password: decryptedPassword,  \r\n          remembered: account.remembered,\r\n        });\r\n        setSelect(account.username);  // Update the dropdown to show the remembered username\r\n      } else {\r\n        setUserInfo({\r\n          username: userInfo.username,\r\n          password: userInfo.password,\r\n          remembered: false, \r\n        });\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n  const toggleForm = () => { // controls opening/closing form\r\n    if(formTitle === \"Reset Password\")\r\n    {\r\n      setIsPasswordReset(false);\r\n    }\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setTimeout(() => {\r\n      setUserInfo({ username: \"\", password: \"\", remembered: false });\r\n      setSelect(\"\"); // Clear selected user from dropdown\r\n    }, 50); \r\n  };  \r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = event.target; // destructured HTML element\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: type === \"checkbox\" ? checked : value, // takes name as generic key... updates field based on type\r\n    }));\r\n  };   \r\n\r\n  const handleLogout = () => {\r\n    setTimeout(() =>\r\n    {\r\n      alert(\"Logging out...\");\r\n      setIsLoggedIn(false);\r\n      setIsFormOpen(false);\r\n    }, 1500);\r\n}; \r\n  \r\n  const handleRemember = () => {\r\n    const newRememberState = !remember; // switch remember on check mark click/unclick\r\n    setRemember(newRememberState); \r\n  };  \r\n  \r\n  const showForm = (title: string) => {\r\n    setFormTitle(title);\r\n    if (title === \"Create Account\") {\r\n      clearForm(); // clear form fields when switching to \"Create Account\"\r\n    }\r\n    else if(title === \"Log in\")\r\n    {\r\n      setRemember(true); // set true regardless to show saved accounts\r\n    }\r\n    toggleForm();\r\n  }; \r\n\r\n  return (\r\n    <div style={{ height: '125px'}}>\r\n      <div style = {{display: \"flex\", justifyContent: \"center\", alignContent: \"center\"}}>\r\n        {isLoggedIn ? (\r\n          <div>\r\n            <img\r\n              src={detective} // default profile picture\r\n              alt=\"detective profile\"\r\n              style={{ width: '50px', height: '50px', cursor: 'pointer' }}\r\n              onClick={() => showForm(\"Create Account\")}\r\n              title={userInfo.username}\r\n            />\r\n            <div>\r\n              <Button\r\n                style={{borderRadius: \"20px\", backgroundColor: \"salmon\" }}\r\n                onClick={handleLogout}\r\n              >\r\n                Log out\r\n              </Button>\r\n  \r\n              <Button\r\n                onClick={() => deleteAccount(userInfo.username)}\r\n                style={{\r\n                  marginTop: \"10px\",\r\n                  borderRadius: \"20px\",\r\n                  backgroundColor: \"darkred\"\r\n                }}\r\n              >\r\n                Delete Account\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <img\r\n              src={userProfile}\r\n              alt=\"User Profile\"\r\n              style={{ width: '50px', height: '55px', cursor: 'pointer' }}\r\n              onClick={() => showForm(\"Create Account\")}\r\n              title=\"Guest\" // default visitor status\r\n            />\r\n            <Button\r\n              style={{borderRadius: \"20px\", backgroundColor: \"darkblue\" }}\r\n              onClick={() => showForm(\"Log in\")}\r\n            >\r\n              Log in\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n  \r\n      {isFormOpen && !isLoggedIn && (\r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          selectedUser={selectedUser}\r\n          setSelect={setSelect}\r\n          accounts={accounts}\r\n          closeForm={toggleForm}\r\n          formTitle={formTitle}\r\n          setFormTitle={setFormTitle}\r\n          decryptPassword={decryptPassword}\r\n          passwordPlaceholder={passwordPlaceholder}\r\n          setPlaceholder={setPlaceholder}\r\n          isPasswordReset={isPasswordReset}\r\n          setIsPasswordReset={setIsPasswordReset}\r\n          newPassword={newPassword}\r\n          updatePassword={updatePassword}\r\n          calledUsername={calledUsername}\r\n          setCalled={setCalled}\r\n          updateCalledUser={updateCalledUser}\r\n        />\r\n      )}\r\n  \r\n      {/* Career Quiz Link */}\r\n      <div style = {headingStyle}>\r\n        <a\r\n          href=\"https://bleaky11.github.io/starter_helpi/\"\r\n          style={{ color: 'black', fontSize: '40px', textDecoration: 'none'}}\r\n        >\r\n          The Career Quiz\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}