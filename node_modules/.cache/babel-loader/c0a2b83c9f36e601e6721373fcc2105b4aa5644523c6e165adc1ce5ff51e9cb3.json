{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tommy\\\\Project_Final\\\\starter_helpi\\\\src\\\\homepagelogo.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport userProfile from './Images/user-profile.png';\nimport { LoginForm } from './LoginForm';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomePage = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [userInfo, setUserInfo] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [remember, setRemember] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [formTitle, setFormTitle] = useState(\"Create Account\");\n  const [db, setDb] = useState(null); // Store db instance\n  const [alertShown, setAlertShown] = useState(false); // State to control alert display\n\n  const checkInfo = (savedUsername, savedPassword, userInput, passInput) => {\n    let userAccess = false;\n    if (userInput === savedUsername && passInput === savedPassword) {\n      userAccess = true;\n      // Show success alert only once\n      if (!alertShown) {\n        alert(\"Login successful!\");\n        setAlertShown(true); // Set the alert as shown\n      }\n    } else {\n      if (userInput !== savedUsername && !alertShown) {\n        alert(\"Wrong username entered!\");\n        setAlertShown(true); // Set the alert as shown\n      } else if (passInput !== savedPassword && !alertShown) {\n        alert(\"Wrong password entered!\");\n        setAlertShown(true); // Set the alert as shown\n      }\n    }\n    return userAccess;\n  };\n  useEffect(() => {\n    const indexedDB = window.indexedDB;\n    const request = indexedDB.open(\"UserDatabase\", 2); // Increment version for schema changes\n\n    request.onerror = event => {\n      console.error(\"Error accessing user database!\", event);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      db.createObjectStore(\"users\", {\n        keyPath: \"username\"\n      });\n      console.log(\"Object store created.\");\n    };\n    request.onsuccess = () => {\n      const dbInstance = request.result;\n      setDb(dbInstance);\n      console.log(\"Database opened successfully.\");\n\n      // Check if there's saved user data for \"Remember Me\"\n      const rememberMe = localStorage.getItem(\"rememberMe\") === \"true\";\n      setRemember(rememberMe);\n      if (rememberMe) {\n        // Attempt to load saved user data\n        const savedUsername = localStorage.getItem(\"savedUsername\");\n        if (savedUsername) {\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\n          const store = transaction.objectStore(\"users\");\n          const userQuery = store.get(savedUsername);\n          userQuery.onsuccess = () => {\n            if (userQuery.result) {\n              // Load saved user data\n              setUserInfo({\n                username: userQuery.result.username,\n                password: userQuery.result.password\n              });\n              setIsLoggedIn(true);\n              console.log(\"Loaded saved user data:\", userQuery.result);\n            } else {\n              console.log(\"No saved user data found for username:\", savedUsername);\n            }\n          };\n          userQuery.onerror = event => {\n            console.error(\"Error querying user data:\", event);\n          };\n        }\n      }\n    };\n  }, []); // Run on component mount\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!userInfo.username || !userInfo.password) {\n      console.error(\"Username and password must be provided.\");\n      return;\n    }\n    if (db) {\n      const transaction = db.transaction(\"users\", \"readwrite\");\n      const store = transaction.objectStore(\"users\");\n      const userQuery = store.get(userInfo.username);\n      userQuery.onsuccess = () => {\n        if (userQuery.result) {\n          const savedUsername = userQuery.result.username;\n          const savedPassword = userQuery.result.password;\n          if (checkInfo(savedUsername, savedPassword, userInfo.username, userInfo.password)) {\n            // If the user is authenticated\n            setIsLoggedIn(true);\n            if (remember) {\n              // Update existing user's password if Remember Me is checked\n              console.log('User exists and Remember Me is checked, updating password:', userInfo.username);\n              const updatedUser = {\n                username: userInfo.username,\n                password: userInfo.password\n              };\n              store.put(updatedUser);\n            }\n          } else {\n            // Reset alertShown to allow alerts for next login attempts\n            setAlertShown(false);\n          }\n        } else {\n          // User does not exist, create new user\n          const newUser = {\n            username: userInfo.username,\n            password: userInfo.password\n          };\n          console.log('User does not exist, adding new user:', newUser);\n          const addUserRequest = store.put(newUser);\n          addUserRequest.onsuccess = () => {\n            console.log(\"User added successfully!\");\n            setFormTitle(\"Create Account\");\n            setIsLoggedIn(true);\n            alert(\"Account created successfully!\"); // Notify user of successful account creation\n          };\n          addUserRequest.onerror = event => {\n            console.error(\"Error adding user:\", event);\n          };\n        }\n      };\n      userQuery.onerror = event => {\n        console.error(\"Error querying user data\");\n      };\n      transaction.onerror = event => {\n        console.error(\"Transaction failed:\", event);\n      };\n\n      // Save the username for future logins if \"Remember Me\" is checked\n      if (remember) {\n        localStorage.setItem(\"savedUsername\", userInfo.username);\n      } else {\n        localStorage.removeItem(\"savedUsername\");\n      }\n    } else {\n      console.error(\"Database not initialized\");\n    }\n  };\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const updateStatus = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserInfo(prevInfo => ({\n      ...prevInfo,\n      [name]: value\n    }));\n  };\n  const handleRemember = () => {\n    const newRememberState = !remember;\n    setRemember(newRememberState);\n    localStorage.setItem(\"rememberMe\", newRememberState ? \"true\" : \"false\"); // Save remember me state\n    console.log(\"Remember Me state changed to:\", newRememberState);\n  };\n\n  // Show form with specific title\n  const showForm = title => {\n    setFormTitle(title);\n    toggleForm();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        float: \"left\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Signed in as: \", userInfo.username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: userProfile,\n        alt: \"User Profile\",\n        style: {\n          float: \"left\",\n          width: '50px',\n          height: '55px',\n          cursor: 'pointer'\n        },\n        onClick: () => showForm(\"Create Account\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => showForm(\"Log in\"),\n        style: {\n          float: \"left\",\n          marginTop: \"10px\",\n          borderRadius: \"20px\",\n          backgroundColor: \"darkblue\"\n        },\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), isFormOpen && !isLoggedIn && /*#__PURE__*/_jsxDEV(LoginForm, {\n      userInfo: userInfo,\n      setUserInfo: setUserInfo,\n      remember: remember,\n      setRemember: setRemember,\n      handleRemember: handleRemember,\n      handleSubmit: handleSubmit,\n      updateStatus: updateStatus,\n      closeForm: toggleForm // Use toggleForm to close the form\n      ,\n      formTitle: formTitle // Pass the form title to LoginForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://bleaky11.github.io/starter_helpi/\",\n      style: {\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Career Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"Q5YgXZGIdE6YJZzdAd2E0EXsqOE=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","userProfile","LoginForm","Button","jsxDEV","_jsxDEV","HomePage","_s","isFormOpen","setIsFormOpen","userInfo","setUserInfo","username","password","remember","setRemember","isLoggedIn","setIsLoggedIn","formTitle","setFormTitle","db","setDb","alertShown","setAlertShown","checkInfo","savedUsername","savedPassword","userInput","passInput","userAccess","alert","indexedDB","window","request","open","onerror","event","console","error","onupgradeneeded","target","result","createObjectStore","keyPath","log","onsuccess","dbInstance","rememberMe","localStorage","getItem","transaction","store","objectStore","userQuery","get","handleSubmit","preventDefault","updatedUser","put","newUser","addUserRequest","setItem","removeItem","toggleForm","updateStatus","name","value","prevInfo","handleRemember","newRememberState","showForm","title","children","style","position","float","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","width","height","cursor","onClick","marginTop","borderRadius","backgroundColor","closeForm","href","color","_c","$RefreshReg$"],"sources":["C:/Users/Tommy/Project_Final/starter_helpi/src/homepagelogo.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport userProfile from './Images/user-profile.png';\r\nimport { LoginForm } from './LoginForm';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState<boolean>(false);\r\n  const [userInfo, setUserInfo] = useState<{ username: string; password: string }>({ username: \"\", password: \"\" });\r\n  const [remember, setRemember] = useState<boolean>(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\r\n  const [formTitle, setFormTitle] = useState<string>(\"Create Account\");\r\n  const [db, setDb] = useState<IDBDatabase | null>(null); // Store db instance\r\n  const [alertShown, setAlertShown] = useState<boolean>(false); // State to control alert display\r\n\r\n  const checkInfo = (savedUsername: string, savedPassword: string, userInput: string, passInput: string) => {\r\n    let userAccess: boolean = false;\r\n    if (userInput === savedUsername && passInput === savedPassword) {\r\n      userAccess = true;\r\n      // Show success alert only once\r\n      if (!alertShown) {\r\n        alert(\"Login successful!\");\r\n        setAlertShown(true); // Set the alert as shown\r\n      }\r\n    } else {\r\n      if (userInput !== savedUsername && !alertShown) {\r\n        alert(\"Wrong username entered!\");\r\n        setAlertShown(true); // Set the alert as shown\r\n      } else if (passInput !== savedPassword && !alertShown) {\r\n        alert(\"Wrong password entered!\");\r\n        setAlertShown(true); // Set the alert as shown\r\n      }\r\n    }\r\n    return userAccess;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const indexedDB = window.indexedDB;\r\n    const request = indexedDB.open(\"UserDatabase\", 2); // Increment version for schema changes\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"Error accessing user database!\", event);\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = (event.target as IDBOpenDBRequest).result;\r\n      db.createObjectStore(\"users\", { keyPath: \"username\" });\r\n      console.log(\"Object store created.\");\r\n    };\r\n\r\n    request.onsuccess = () => {\r\n      const dbInstance = request.result;\r\n      setDb(dbInstance);\r\n      console.log(\"Database opened successfully.\");\r\n\r\n      // Check if there's saved user data for \"Remember Me\"\r\n      const rememberMe = localStorage.getItem(\"rememberMe\") === \"true\";\r\n      setRemember(rememberMe);\r\n\r\n      if (rememberMe) {\r\n        // Attempt to load saved user data\r\n        const savedUsername = localStorage.getItem(\"savedUsername\");\r\n        if (savedUsername) {\r\n          const transaction = dbInstance.transaction(\"users\", \"readonly\");\r\n          const store = transaction.objectStore(\"users\");\r\n          const userQuery = store.get(savedUsername);\r\n\r\n          userQuery.onsuccess = () => {\r\n            if (userQuery.result) {\r\n              // Load saved user data\r\n              setUserInfo({ username: userQuery.result.username, password: userQuery.result.password });\r\n              setIsLoggedIn(true);\r\n              console.log(\"Loaded saved user data:\", userQuery.result);\r\n            } else {\r\n              console.log(\"No saved user data found for username:\", savedUsername);\r\n            }\r\n          };\r\n\r\n          userQuery.onerror = (event) => {\r\n            console.error(\"Error querying user data:\", event);\r\n          };\r\n        }\r\n      }\r\n    };\r\n  }, []); // Run on component mount\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (!userInfo.username || !userInfo.password) {\r\n      console.error(\"Username and password must be provided.\");\r\n      return;\r\n    }\r\n\r\n    if (db) {\r\n      const transaction = db.transaction(\"users\", \"readwrite\");\r\n      const store = transaction.objectStore(\"users\");\r\n\r\n      const userQuery = store.get(userInfo.username);\r\n\r\n      userQuery.onsuccess = () => {\r\n        if (userQuery.result) {\r\n          const savedUsername = userQuery.result.username;\r\n          const savedPassword = userQuery.result.password;\r\n\r\n          if (checkInfo(savedUsername, savedPassword, userInfo.username, userInfo.password)) {\r\n            // If the user is authenticated\r\n            setIsLoggedIn(true);\r\n\r\n            if (remember) {\r\n              // Update existing user's password if Remember Me is checked\r\n              console.log('User exists and Remember Me is checked, updating password:', userInfo.username);\r\n              const updatedUser = { username: userInfo.username, password: userInfo.password };\r\n              store.put(updatedUser);\r\n            }\r\n          } else {\r\n            // Reset alertShown to allow alerts for next login attempts\r\n            setAlertShown(false);\r\n          }\r\n        } else {\r\n          // User does not exist, create new user\r\n          const newUser = { username: userInfo.username, password: userInfo.password };\r\n          console.log('User does not exist, adding new user:', newUser);\r\n\r\n          const addUserRequest = store.put(newUser);\r\n\r\n          addUserRequest.onsuccess = () => {\r\n            console.log(\"User added successfully!\");\r\n            setFormTitle(\"Create Account\");\r\n            setIsLoggedIn(true);\r\n            alert(\"Account created successfully!\"); // Notify user of successful account creation\r\n          };\r\n\r\n          addUserRequest.onerror = (event) => {\r\n            console.error(\"Error adding user:\", event);\r\n          };\r\n        }\r\n      };\r\n\r\n      userQuery.onerror = (event) => {\r\n        console.error(\"Error querying user data\");\r\n      };\r\n\r\n      transaction.onerror = (event) => {\r\n        console.error(\"Transaction failed:\", event);\r\n      };\r\n\r\n      // Save the username for future logins if \"Remember Me\" is checked\r\n      if (remember) {\r\n        localStorage.setItem(\"savedUsername\", userInfo.username);\r\n      } else {\r\n        localStorage.removeItem(\"savedUsername\");\r\n      }\r\n    } else {\r\n      console.error(\"Database not initialized\");\r\n    }\r\n  };\r\n\r\n  const toggleForm = () => {\r\n    setIsFormOpen(!isFormOpen);\r\n  };\r\n\r\n  const updateStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setUserInfo((prevInfo) => ({\r\n      ...prevInfo,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleRemember = () => {\r\n    const newRememberState = !remember;\r\n    setRemember(newRememberState);\r\n    localStorage.setItem(\"rememberMe\", newRememberState ? \"true\" : \"false\"); // Save remember me state\r\n    console.log(\"Remember Me state changed to:\", newRememberState);\r\n  };\r\n\r\n  // Show form with specific title\r\n  const showForm = (title: string) => {\r\n    setFormTitle(title); \r\n    toggleForm(); \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <div style={{ position: \"absolute\", float: \"left\" }}>\r\n          <h3>Signed in as: {userInfo.username}!</h3>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <img\r\n            src={userProfile}\r\n            alt=\"User Profile\"\r\n            style={{ float: \"left\", width: '50px', height: '55px', cursor: 'pointer' }}\r\n            onClick={() => showForm(\"Create Account\")} \r\n          />\r\n          <Button\r\n            onClick={() => showForm(\"Log in\")}\r\n            style={{ float: \"left\", marginTop: \"10px\", borderRadius: \"20px\", backgroundColor: \"darkblue\" }}\r\n          >\r\n            Log in\r\n          </Button>\r\n        </div>\r\n      )}\r\n\r\n      {isFormOpen && !isLoggedIn && ( \r\n        <LoginForm\r\n          userInfo={userInfo}\r\n          setUserInfo={setUserInfo}\r\n          remember={remember}\r\n          setRemember={setRemember}\r\n          handleRemember={handleRemember}\r\n          handleSubmit={handleSubmit}\r\n          updateStatus={updateStatus}\r\n          closeForm={toggleForm} // Use toggleForm to close the form\r\n          formTitle={formTitle} // Pass the form title to LoginForm\r\n        />\r\n      )}\r\n\r\n      <a href=\"https://bleaky11.github.io/starter_helpi/\" style={{ color: 'black' }}>\r\n        <h1>The Career Quiz</h1>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,MAAM,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,OAAO,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAU,KAAK,CAAC;EAC5D,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAyC;IAAEa,QAAQ,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;EAChH,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAU,KAAK,CAAC;EACxD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAU,KAAK,CAAC;EAC5D,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAS,gBAAgB,CAAC;EACpE,MAAM,CAACqB,EAAE,EAAEC,KAAK,CAAC,GAAGtB,QAAQ,CAAqB,IAAI,CAAC,CAAC,CAAC;EACxD,MAAM,CAACuB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAU,KAAK,CAAC,CAAC,CAAC;;EAE9D,MAAMyB,SAAS,GAAGA,CAACC,aAAqB,EAAEC,aAAqB,EAAEC,SAAiB,EAAEC,SAAiB,KAAK;IACxG,IAAIC,UAAmB,GAAG,KAAK;IAC/B,IAAIF,SAAS,KAAKF,aAAa,IAAIG,SAAS,KAAKF,aAAa,EAAE;MAC9DG,UAAU,GAAG,IAAI;MACjB;MACA,IAAI,CAACP,UAAU,EAAE;QACfQ,KAAK,CAAC,mBAAmB,CAAC;QAC1BP,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB;IACF,CAAC,MAAM;MACL,IAAII,SAAS,KAAKF,aAAa,IAAI,CAACH,UAAU,EAAE;QAC9CQ,KAAK,CAAC,yBAAyB,CAAC;QAChCP,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB,CAAC,MAAM,IAAIK,SAAS,KAAKF,aAAa,IAAI,CAACJ,UAAU,EAAE;QACrDQ,KAAK,CAAC,yBAAyB,CAAC;QAChCP,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB;IACF;IACA,OAAOM,UAAU;EACnB,CAAC;EAED7B,SAAS,CAAC,MAAM;IACd,MAAM+B,SAAS,GAAGC,MAAM,CAACD,SAAS;IAClC,MAAME,OAAO,GAAGF,SAAS,CAACG,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;;IAEnDD,OAAO,CAACE,OAAO,GAAIC,KAAK,IAAK;MAC3BC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,KAAK,CAAC;IACxD,CAAC;IAEDH,OAAO,CAACM,eAAe,GAAIH,KAAK,IAAK;MACnC,MAAMhB,EAAE,GAAIgB,KAAK,CAACI,MAAM,CAAsBC,MAAM;MACpDrB,EAAE,CAACsB,iBAAiB,CAAC,OAAO,EAAE;QAAEC,OAAO,EAAE;MAAW,CAAC,CAAC;MACtDN,OAAO,CAACO,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC;IAEDX,OAAO,CAACY,SAAS,GAAG,MAAM;MACxB,MAAMC,UAAU,GAAGb,OAAO,CAACQ,MAAM;MACjCpB,KAAK,CAACyB,UAAU,CAAC;MACjBT,OAAO,CAACO,GAAG,CAAC,+BAA+B,CAAC;;MAE5C;MACA,MAAMG,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,MAAM;MAChElC,WAAW,CAACgC,UAAU,CAAC;MAEvB,IAAIA,UAAU,EAAE;QACd;QACA,MAAMtB,aAAa,GAAGuB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;QAC3D,IAAIxB,aAAa,EAAE;UACjB,MAAMyB,WAAW,GAAGJ,UAAU,CAACI,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;UAC/D,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;UAC9C,MAAMC,SAAS,GAAGF,KAAK,CAACG,GAAG,CAAC7B,aAAa,CAAC;UAE1C4B,SAAS,CAACR,SAAS,GAAG,MAAM;YAC1B,IAAIQ,SAAS,CAACZ,MAAM,EAAE;cACpB;cACA9B,WAAW,CAAC;gBAAEC,QAAQ,EAAEyC,SAAS,CAACZ,MAAM,CAAC7B,QAAQ;gBAAEC,QAAQ,EAAEwC,SAAS,CAACZ,MAAM,CAAC5B;cAAS,CAAC,CAAC;cACzFI,aAAa,CAAC,IAAI,CAAC;cACnBoB,OAAO,CAACO,GAAG,CAAC,yBAAyB,EAAES,SAAS,CAACZ,MAAM,CAAC;YAC1D,CAAC,MAAM;cACLJ,OAAO,CAACO,GAAG,CAAC,wCAAwC,EAAEnB,aAAa,CAAC;YACtE;UACF,CAAC;UAED4B,SAAS,CAAClB,OAAO,GAAIC,KAAK,IAAK;YAC7BC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,KAAK,CAAC;UACnD,CAAC;QACH;MACF;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMmB,YAAY,GAAInB,KAAuC,IAAK;IAChEA,KAAK,CAACoB,cAAc,CAAC,CAAC;IAEtB,IAAI,CAAC9C,QAAQ,CAACE,QAAQ,IAAI,CAACF,QAAQ,CAACG,QAAQ,EAAE;MAC5CwB,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC;MACxD;IACF;IAEA,IAAIlB,EAAE,EAAE;MACN,MAAM8B,WAAW,GAAG9B,EAAE,CAAC8B,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC;MACxD,MAAMC,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC,OAAO,CAAC;MAE9C,MAAMC,SAAS,GAAGF,KAAK,CAACG,GAAG,CAAC5C,QAAQ,CAACE,QAAQ,CAAC;MAE9CyC,SAAS,CAACR,SAAS,GAAG,MAAM;QAC1B,IAAIQ,SAAS,CAACZ,MAAM,EAAE;UACpB,MAAMhB,aAAa,GAAG4B,SAAS,CAACZ,MAAM,CAAC7B,QAAQ;UAC/C,MAAMc,aAAa,GAAG2B,SAAS,CAACZ,MAAM,CAAC5B,QAAQ;UAE/C,IAAIW,SAAS,CAACC,aAAa,EAAEC,aAAa,EAAEhB,QAAQ,CAACE,QAAQ,EAAEF,QAAQ,CAACG,QAAQ,CAAC,EAAE;YACjF;YACAI,aAAa,CAAC,IAAI,CAAC;YAEnB,IAAIH,QAAQ,EAAE;cACZ;cACAuB,OAAO,CAACO,GAAG,CAAC,4DAA4D,EAAElC,QAAQ,CAACE,QAAQ,CAAC;cAC5F,MAAM6C,WAAW,GAAG;gBAAE7C,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;gBAAEC,QAAQ,EAAEH,QAAQ,CAACG;cAAS,CAAC;cAChFsC,KAAK,CAACO,GAAG,CAACD,WAAW,CAAC;YACxB;UACF,CAAC,MAAM;YACL;YACAlC,aAAa,CAAC,KAAK,CAAC;UACtB;QACF,CAAC,MAAM;UACL;UACA,MAAMoC,OAAO,GAAG;YAAE/C,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;YAAEC,QAAQ,EAAEH,QAAQ,CAACG;UAAS,CAAC;UAC5EwB,OAAO,CAACO,GAAG,CAAC,uCAAuC,EAAEe,OAAO,CAAC;UAE7D,MAAMC,cAAc,GAAGT,KAAK,CAACO,GAAG,CAACC,OAAO,CAAC;UAEzCC,cAAc,CAACf,SAAS,GAAG,MAAM;YAC/BR,OAAO,CAACO,GAAG,CAAC,0BAA0B,CAAC;YACvCzB,YAAY,CAAC,gBAAgB,CAAC;YAC9BF,aAAa,CAAC,IAAI,CAAC;YACnBa,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;UAC1C,CAAC;UAED8B,cAAc,CAACzB,OAAO,GAAIC,KAAK,IAAK;YAClCC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,KAAK,CAAC;UAC5C,CAAC;QACH;MACF,CAAC;MAEDiB,SAAS,CAAClB,OAAO,GAAIC,KAAK,IAAK;QAC7BC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MAC3C,CAAC;MAEDY,WAAW,CAACf,OAAO,GAAIC,KAAK,IAAK;QAC/BC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,KAAK,CAAC;MAC7C,CAAC;;MAED;MACA,IAAItB,QAAQ,EAAE;QACZkC,YAAY,CAACa,OAAO,CAAC,eAAe,EAAEnD,QAAQ,CAACE,QAAQ,CAAC;MAC1D,CAAC,MAAM;QACLoC,YAAY,CAACc,UAAU,CAAC,eAAe,CAAC;MAC1C;IACF,CAAC,MAAM;MACLzB,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;IAC3C;EACF,CAAC;EAED,MAAMyB,UAAU,GAAGA,CAAA,KAAM;IACvBtD,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAED,MAAMwD,YAAY,GAAI5B,KAA0C,IAAK;IACnE,MAAM;MAAE6B,IAAI;MAAEC;IAAM,CAAC,GAAG9B,KAAK,CAACI,MAAM;IACpC7B,WAAW,CAAEwD,QAAQ,KAAM;MACzB,GAAGA,QAAQ;MACX,CAACF,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,gBAAgB,GAAG,CAACvD,QAAQ;IAClCC,WAAW,CAACsD,gBAAgB,CAAC;IAC7BrB,YAAY,CAACa,OAAO,CAAC,YAAY,EAAEQ,gBAAgB,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;IACzEhC,OAAO,CAACO,GAAG,CAAC,+BAA+B,EAAEyB,gBAAgB,CAAC;EAChE,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAIC,KAAa,IAAK;IAClCpD,YAAY,CAACoD,KAAK,CAAC;IACnBR,UAAU,CAAC,CAAC;EACd,CAAC;EAED,oBACE1D,OAAA;IAAAmE,QAAA,GACGxD,UAAU,gBACTX,OAAA;MAAKoE,KAAK,EAAE;QAAEC,QAAQ,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAH,QAAA,eAClDnE,OAAA;QAAAmE,QAAA,GAAI,gBAAc,EAAC9D,QAAQ,CAACE,QAAQ,EAAC,GAAC;MAAA;QAAAgE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,gBAEN1E,OAAA;MAAAmE,QAAA,gBACEnE,OAAA;QACE2E,GAAG,EAAE/E,WAAY;QACjBgF,GAAG,EAAC,cAAc;QAClBR,KAAK,EAAE;UAAEE,KAAK,EAAE,MAAM;UAAEO,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAU,CAAE;QAC3EC,OAAO,EAAEA,CAAA,KAAMf,QAAQ,CAAC,gBAAgB;MAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC,eACF1E,OAAA,CAACF,MAAM;QACLkF,OAAO,EAAEA,CAAA,KAAMf,QAAQ,CAAC,QAAQ,CAAE;QAClCG,KAAK,EAAE;UAAEE,KAAK,EAAE,MAAM;UAAEW,SAAS,EAAE,MAAM;UAAEC,YAAY,EAAE,MAAM;UAAEC,eAAe,EAAE;QAAW,CAAE;QAAAhB,QAAA,EAChG;MAED;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,EAEAvE,UAAU,IAAI,CAACQ,UAAU,iBACxBX,OAAA,CAACH,SAAS;MACRQ,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzBG,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzBqD,cAAc,EAAEA,cAAe;MAC/Bb,YAAY,EAAEA,YAAa;MAC3BS,YAAY,EAAEA,YAAa;MAC3ByB,SAAS,EAAE1B,UAAW,CAAC;MAAA;MACvB7C,SAAS,EAAEA,SAAU,CAAC;IAAA;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CACF,eAED1E,OAAA;MAAGqF,IAAI,EAAC,2CAA2C;MAACjB,KAAK,EAAE;QAAEkB,KAAK,EAAE;MAAQ,CAAE;MAAAnB,QAAA,eAC5EnE,OAAA;QAAAmE,QAAA,EAAI;MAAe;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACxE,EAAA,CA3NWD,QAAkB;AAAAsF,EAAA,GAAlBtF,QAAkB;AAAA,IAAAsF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}